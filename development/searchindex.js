Search.setIndex({"alltitles": {"API Reference": [[1, null]], "Active Classification": [[196, "Active-Classification"], [202, "Active-Classification"], [207, "Active-Classification"], [213, "Active-Classification"]], "Active Image Classification via Self-supervised Learning": [[200, null], [211, null]], "Active Learning Cycle": [[195, "Active-Learning-Cycle"], [206, "Active-Learning-Cycle"]], "Active Learning with Cost Embedding": [[138, null]], "Active Regression": [[197, "Active-Regression"], [208, "Active-Regression"]], "Annotation & Active Learning Cycle": [[201, "Annotation-&-Active-Learning-Cycle"], [212, "Annotation-&-Active-Learning-Cycle"]], "Annotator Models": [[0, "annotator-models"]], "Baseline": [[194, "baseline"], [194, "id11"]], "Batch Active Learning by Diverse Gradient Embedding (BADGE)": [[133, null]], "Batch Bayesian Active Learning by Disagreement (BatchBALD)": [[134, null]], "Batch Density-Diversity-Distribution-Distance Sampling": [[146, null]], "Batch Stream Active Learning with Pool-based Query Strategies": [[204, null], [215, null]], "Bayesian Active Learning by Disagreement (BALD)": [[148, null]], "Building the Documentation": [[0, "building-the-documentation"]], "Checking If a Bug Already Exists": [[0, "checking-if-a-bug-already-exists"]], "Citing": [[217, "citing"]], "Classes": [[2, "classes"], [14, "classes"], [19, "classes"], [22, "classes"], [24, "classes"], [61, "classes"], [66, "classes"], [70, "classes"], [85, "classes"], [94, "classes"]], "Classification": [[195, "Classification"], [206, "Classification"]], "Classification Models and Query Strategies": [[199, "Classification-Models-and-Query-Strategies"], [200, "Classification-Models-and-Query-Strategies"], [210, "Classification-Models-and-Query-Strategies"], [211, "Classification-Models-and-Query-Strategies"]], "Classifiers": [[0, "classifiers"]], "Clustering Uncertainty-weighted Embeddings (CLUE)": [[135, null]], "Cognitive Dual-Query Strategy with Fixed-Uncertainty": [[181, null]], "Cognitive Dual-Query Strategy with Random Sampling": [[182, null]], "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty": [[183, null]], "Cognitive Dual-Query Strategy with Variable-Uncertainty": [[184, null]], "Computation times": [[178, null], [179, null], [193, null], [218, null]], "Contrastive Active Learning (CAL)": [[136, null]], "Contributing Code": [[0, "contributing-code"]], "Contributing Guide": [[0, null]], "Convolutional Neural Network Ensemble": [[196, "Convolutional-Neural-Network-Ensemble"], [207, "Convolutional-Neural-Network-Ensemble"]], "Core Set": [[137, null]], "Create Dataset": [[198, "Create-Dataset"], [209, "Create-Dataset"]], "Create and Start Annotation Process": [[198, "Create-and-Start-Annotation-Process"], [209, "Create-and-Start-Annotation-Process"]], "Data Augmentation": [[196, "Data-Augmentation"], [207, "Data-Augmentation"]], "Data Set Generation": [[195, "Data-Set-Generation"], [197, "Data-Set-Generation"], [199, "Data-Set-Generation"], [202, "Data-Set-Generation"], [206, "Data-Set-Generation"], [208, "Data-Set-Generation"], [210, "Data-Set-Generation"], [213, "Data-Set-Generation"]], "Dataset": [[201, "Dataset"], [212, "Dataset"]], "Deep Pool-based Active Learning: Scikit-activeml with Skorch": [[196, null], [207, null]], "Density Based Active Learning for Data Streams": [[189, null]], "Density-Diversity-Distribution-Distance Sampling": [[147, null]], "Density-weighted Uncertainty Sampling": [[169, null]], "Discriminative Active Learning": [[139, null]], "Documentation": [[0, "documentation"]], "Dropout Query (DropQuery)": [[140, null]], "Dual Strategy for Active Learning": [[170, null]], "Epistemic Uncertainty Sampling": [[141, null]], "Example for Code Contribution Cycle (C3) and Pull Requests": [[0, "example-for-code-contribution-cycle-c3-and-pull-requests"]], "Example with macOS (Homebrew)": [[0, "example-with-macos-homebrew"]], "Example with miniconda": [[0, "example-with-miniconda"]], "Examples": [[0, "examples"], [131, null], [217, "examples"]], "Examples using skactiveml.base.ClassFrequencyEstimator": [[5, "examples-using-skactiveml-base-classfrequencyestimator"]], "Examples using skactiveml.base.PoolQueryStrategy": [[7, "examples-using-skactiveml-base-poolquerystrategy"]], "Examples using skactiveml.base.ProbabilisticRegressor": [[8, "examples-using-skactiveml-base-probabilisticregressor"]], "Examples using skactiveml.base.QueryStrategy": [[9, "examples-using-skactiveml-base-querystrategy"]], "Examples using skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "examples-using-skactiveml-base-singleannotatorpoolquerystrategy"]], "Examples using skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "examples-using-skactiveml-base-singleannotatorstreamquerystrategy"]], "Examples using skactiveml.base.SkactivemlClassifier": [[12, "examples-using-skactiveml-base-skactivemlclassifier"]], "Examples using skactiveml.base.SkactivemlRegressor": [[13, "examples-using-skactiveml-base-skactivemlregressor"]], "Examples using skactiveml.classifier.MixtureModelClassifier": [[15, "examples-using-skactiveml-classifier-mixturemodelclassifier"]], "Examples using skactiveml.classifier.ParzenWindowClassifier": [[16, "examples-using-skactiveml-classifier-parzenwindowclassifier"]], "Examples using skactiveml.classifier.SklearnClassifier": [[17, "examples-using-skactiveml-classifier-sklearnclassifier"]], "Examples using skactiveml.pool.Badge": [[25, "examples-using-skactiveml-pool-badge"]], "Examples using skactiveml.pool.BatchBALD": [[26, "examples-using-skactiveml-pool-batchbald"]], "Examples using skactiveml.pool.Clue": [[27, "examples-using-skactiveml-pool-clue"]], "Examples using skactiveml.pool.ContrastiveAL": [[28, "examples-using-skactiveml-pool-contrastiveal"]], "Examples using skactiveml.pool.CoreSet": [[29, "examples-using-skactiveml-pool-coreset"]], "Examples using skactiveml.pool.CostEmbeddingAL": [[30, "examples-using-skactiveml-pool-costembeddingal"]], "Examples using skactiveml.pool.DiscriminativeAL": [[31, "examples-using-skactiveml-pool-discriminativeal"]], "Examples using skactiveml.pool.DropQuery": [[32, "examples-using-skactiveml-pool-dropquery"]], "Examples using skactiveml.pool.EpistemicUncertaintySampling": [[33, "examples-using-skactiveml-pool-epistemicuncertaintysampling"]], "Examples using skactiveml.pool.ExpectedErrorReduction": [[34, "examples-using-skactiveml-pool-expectederrorreduction"]], "Examples using skactiveml.pool.ExpectedModelChangeMaximization": [[35, "examples-using-skactiveml-pool-expectedmodelchangemaximization"]], "Examples using skactiveml.pool.ExpectedModelOutputChange": [[36, "examples-using-skactiveml-pool-expectedmodeloutputchange"]], "Examples using skactiveml.pool.ExpectedModelVarianceReduction": [[37, "examples-using-skactiveml-pool-expectedmodelvariancereduction"]], "Examples using skactiveml.pool.Falcun": [[38, "examples-using-skactiveml-pool-falcun"]], "Examples using skactiveml.pool.FourDs": [[39, "examples-using-skactiveml-pool-fourds"]], "Examples using skactiveml.pool.GreedyBALD": [[40, "examples-using-skactiveml-pool-greedybald"]], "Examples using skactiveml.pool.GreedySamplingTarget": [[41, "examples-using-skactiveml-pool-greedysamplingtarget"]], "Examples using skactiveml.pool.GreedySamplingX": [[42, "examples-using-skactiveml-pool-greedysamplingx"]], "Examples using skactiveml.pool.KLDivergenceMaximization": [[43, "examples-using-skactiveml-pool-kldivergencemaximization"]], "Examples using skactiveml.pool.MonteCarloEER": [[44, "examples-using-skactiveml-pool-montecarloeer"]], "Examples using skactiveml.pool.ParallelUtilityEstimationWrapper": [[45, "examples-using-skactiveml-pool-parallelutilityestimationwrapper"]], "Examples using skactiveml.pool.ProbCover": [[46, "examples-using-skactiveml-pool-probcover"]], "Examples using skactiveml.pool.ProbabilisticAL": [[47, "examples-using-skactiveml-pool-probabilistical"]], "Examples using skactiveml.pool.QueryByCommittee": [[48, "examples-using-skactiveml-pool-querybycommittee"]], "Examples using skactiveml.pool.Quire": [[49, "examples-using-skactiveml-pool-quire"]], "Examples using skactiveml.pool.RandomSampling": [[50, "examples-using-skactiveml-pool-randomsampling"]], "Examples using skactiveml.pool.RegressionTreeBasedAL": [[51, "examples-using-skactiveml-pool-regressiontreebasedal"]], "Examples using skactiveml.pool.SubSamplingWrapper": [[52, "examples-using-skactiveml-pool-subsamplingwrapper"]], "Examples using skactiveml.pool.TypiClust": [[53, "examples-using-skactiveml-pool-typiclust"]], "Examples using skactiveml.pool.UncertaintySampling": [[54, "examples-using-skactiveml-pool-uncertaintysampling"]], "Examples using skactiveml.pool.ValueOfInformationEER": [[55, "examples-using-skactiveml-pool-valueofinformationeer"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategy": [[71, "examples-using-skactiveml-stream-cognitivedualquerystrategy"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[72, "examples-using-skactiveml-stream-cognitivedualquerystrategyfixun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRan": [[73, "examples-using-skactiveml-stream-cognitivedualquerystrategyran"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[74, "examples-using-skactiveml-stream-cognitivedualquerystrategyranvarun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[75, "examples-using-skactiveml-stream-cognitivedualquerystrategyvarun"]], "Examples using skactiveml.stream.FixedUncertainty": [[76, "examples-using-skactiveml-stream-fixeduncertainty"]], "Examples using skactiveml.stream.PeriodicSampling": [[77, "examples-using-skactiveml-stream-periodicsampling"]], "Examples using skactiveml.stream.RandomVariableUncertainty": [[78, "examples-using-skactiveml-stream-randomvariableuncertainty"]], "Examples using skactiveml.stream.Split": [[79, "examples-using-skactiveml-stream-split"]], "Examples using skactiveml.stream.StreamDensityBasedAL": [[80, "examples-using-skactiveml-stream-streamdensitybasedal"]], "Examples using skactiveml.stream.StreamProbabilisticAL": [[81, "examples-using-skactiveml-stream-streamprobabilistical"]], "Examples using skactiveml.stream.StreamRandomSampling": [[82, "examples-using-skactiveml-stream-streamrandomsampling"]], "Examples using skactiveml.stream.UncertaintyZliobaite": [[83, "examples-using-skactiveml-stream-uncertaintyzliobaite"]], "Examples using skactiveml.stream.VariableUncertainty": [[84, "examples-using-skactiveml-stream-variableuncertainty"]], "Examples using skactiveml.utils.MISSING_LABEL": [[219, "examples-using-skactiveml-utils-missing-label"]], "Examples using skactiveml.utils.is_labeled": [[114, "examples-using-skactiveml-utils-is-labeled"]], "Examples using skactiveml.utils.labeled_indices": [[116, "examples-using-skactiveml-utils-labeled-indices"]], "Examples using skactiveml.utils.simple_batch": [[121, "examples-using-skactiveml-utils-simple-batch"]], "Examples using skactiveml.utils.unlabeled_indices": [[122, "examples-using-skactiveml-utils-unlabeled-indices"]], "Examples using skactiveml.visualization.plot_contour_for_samples": [[126, "examples-using-skactiveml-visualization-plot-contour-for-samples"]], "Examples using skactiveml.visualization.plot_decision_boundary": [[127, "examples-using-skactiveml-visualization-plot-decision-boundary"]], "Examples using skactiveml.visualization.plot_stream_decision_boundary": [[128, "examples-using-skactiveml-visualization-plot-stream-decision-boundary"]], "Examples using skactiveml.visualization.plot_stream_training_data": [[129, "examples-using-skactiveml-visualization-plot-stream-training-data"]], "Examples using skactiveml.visualization.plot_utilities": [[130, "examples-using-skactiveml-visualization-plot-utilities"]], "Expected Average Precision": [[171, null]], "Expected Model Change Maximization": [[142, null]], "Expected Model Output Change": [[143, null]], "Expected Model Variance Reduction": [[144, null]], "Experiment Loop": [[199, "Experiment-Loop"], [200, "Experiment-Loop"], [210, "Experiment-Loop"], [211, "Experiment-Loop"]], "Experiment Parameters": [[199, "Experiment-Parameters"], [200, "Experiment-Parameters"], [210, "Experiment-Parameters"], [211, "Experiment-Parameters"]], "Fast Active Learning by Contrastive UNcertainty (FALCUN)": [[145, null]], "Fixed-Uncertainty": [[185, null]], "Functions": [[24, "functions"], [94, "functions"], [123, "functions"]], "General": [[0, "general"], [0, "general-2"]], "General Advice": [[0, "general-advice"]], "General Coding Conventions": [[0, "general-coding-conventions"]], "General advice": [[0, "general-advice-2"], [0, "general-advice-3"], [0, "general-advice-6"], [0, "general-advice-7"], [0, "general-advice-8"], [0, "general-advice-9"], [0, "general-advice-10"], [0, "general-advice-11"], [0, "general-advice-12"], [0, "id23"], [0, "general-advice-14"]], "General advice for working with a budget_manager:": [[0, "general-advice-for-working-with-a-budget-manager"]], "Generate And Initialize Data Set": [[203, "Generate-And-Initialize-Data-Set"], [204, "Generate-And-Initialize-Data-Set"], [214, "Generate-And-Initialize-Data-Set"], [215, "Generate-And-Initialize-Data-Set"]], "Generate and Initialize Data Set": [[205, "Generate-and-Initialize-Data-Set"], [216, "Generate-and-Initialize-Data-Set"]], "Get Started": [[0, "get-started"]], "Getting Help": [[0, "getting-help"]], "Greedy Sampling on the Feature Space (GSx)": [[151, null]], "Greedy Sampling on the Target Space (GSy)": [[149, null]], "Hybrid": [[194, "hybrid"], [194, "id12"]], "Improved Greedy Sampling (GSi)": [[150, null]], "Indices and tables": [[217, "indices-and-tables"]], "Informativeness": [[194, "informativeness"], [194, "id28"]], "Initialize Batch Stream Parameters": [[204, "Initialize-Batch-Stream-Parameters"], [215, "Initialize-Batch-Stream-Parameters"]], "Initialize Query Strategies": [[203, "Initialize-Query-Strategies"], [204, "Initialize-Query-Strategies"], [205, "Initialize-Query-Strategies"], [214, "Initialize-Query-Strategies"], [215, "Initialize-Query-Strategies"], [216, "Initialize-Query-Strategies"]], "Initialize Stream Parameters": [[203, "Initialize-Stream-Parameters"], [205, "Initialize-Stream-Parameters"], [214, "Initialize-Stream-Parameters"], [216, "Initialize-Stream-Parameters"]], "Install Dependencies": [[0, "install-dependencies"]], "Issue Tracking": [[0, "issue-tracking"]], "Load your preprocessed Dataset": [[200, "Load-your-preprocessed-Dataset"], [211, "Load-your-preprocessed-Dataset"]], "Loading Digit Data Set": [[196, "Loading-Digit-Data-Set"], [207, "Loading-Digit-Data-Set"]], "Monte-Carlo EER with Log-Loss": [[153, null]], "Monte-Carlo EER with Misclassification-Loss": [[154, null]], "Multi-Annotator Pool-based Query Strategies": [[0, "multi-annotator-pool-based-query-strategies"]], "Multi-annotator Pool-based Active Learning - Getting Started": [[202, null], [213, null]], "Multi-class Probabilistic Active Learning": [[157, null]], "Overview": [[0, "overview"]], "Paper Annotation Tool using Text Embeddings": [[201, null], [212, null]], "Parallel Utility Estimation Wrapper": [[155, null]], "Parameters": [[13, "parameters"]], "Periodic Sampling": [[186, null]], "Pool": [[194, "pool"]], "Pool-based AL Strategies": [[131, "pool-based-al-strategies"], [132, null]], "Pool-based Active Learning": [[217, "pool-based-active-learning"]], "Pool-based Active Learning - Getting Started": [[195, null], [206, null]], "Pool-based Active Learning - Simple Evaluation Study": [[199, null], [210, null]], "Pool-based Active Learning for Regression - Getting Started": [[197, null], [208, null]], "Prepare Data with DINOv2": [[200, "Prepare-Data-with-DINOv2"], [211, "Prepare-Data-with-DINOv2"]], "Probabilistic Active Learning in Datastreams": [[190, null]], "Probability Coverage (ProbCover)": [[156, null]], "Query Strategies": [[0, "query-strategies"]], "Query Strategy": [[195, "Query-Strategy"], [206, "Query-Strategy"]], "Query Strategy Overview": [[217, "query-strategy-overview"]], "Query-by-Committee (QBC) with Empirical Variance": [[158, null]], "Query-by-Committee (QBC) with Kullback-Leibler Divergence": [[159, null]], "Query-by-Committee (QBC) with Variation Ratios": [[160, null]], "Query-by-Committee (QBC) with Vote Entropy": [[161, null]], "Querying Informative and Representative Examples": [[162, null]], "Random Sampling": [[163, null]], "Random Seed Generation": [[203, "Random-Seed-Generation"], [204, "Random-Seed-Generation"], [205, "Random-Seed-Generation"], [214, "Random-Seed-Generation"], [215, "Random-Seed-Generation"], [216, "Random-Seed-Generation"]], "Random Seed Management": [[199, "Random-Seed-Management"], [200, "Random-Seed-Management"], [210, "Random-Seed-Management"], [211, "Random-Seed-Management"]], "Randomized-Variable-Uncertainty": [[187, null]], "References": [[194, "references"]], "Regression Tree Based Active Learning (RT-AL) with Diversity Selection": [[164, null]], "Regression Tree Based Active Learning (RT-AL) with Random Selection": [[165, null]], "Regression Tree Based Active Learning (RT-AL) with Representativity Selection": [[166, null]], "Regression based Kullback Leibler Divergence Maximization": [[152, null]], "Regressors": [[0, "regressors"]], "Reporting an Issue": [[0, "reporting-an-issue"]], "Representativeness": [[194, "representativeness"]], "Result Plotting": [[199, "Result-Plotting"], [210, "Result-Plotting"]], "Resulting Plotting": [[200, "Resulting-Plotting"], [211, "Resulting-Plotting"]], "Roadmap": [[0, "roadmap"]], "Sample Annotating": [[198, null], [209, null]], "Setup Development Environment": [[0, "setup-development-environment"]], "Single-annotator Pool-based Query Strategies": [[0, "single-annotator-pool-based-query-strategies"]], "Single-annotator Stream-based Query Strategies": [[0, "single-annotator-stream-based-query-strategies"]], "Split": [[188, null]], "Start Active Learning Cycle": [[203, "Start-Active-Learning-Cycle"], [204, "Start-Active-Learning-Cycle"], [205, "Start-Active-Learning-Cycle"], [214, "Start-Active-Learning-Cycle"], [215, "Start-Active-Learning-Cycle"], [216, "Start-Active-Learning-Cycle"]], "Strategy Overview": [[194, null]], "Stream": [[194, "stream"]], "Stream Random Sampling": [[191, null]], "Stream-based AL Strategies": [[131, "stream-based-al-strategies"], [180, null]], "Stream-based Active Learning": [[217, "stream-based-active-learning"]], "Stream-based Active Learning - Getting Started": [[203, null], [214, null]], "Stream-based Active Learning with River": [[205, null], [216, null]], "Sub-sampling Wrapper": [[167, null]], "Submodules": [[14, "submodules"], [24, "submodules"], [70, "submodules"]], "Testing": [[0, "testing"], [0, "testing-2"], [0, "testing-3"], [0, "testing-4"], [0, "testing-5"], [0, "testing-6"]], "Testing and Code Coverage": [[0, "testing-and-code-coverage"]], "Thank You, Contributors!": [[0, "thank-you-contributors"]], "The Annotation Widget Class": [[198, "The-Annotation-Widget-Class"], [209, "The-Annotation-Widget-Class"]], "Tutorials": [[220, null]], "Typical Clustering (TypiClust)": [[168, null]], "Uncertainty Sampling with Entropy": [[172, null]], "Uncertainty Sampling with Least-Confidence": [[173, null]], "Uncertainty Sampling with Margin": [[174, null]], "User Installation": [[217, "user-installation"]], "User Interface": [[201, "User-Interface"], [212, "User-Interface"]], "Value of Information": [[175, null]], "Value of Information on Labeled Samples": [[176, null]], "Value of Information on Unlabeled Samples": [[177, null]], "Variable-Uncertainty": [[192, null]], "Visualize Results": [[196, "Visualize-Results"], [207, "Visualize-Results"]], "Wrapper": [[194, "wrapper"]], "__init__": [[0, "init"], [0, "init-2"], [0, "init-3"]], "budget_manager": [[0, "budget-manager"]], "fit": [[0, "fit"], [0, "fit-2"]], "predict": [[0, "predict"], [0, "predict-2"]], "predict_annotator_perf": [[0, "predict-annotator-perf"]], "predict_proba": [[0, "predict-proba"]], "query": [[0, "query"], [0, "query-method-2"], [0, "query-method-3"]], "query_by_utilities": [[0, "query-by-utilities"]], "scikit-activeml: A Library and Toolbox for Active Learning Algorithms": [[217, null]], "score": [[0, "score"], [0, "score-2"]], "skactiveml.base": [[2, null]], "skactiveml.base.AnnotatorModelMixin": [[3, null]], "skactiveml.base.BudgetManager": [[4, null]], "skactiveml.base.ClassFrequencyEstimator": [[5, null]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[6, null]], "skactiveml.base.PoolQueryStrategy": [[7, null]], "skactiveml.base.ProbabilisticRegressor": [[8, null]], "skactiveml.base.QueryStrategy": [[9, null]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, null]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, null]], "skactiveml.base.SkactivemlClassifier": [[12, null]], "skactiveml.base.SkactivemlRegressor": [[13, null]], "skactiveml.classifier": [[14, null]], "skactiveml.classifier.MixtureModelClassifier": [[15, null]], "skactiveml.classifier.ParzenWindowClassifier": [[16, null]], "skactiveml.classifier.SklearnClassifier": [[17, null]], "skactiveml.classifier.SlidingWindowClassifier": [[18, null]], "skactiveml.classifier.multiannotator": [[19, null]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[20, null]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[21, null]], "skactiveml.exceptions": [[22, null]], "skactiveml.exceptions.MappingError": [[23, null]], "skactiveml.pool": [[24, null]], "skactiveml.pool.Badge": [[25, null]], "skactiveml.pool.BatchBALD": [[26, null]], "skactiveml.pool.Clue": [[27, null]], "skactiveml.pool.ContrastiveAL": [[28, null]], "skactiveml.pool.CoreSet": [[29, null]], "skactiveml.pool.CostEmbeddingAL": [[30, null]], "skactiveml.pool.DiscriminativeAL": [[31, null]], "skactiveml.pool.DropQuery": [[32, null]], "skactiveml.pool.EpistemicUncertaintySampling": [[33, null]], "skactiveml.pool.ExpectedErrorReduction": [[34, null]], "skactiveml.pool.ExpectedModelChangeMaximization": [[35, null]], "skactiveml.pool.ExpectedModelOutputChange": [[36, null]], "skactiveml.pool.ExpectedModelVarianceReduction": [[37, null]], "skactiveml.pool.Falcun": [[38, null]], "skactiveml.pool.FourDs": [[39, null]], "skactiveml.pool.GreedyBALD": [[40, null]], "skactiveml.pool.GreedySamplingTarget": [[41, null]], "skactiveml.pool.GreedySamplingX": [[42, null]], "skactiveml.pool.KLDivergenceMaximization": [[43, null]], "skactiveml.pool.MonteCarloEER": [[44, null]], "skactiveml.pool.ParallelUtilityEstimationWrapper": [[45, null]], "skactiveml.pool.ProbCover": [[46, null]], "skactiveml.pool.ProbabilisticAL": [[47, null]], "skactiveml.pool.QueryByCommittee": [[48, null]], "skactiveml.pool.Quire": [[49, null]], "skactiveml.pool.RandomSampling": [[50, null]], "skactiveml.pool.RegressionTreeBasedAL": [[51, null]], "skactiveml.pool.SubSamplingWrapper": [[52, null]], "skactiveml.pool.TypiClust": [[53, null]], "skactiveml.pool.UncertaintySampling": [[54, null]], "skactiveml.pool.ValueOfInformationEER": [[55, null]], "skactiveml.pool.average_kl_divergence": [[56, null]], "skactiveml.pool.batch_bald": [[57, null]], "skactiveml.pool.cost_reduction": [[58, null]], "skactiveml.pool.expected_average_precision": [[59, null]], "skactiveml.pool.k_greedy_center": [[60, null]], "skactiveml.pool.multiannotator": [[61, null]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[62, null]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[63, null]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[64, null]], "skactiveml.pool.uncertainty_scores": [[65, null]], "skactiveml.pool.utils": [[66, null]], "skactiveml.pool.utils.IndexClassifierWrapper": [[67, null]], "skactiveml.pool.variation_ratios": [[68, null]], "skactiveml.pool.vote_entropy": [[69, null]], "skactiveml.stream": [[70, null]], "skactiveml.stream.CognitiveDualQueryStrategy": [[71, null]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[72, null]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[73, null]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[74, null]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[75, null]], "skactiveml.stream.FixedUncertainty": [[76, null]], "skactiveml.stream.PeriodicSampling": [[77, null]], "skactiveml.stream.RandomVariableUncertainty": [[78, null]], "skactiveml.stream.Split": [[79, null]], "skactiveml.stream.StreamDensityBasedAL": [[80, null]], "skactiveml.stream.StreamProbabilisticAL": [[81, null]], "skactiveml.stream.StreamRandomSampling": [[82, null]], "skactiveml.stream.UncertaintyZliobaite": [[83, null]], "skactiveml.stream.VariableUncertainty": [[84, null]], "skactiveml.stream.budgetmanager": [[85, null]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[86, null]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[87, null]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[88, null]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[89, null]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[90, null]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[91, null]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[92, null]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[93, null]], "skactiveml.utils": [[94, null]], "skactiveml.utils.ExtLabelEncoder": [[95, null]], "skactiveml.utils.MISSING_LABEL": [[219, null]], "skactiveml.utils._check_callable": [[96, null]], "skactiveml.utils.call_func": [[97, null]], "skactiveml.utils.check_X_y": [[98, null]], "skactiveml.utils.check_bound": [[99, null]], "skactiveml.utils.check_budget_manager": [[100, null]], "skactiveml.utils.check_class_prior": [[101, null]], "skactiveml.utils.check_classes": [[102, null]], "skactiveml.utils.check_classifier_params": [[103, null]], "skactiveml.utils.check_cost_matrix": [[104, null]], "skactiveml.utils.check_equal_missing_label": [[105, null]], "skactiveml.utils.check_indices": [[106, null]], "skactiveml.utils.check_missing_label": [[107, null]], "skactiveml.utils.check_n_features": [[108, null]], "skactiveml.utils.check_random_state": [[109, null]], "skactiveml.utils.check_scalar": [[110, null]], "skactiveml.utils.check_type": [[111, null]], "skactiveml.utils.compute_vote_vectors": [[112, null]], "skactiveml.utils.ext_confusion_matrix": [[113, null]], "skactiveml.utils.is_labeled": [[114, null]], "skactiveml.utils.is_unlabeled": [[115, null]], "skactiveml.utils.labeled_indices": [[116, null]], "skactiveml.utils.majority_vote": [[117, null]], "skactiveml.utils.match_signature": [[118, null]], "skactiveml.utils.rand_argmax": [[119, null]], "skactiveml.utils.rand_argmin": [[120, null]], "skactiveml.utils.simple_batch": [[121, null]], "skactiveml.utils.unlabeled_indices": [[122, null]], "skactiveml.visualization": [[123, null]], "skactiveml.visualization.mesh": [[124, null]], "skactiveml.visualization.plot_annotator_utilities": [[125, null]], "skactiveml.visualization.plot_contour_for_samples": [[126, null]], "skactiveml.visualization.plot_decision_boundary": [[127, null]], "skactiveml.visualization.plot_stream_decision_boundary": [[128, null]], "skactiveml.visualization.plot_stream_training_data": [[129, null]], "skactiveml.visualization.plot_utilities": [[130, null]], "update": [[0, "update"], [0, "update-2"]]}, "docnames": ["contributing", "generated/api/skactiveml", "generated/api/skactiveml.base", "generated/api/skactiveml.base.AnnotatorModelMixin", "generated/api/skactiveml.base.BudgetManager", "generated/api/skactiveml.base.ClassFrequencyEstimator", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.PoolQueryStrategy", "generated/api/skactiveml.base.ProbabilisticRegressor", "generated/api/skactiveml.base.QueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy", "generated/api/skactiveml.base.SkactivemlClassifier", "generated/api/skactiveml.base.SkactivemlRegressor", "generated/api/skactiveml.classifier", "generated/api/skactiveml.classifier.MixtureModelClassifier", "generated/api/skactiveml.classifier.ParzenWindowClassifier", "generated/api/skactiveml.classifier.SklearnClassifier", "generated/api/skactiveml.classifier.SlidingWindowClassifier", "generated/api/skactiveml.classifier.multiannotator", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "generated/api/skactiveml.exceptions", "generated/api/skactiveml.exceptions.MappingError", "generated/api/skactiveml.pool", "generated/api/skactiveml.pool.Badge", "generated/api/skactiveml.pool.BatchBALD", "generated/api/skactiveml.pool.Clue", "generated/api/skactiveml.pool.ContrastiveAL", "generated/api/skactiveml.pool.CoreSet", "generated/api/skactiveml.pool.CostEmbeddingAL", "generated/api/skactiveml.pool.DiscriminativeAL", "generated/api/skactiveml.pool.DropQuery", "generated/api/skactiveml.pool.EpistemicUncertaintySampling", "generated/api/skactiveml.pool.ExpectedErrorReduction", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization", "generated/api/skactiveml.pool.ExpectedModelOutputChange", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction", "generated/api/skactiveml.pool.Falcun", "generated/api/skactiveml.pool.FourDs", "generated/api/skactiveml.pool.GreedyBALD", "generated/api/skactiveml.pool.GreedySamplingTarget", "generated/api/skactiveml.pool.GreedySamplingX", "generated/api/skactiveml.pool.KLDivergenceMaximization", "generated/api/skactiveml.pool.MonteCarloEER", "generated/api/skactiveml.pool.ParallelUtilityEstimationWrapper", "generated/api/skactiveml.pool.ProbCover", "generated/api/skactiveml.pool.ProbabilisticAL", "generated/api/skactiveml.pool.QueryByCommittee", "generated/api/skactiveml.pool.Quire", "generated/api/skactiveml.pool.RandomSampling", "generated/api/skactiveml.pool.RegressionTreeBasedAL", "generated/api/skactiveml.pool.SubSamplingWrapper", "generated/api/skactiveml.pool.TypiClust", "generated/api/skactiveml.pool.UncertaintySampling", "generated/api/skactiveml.pool.ValueOfInformationEER", "generated/api/skactiveml.pool.average_kl_divergence", "generated/api/skactiveml.pool.batch_bald", "generated/api/skactiveml.pool.cost_reduction", "generated/api/skactiveml.pool.expected_average_precision", "generated/api/skactiveml.pool.k_greedy_center", "generated/api/skactiveml.pool.multiannotator", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "generated/api/skactiveml.pool.uncertainty_scores", "generated/api/skactiveml.pool.utils", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper", "generated/api/skactiveml.pool.variation_ratios", "generated/api/skactiveml.pool.vote_entropy", "generated/api/skactiveml.stream", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn", "generated/api/skactiveml.stream.FixedUncertainty", "generated/api/skactiveml.stream.PeriodicSampling", "generated/api/skactiveml.stream.RandomVariableUncertainty", "generated/api/skactiveml.stream.Split", "generated/api/skactiveml.stream.StreamDensityBasedAL", "generated/api/skactiveml.stream.StreamProbabilisticAL", "generated/api/skactiveml.stream.StreamRandomSampling", "generated/api/skactiveml.stream.UncertaintyZliobaite", "generated/api/skactiveml.stream.VariableUncertainty", "generated/api/skactiveml.stream.budgetmanager", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "generated/api/skactiveml.utils", "generated/api/skactiveml.utils.ExtLabelEncoder", "generated/api/skactiveml.utils._check_callable", "generated/api/skactiveml.utils.call_func", "generated/api/skactiveml.utils.check_X_y", "generated/api/skactiveml.utils.check_bound", "generated/api/skactiveml.utils.check_budget_manager", "generated/api/skactiveml.utils.check_class_prior", "generated/api/skactiveml.utils.check_classes", "generated/api/skactiveml.utils.check_classifier_params", "generated/api/skactiveml.utils.check_cost_matrix", "generated/api/skactiveml.utils.check_equal_missing_label", "generated/api/skactiveml.utils.check_indices", "generated/api/skactiveml.utils.check_missing_label", "generated/api/skactiveml.utils.check_n_features", "generated/api/skactiveml.utils.check_random_state", "generated/api/skactiveml.utils.check_scalar", "generated/api/skactiveml.utils.check_type", "generated/api/skactiveml.utils.compute_vote_vectors", "generated/api/skactiveml.utils.ext_confusion_matrix", "generated/api/skactiveml.utils.is_labeled", "generated/api/skactiveml.utils.is_unlabeled", "generated/api/skactiveml.utils.labeled_indices", "generated/api/skactiveml.utils.majority_vote", "generated/api/skactiveml.utils.match_signature", "generated/api/skactiveml.utils.rand_argmax", "generated/api/skactiveml.utils.rand_argmin", "generated/api/skactiveml.utils.simple_batch", "generated/api/skactiveml.utils.unlabeled_indices", "generated/api/skactiveml.visualization", "generated/api/skactiveml.visualization.mesh", "generated/api/skactiveml.visualization.plot_annotator_utilities", "generated/api/skactiveml.visualization.plot_contour_for_samples", "generated/api/skactiveml.visualization.plot_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_training_data", "generated/api/skactiveml.visualization.plot_utilities", "generated/sphinx_gallery_examples/index", "generated/sphinx_gallery_examples/pool/index", "generated/sphinx_gallery_examples/pool/plot-Badge-Batch_Active_Learning_by_Diverse_Gradient_Embedding_(BADGE)", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement_(BatchBALD)", "generated/sphinx_gallery_examples/pool/plot-Clue-Clustering_Uncertainty-weighted_Embeddings_(CLUE)", "generated/sphinx_gallery_examples/pool/plot-ContrastiveAL-Contrastive_Active_Learning_(CAL)", "generated/sphinx_gallery_examples/pool/plot-CoreSet-Core_Set", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE)", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL)", "generated/sphinx_gallery_examples/pool/plot-DropQuery-Dropout_Query_(DropQuery)", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling_(EpisUS)", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction", "generated/sphinx_gallery_examples/pool/plot-Falcun-Fast_Active_Learning_by_Contrastive_UNcertainty_(FALCUN)", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS)", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS)", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx)", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss", "generated/sphinx_gallery_examples/pool/plot-ParallelUtilityEstimationWrapper-Parallel_Utility_Estimation_Wrapper", "generated/sphinx_gallery_examples/pool/plot-ProbCover-Probability_Coverage_(ProbCover)", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL)", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Empirical_Variance", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Kullback-Leibler_Divergence", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Variation_Ratios", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Vote_Entropy", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE)", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Diversity_Selection", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Random_Selection", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Representativity_Selection", "generated/sphinx_gallery_examples/pool/plot-SubSamplingWrapper-Sub-sampling_Wrapper", "generated/sphinx_gallery_examples/pool/plot-TypiClust-Typical_Clustering_(TypiClust)", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_Strategy_for_Active_Learning", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI)", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples", "generated/sphinx_gallery_examples/pool/sg_execution_times", "generated/sphinx_gallery_examples/sg_execution_times", "generated/sphinx_gallery_examples/stream/index", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-Split-Split", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/sg_execution_times", "generated/strategy_overview", "generated/tutorials/00_pool_getting_started", "generated/tutorials/01_deep_pool_al_with_skorch", "generated/tutorials/02_pool_regression_getting_started", "generated/tutorials/03_pool_oracle_annotations", "generated/tutorials/04_pool_simple_evaluation_study", "generated/tutorials/05_pool_al_with_self_supervised_learning", "generated/tutorials/06_pool_al_text_annotation_tool", "generated/tutorials/10_multiple_annotators_getting_started", "generated/tutorials/20_stream_getting_started", "generated/tutorials/21_stream_batch_with_pool_al", "generated/tutorials/22_river_classifier", "generated/tutorials_colab/00_pool_getting_started", "generated/tutorials_colab/01_deep_pool_al_with_skorch", "generated/tutorials_colab/02_pool_regression_getting_started", "generated/tutorials_colab/03_pool_oracle_annotations", "generated/tutorials_colab/04_pool_simple_evaluation_study", "generated/tutorials_colab/05_pool_al_with_self_supervised_learning", "generated/tutorials_colab/06_pool_al_text_annotation_tool", "generated/tutorials_colab/10_multiple_annotators_getting_started", "generated/tutorials_colab/20_stream_getting_started", "generated/tutorials_colab/21_stream_batch_with_pool_al", "generated/tutorials_colab/22_river_classifier", "index", "sg_execution_times", "skactiveml.utils.MISSING_LABEL", "tutorials"], "envversion": {"copy_sphinx_gallery_notebooks": 1, "nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["contributing.rst", "generated/api/skactiveml.rst", "generated/api/skactiveml.base.rst", "generated/api/skactiveml.base.AnnotatorModelMixin.rst", "generated/api/skactiveml.base.BudgetManager.rst", "generated/api/skactiveml.base.ClassFrequencyEstimator.rst", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.PoolQueryStrategy.rst", "generated/api/skactiveml.base.ProbabilisticRegressor.rst", "generated/api/skactiveml.base.QueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy.rst", "generated/api/skactiveml.base.SkactivemlClassifier.rst", "generated/api/skactiveml.base.SkactivemlRegressor.rst", "generated/api/skactiveml.classifier.rst", "generated/api/skactiveml.classifier.MixtureModelClassifier.rst", "generated/api/skactiveml.classifier.ParzenWindowClassifier.rst", "generated/api/skactiveml.classifier.SklearnClassifier.rst", "generated/api/skactiveml.classifier.SlidingWindowClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.rst", "generated/api/skactiveml.exceptions.rst", "generated/api/skactiveml.exceptions.MappingError.rst", "generated/api/skactiveml.pool.rst", "generated/api/skactiveml.pool.Badge.rst", "generated/api/skactiveml.pool.BatchBALD.rst", "generated/api/skactiveml.pool.Clue.rst", "generated/api/skactiveml.pool.ContrastiveAL.rst", "generated/api/skactiveml.pool.CoreSet.rst", "generated/api/skactiveml.pool.CostEmbeddingAL.rst", "generated/api/skactiveml.pool.DiscriminativeAL.rst", "generated/api/skactiveml.pool.DropQuery.rst", "generated/api/skactiveml.pool.EpistemicUncertaintySampling.rst", "generated/api/skactiveml.pool.ExpectedErrorReduction.rst", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization.rst", "generated/api/skactiveml.pool.ExpectedModelOutputChange.rst", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction.rst", "generated/api/skactiveml.pool.Falcun.rst", "generated/api/skactiveml.pool.FourDs.rst", "generated/api/skactiveml.pool.GreedyBALD.rst", "generated/api/skactiveml.pool.GreedySamplingTarget.rst", "generated/api/skactiveml.pool.GreedySamplingX.rst", "generated/api/skactiveml.pool.KLDivergenceMaximization.rst", "generated/api/skactiveml.pool.MonteCarloEER.rst", "generated/api/skactiveml.pool.ParallelUtilityEstimationWrapper.rst", "generated/api/skactiveml.pool.ProbCover.rst", "generated/api/skactiveml.pool.ProbabilisticAL.rst", "generated/api/skactiveml.pool.QueryByCommittee.rst", "generated/api/skactiveml.pool.Quire.rst", "generated/api/skactiveml.pool.RandomSampling.rst", "generated/api/skactiveml.pool.RegressionTreeBasedAL.rst", "generated/api/skactiveml.pool.SubSamplingWrapper.rst", "generated/api/skactiveml.pool.TypiClust.rst", "generated/api/skactiveml.pool.UncertaintySampling.rst", "generated/api/skactiveml.pool.ValueOfInformationEER.rst", "generated/api/skactiveml.pool.average_kl_divergence.rst", "generated/api/skactiveml.pool.batch_bald.rst", "generated/api/skactiveml.pool.cost_reduction.rst", "generated/api/skactiveml.pool.expected_average_precision.rst", "generated/api/skactiveml.pool.k_greedy_center.rst", "generated/api/skactiveml.pool.multiannotator.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold.rst", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper.rst", "generated/api/skactiveml.pool.uncertainty_scores.rst", "generated/api/skactiveml.pool.utils.rst", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper.rst", "generated/api/skactiveml.pool.variation_ratios.rst", "generated/api/skactiveml.pool.vote_entropy.rst", "generated/api/skactiveml.stream.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn.rst", "generated/api/skactiveml.stream.FixedUncertainty.rst", "generated/api/skactiveml.stream.PeriodicSampling.rst", "generated/api/skactiveml.stream.RandomVariableUncertainty.rst", "generated/api/skactiveml.stream.Split.rst", "generated/api/skactiveml.stream.StreamDensityBasedAL.rst", "generated/api/skactiveml.stream.StreamProbabilisticAL.rst", "generated/api/skactiveml.stream.StreamRandomSampling.rst", "generated/api/skactiveml.stream.UncertaintyZliobaite.rst", "generated/api/skactiveml.stream.VariableUncertainty.rst", "generated/api/skactiveml.stream.budgetmanager.rst", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.rst", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.rst", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.utils.rst", "generated/api/skactiveml.utils.ExtLabelEncoder.rst", "generated/api/skactiveml.utils._check_callable.rst", "generated/api/skactiveml.utils.call_func.rst", "generated/api/skactiveml.utils.check_X_y.rst", "generated/api/skactiveml.utils.check_bound.rst", "generated/api/skactiveml.utils.check_budget_manager.rst", "generated/api/skactiveml.utils.check_class_prior.rst", "generated/api/skactiveml.utils.check_classes.rst", "generated/api/skactiveml.utils.check_classifier_params.rst", "generated/api/skactiveml.utils.check_cost_matrix.rst", "generated/api/skactiveml.utils.check_equal_missing_label.rst", "generated/api/skactiveml.utils.check_indices.rst", "generated/api/skactiveml.utils.check_missing_label.rst", "generated/api/skactiveml.utils.check_n_features.rst", "generated/api/skactiveml.utils.check_random_state.rst", "generated/api/skactiveml.utils.check_scalar.rst", "generated/api/skactiveml.utils.check_type.rst", "generated/api/skactiveml.utils.compute_vote_vectors.rst", "generated/api/skactiveml.utils.ext_confusion_matrix.rst", "generated/api/skactiveml.utils.is_labeled.rst", "generated/api/skactiveml.utils.is_unlabeled.rst", "generated/api/skactiveml.utils.labeled_indices.rst", "generated/api/skactiveml.utils.majority_vote.rst", "generated/api/skactiveml.utils.match_signature.rst", "generated/api/skactiveml.utils.rand_argmax.rst", "generated/api/skactiveml.utils.rand_argmin.rst", "generated/api/skactiveml.utils.simple_batch.rst", "generated/api/skactiveml.utils.unlabeled_indices.rst", "generated/api/skactiveml.visualization.rst", "generated/api/skactiveml.visualization.mesh.rst", "generated/api/skactiveml.visualization.plot_annotator_utilities.rst", "generated/api/skactiveml.visualization.plot_contour_for_samples.rst", "generated/api/skactiveml.visualization.plot_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_training_data.rst", "generated/api/skactiveml.visualization.plot_utilities.rst", "generated/sphinx_gallery_examples/index.rst", "generated/sphinx_gallery_examples/pool/index.rst", "generated/sphinx_gallery_examples/pool/plot-Badge-Batch_Active_Learning_by_Diverse_Gradient_Embedding_(BADGE).rst", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement_(BatchBALD).rst", "generated/sphinx_gallery_examples/pool/plot-Clue-Clustering_Uncertainty-weighted_Embeddings_(CLUE).rst", "generated/sphinx_gallery_examples/pool/plot-ContrastiveAL-Contrastive_Active_Learning_(CAL).rst", "generated/sphinx_gallery_examples/pool/plot-CoreSet-Core_Set.rst", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE).rst", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL).rst", "generated/sphinx_gallery_examples/pool/plot-DropQuery-Dropout_Query_(DropQuery).rst", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling_(EpisUS).rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction.rst", "generated/sphinx_gallery_examples/pool/plot-Falcun-Fast_Active_Learning_by_Contrastive_UNcertainty_(FALCUN).rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS).rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS).rst", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx).rst", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-ParallelUtilityEstimationWrapper-Parallel_Utility_Estimation_Wrapper.rst", "generated/sphinx_gallery_examples/pool/plot-ProbCover-Probability_Coverage_(ProbCover).rst", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL).rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Empirical_Variance.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Kullback-Leibler_Divergence.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Variation_Ratios.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Vote_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE).rst", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Diversity_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Random_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Representativity_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-SubSamplingWrapper-Sub-sampling_Wrapper.rst", "generated/sphinx_gallery_examples/pool/plot-TypiClust-Typical_Clustering_(TypiClust).rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_Strategy_for_Active_Learning.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI).rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples.rst", "generated/sphinx_gallery_examples/pool/sg_execution_times.rst", "generated/sphinx_gallery_examples/sg_execution_times.rst", "generated/sphinx_gallery_examples/stream/index.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-Split-Split.rst", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/sg_execution_times.rst", "generated/strategy_overview.rst", "generated/tutorials/00_pool_getting_started.ipynb", "generated/tutorials/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials/02_pool_regression_getting_started.ipynb", "generated/tutorials/03_pool_oracle_annotations.ipynb", "generated/tutorials/04_pool_simple_evaluation_study.ipynb", "generated/tutorials/05_pool_al_with_self_supervised_learning.ipynb", "generated/tutorials/06_pool_al_text_annotation_tool.ipynb", "generated/tutorials/10_multiple_annotators_getting_started.ipynb", "generated/tutorials/20_stream_getting_started.ipynb", "generated/tutorials/21_stream_batch_with_pool_al.ipynb", "generated/tutorials/22_river_classifier.ipynb", "generated/tutorials_colab/00_pool_getting_started.ipynb", "generated/tutorials_colab/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials_colab/02_pool_regression_getting_started.ipynb", "generated/tutorials_colab/03_pool_oracle_annotations.ipynb", "generated/tutorials_colab/04_pool_simple_evaluation_study.ipynb", "generated/tutorials_colab/05_pool_al_with_self_supervised_learning.ipynb", "generated/tutorials_colab/06_pool_al_text_annotation_tool.ipynb", "generated/tutorials_colab/10_multiple_annotators_getting_started.ipynb", "generated/tutorials_colab/20_stream_getting_started.ipynb", "generated/tutorials_colab/21_stream_batch_with_pool_al.ipynb", "generated/tutorials_colab/22_river_classifier.ipynb", "index.rst", "sg_execution_times.rst", "skactiveml.utils.MISSING_LABEL.rst", "tutorials.rst"], "indexentries": {"_check_callable() (in module skactiveml.utils)": [[96, "skactiveml.utils._check_callable", false]], "add_note() (skactiveml.exceptions.mappingerror method)": [[23, "skactiveml.exceptions.MappingError.add_note", false]], "annotatorensembleclassifier (class in skactiveml.classifier.multiannotator)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", false]], "annotatorlogisticregression (class in skactiveml.classifier.multiannotator)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", false]], "annotatormodelmixin (class in skactiveml.base)": [[3, "skactiveml.base.AnnotatorModelMixin", false]], "args (skactiveml.exceptions.mappingerror attribute)": [[23, "skactiveml.exceptions.MappingError.args", false]], "average_kl_divergence() (in module skactiveml.pool)": [[56, "skactiveml.pool.average_kl_divergence", false]], "badge (class in skactiveml.pool)": [[25, "skactiveml.pool.Badge", false]], "balancedincrementalquantilefilter (class in skactiveml.stream.budgetmanager)": [[86, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", false]], "batch_bald() (in module skactiveml.pool)": [[57, "skactiveml.pool.batch_bald", false]], "batchbald (class in skactiveml.pool)": [[26, "skactiveml.pool.BatchBALD", false]], "budgetmanager (class in skactiveml.base)": [[4, "skactiveml.base.BudgetManager", false]], "call_func() (in module skactiveml.utils)": [[97, "skactiveml.utils.call_func", false]], "check_bound() (in module skactiveml.utils)": [[99, "skactiveml.utils.check_bound", false]], "check_budget_manager() (in module skactiveml.utils)": [[100, "skactiveml.utils.check_budget_manager", false]], "check_class_prior() (in module skactiveml.utils)": [[101, "skactiveml.utils.check_class_prior", false]], "check_classes() (in module skactiveml.utils)": [[102, "skactiveml.utils.check_classes", false]], "check_classifier_params() (in module skactiveml.utils)": [[103, "skactiveml.utils.check_classifier_params", false]], "check_cost_matrix() (in module skactiveml.utils)": [[104, "skactiveml.utils.check_cost_matrix", false]], "check_equal_missing_label() (in module skactiveml.utils)": [[105, "skactiveml.utils.check_equal_missing_label", false]], "check_indices() (in module skactiveml.utils)": [[106, "skactiveml.utils.check_indices", false]], "check_missing_label() (in module skactiveml.utils)": [[107, "skactiveml.utils.check_missing_label", false]], "check_n_features() (in module skactiveml.utils)": [[108, "skactiveml.utils.check_n_features", false]], "check_random_state() (in module skactiveml.utils)": [[109, "skactiveml.utils.check_random_state", false]], "check_scalar() (in module skactiveml.utils)": [[110, "skactiveml.utils.check_scalar", false]], "check_type() (in module skactiveml.utils)": [[111, "skactiveml.utils.check_type", false]], "check_x_y() (in module skactiveml.utils)": [[98, "skactiveml.utils.check_X_y", false]], "classfrequencyestimator (class in skactiveml.base)": [[5, "skactiveml.base.ClassFrequencyEstimator", false]], "clue (class in skactiveml.pool)": [[27, "skactiveml.pool.Clue", false]], "cognitivedualquerystrategy (class in skactiveml.stream)": [[71, "skactiveml.stream.CognitiveDualQueryStrategy", false]], "cognitivedualquerystrategyfixun (class in skactiveml.stream)": [[72, "skactiveml.stream.CognitiveDualQueryStrategyFixUn", false]], "cognitivedualquerystrategyran (class in skactiveml.stream)": [[73, "skactiveml.stream.CognitiveDualQueryStrategyRan", false]], "cognitivedualquerystrategyranvarun (class in skactiveml.stream)": [[74, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", false]], "cognitivedualquerystrategyvarun (class in skactiveml.stream)": [[75, "skactiveml.stream.CognitiveDualQueryStrategyVarUn", false]], "compute_vote_vectors() (in module skactiveml.utils)": [[112, "skactiveml.utils.compute_vote_vectors", false]], "contrastiveal (class in skactiveml.pool)": [[28, "skactiveml.pool.ContrastiveAL", false]], "coreset (class in skactiveml.pool)": [[29, "skactiveml.pool.CoreSet", false]], "cost_reduction() (in module skactiveml.pool)": [[58, "skactiveml.pool.cost_reduction", false]], "costembeddingal (class in skactiveml.pool)": [[30, "skactiveml.pool.CostEmbeddingAL", false]], "densitybasedsplitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[87, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", false]], "discriminativeal (class in skactiveml.pool)": [[31, "skactiveml.pool.DiscriminativeAL", false]], "dropquery (class in skactiveml.pool)": [[32, "skactiveml.pool.DropQuery", false]], "epistemicuncertaintysampling (class in skactiveml.pool)": [[33, "skactiveml.pool.EpistemicUncertaintySampling", false]], "estimatedbudgetzliobaite (class in skactiveml.stream.budgetmanager)": [[88, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", false]], "expected_average_precision() (in module skactiveml.pool)": [[59, "skactiveml.pool.expected_average_precision", false]], "expectederrorreduction (class in skactiveml.pool)": [[34, "skactiveml.pool.ExpectedErrorReduction", false]], "expectedmodelchangemaximization (class in skactiveml.pool)": [[35, "skactiveml.pool.ExpectedModelChangeMaximization", false]], "expectedmodeloutputchange (class in skactiveml.pool)": [[36, "skactiveml.pool.ExpectedModelOutputChange", false]], "expectedmodelvariancereduction (class in skactiveml.pool)": [[37, "skactiveml.pool.ExpectedModelVarianceReduction", false]], "ext_confusion_matrix() (in module skactiveml.utils)": [[113, "skactiveml.utils.ext_confusion_matrix", false]], "extlabelencoder (class in skactiveml.utils)": [[95, "skactiveml.utils.ExtLabelEncoder", false]], "falcun (class in skactiveml.pool)": [[38, "skactiveml.pool.Falcun", false]], "fit() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.fit", false]], "fit() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.fit", false]], "fit() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.fit", false]], "fit() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.fit", false]], "fit() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.fit", false]], "fit() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.fit", false]], "fit() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.fit", false]], "fit() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.fit", false]], "fit() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.fit", false]], "fit() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.fit", false]], "fit() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[62, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.fit", false]], "fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper.fit", false]], "fit() (skactiveml.utils.extlabelencoder method)": [[95, "skactiveml.utils.ExtLabelEncoder.fit", false]], "fit_transform() (skactiveml.utils.extlabelencoder method)": [[95, "skactiveml.utils.ExtLabelEncoder.fit_transform", false]], "fixeduncertainty (class in skactiveml.stream)": [[76, "skactiveml.stream.FixedUncertainty", false]], "fixeduncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[89, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", false]], "fourds (class in skactiveml.pool)": [[39, "skactiveml.pool.FourDs", false]], "get_metadata_routing() (skactiveml.base.budgetmanager method)": [[4, "skactiveml.base.BudgetManager.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[6, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.poolquerystrategy method)": [[7, "skactiveml.base.PoolQueryStrategy.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.badge method)": [[25, "skactiveml.pool.Badge.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.batchbald method)": [[26, "skactiveml.pool.BatchBALD.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.clue method)": [[27, "skactiveml.pool.Clue.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.contrastiveal method)": [[28, "skactiveml.pool.ContrastiveAL.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.coreset method)": [[29, "skactiveml.pool.CoreSet.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.costembeddingal method)": [[30, "skactiveml.pool.CostEmbeddingAL.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.discriminativeal method)": [[31, "skactiveml.pool.DiscriminativeAL.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.dropquery method)": [[32, "skactiveml.pool.DropQuery.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.epistemicuncertaintysampling method)": [[33, "skactiveml.pool.EpistemicUncertaintySampling.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.expectederrorreduction method)": [[34, "skactiveml.pool.ExpectedErrorReduction.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.expectedmodelchangemaximization method)": [[35, "skactiveml.pool.ExpectedModelChangeMaximization.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.expectedmodeloutputchange method)": [[36, "skactiveml.pool.ExpectedModelOutputChange.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.expectedmodelvariancereduction method)": [[37, "skactiveml.pool.ExpectedModelVarianceReduction.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.falcun method)": [[38, "skactiveml.pool.Falcun.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.fourds method)": [[39, "skactiveml.pool.FourDs.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.greedybald method)": [[40, "skactiveml.pool.GreedyBALD.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.greedysamplingtarget method)": [[41, "skactiveml.pool.GreedySamplingTarget.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.greedysamplingx method)": [[42, "skactiveml.pool.GreedySamplingX.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.kldivergencemaximization method)": [[43, "skactiveml.pool.KLDivergenceMaximization.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.montecarloeer method)": [[44, "skactiveml.pool.MonteCarloEER.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[62, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[63, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[64, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.parallelutilityestimationwrapper method)": [[45, "skactiveml.pool.ParallelUtilityEstimationWrapper.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.probabilistical method)": [[47, "skactiveml.pool.ProbabilisticAL.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.probcover method)": [[46, "skactiveml.pool.ProbCover.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.querybycommittee method)": [[48, "skactiveml.pool.QueryByCommittee.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.quire method)": [[49, "skactiveml.pool.Quire.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.randomsampling method)": [[50, "skactiveml.pool.RandomSampling.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.regressiontreebasedal method)": [[51, "skactiveml.pool.RegressionTreeBasedAL.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.subsamplingwrapper method)": [[52, "skactiveml.pool.SubSamplingWrapper.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.typiclust method)": [[53, "skactiveml.pool.TypiClust.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.uncertaintysampling method)": [[54, "skactiveml.pool.UncertaintySampling.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.pool.valueofinformationeer method)": [[55, "skactiveml.pool.ValueOfInformationEER.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[86, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[87, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[88, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[89, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[90, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[91, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[92, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[93, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategy method)": [[71, "skactiveml.stream.CognitiveDualQueryStrategy.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[72, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyran method)": [[73, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[74, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[75, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.fixeduncertainty method)": [[76, "skactiveml.stream.FixedUncertainty.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.periodicsampling method)": [[77, "skactiveml.stream.PeriodicSampling.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.randomvariableuncertainty method)": [[78, "skactiveml.stream.RandomVariableUncertainty.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.split method)": [[79, "skactiveml.stream.Split.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.streamdensitybasedal method)": [[80, "skactiveml.stream.StreamDensityBasedAL.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.streamprobabilistical method)": [[81, "skactiveml.stream.StreamProbabilisticAL.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.streamrandomsampling method)": [[82, "skactiveml.stream.StreamRandomSampling.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.uncertaintyzliobaite method)": [[83, "skactiveml.stream.UncertaintyZliobaite.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.stream.variableuncertainty method)": [[84, "skactiveml.stream.VariableUncertainty.get_metadata_routing", false]], "get_metadata_routing() (skactiveml.utils.extlabelencoder method)": [[95, "skactiveml.utils.ExtLabelEncoder.get_metadata_routing", false]], "get_params() (skactiveml.base.budgetmanager method)": [[4, "skactiveml.base.BudgetManager.get_params", false]], "get_params() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.get_params", false]], "get_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[6, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_params", false]], "get_params() (skactiveml.base.poolquerystrategy method)": [[7, "skactiveml.base.PoolQueryStrategy.get_params", false]], "get_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_params", false]], "get_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_params", false]], "get_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_params", false]], "get_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_params", false]], "get_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_params", false]], "get_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_params", false]], "get_params() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.get_params", false]], "get_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_params", false]], "get_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_params", false]], "get_params() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.get_params", false]], "get_params() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.get_params", false]], "get_params() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.get_params", false]], "get_params() (skactiveml.pool.badge method)": [[25, "skactiveml.pool.Badge.get_params", false]], "get_params() (skactiveml.pool.batchbald method)": [[26, "skactiveml.pool.BatchBALD.get_params", false]], "get_params() (skactiveml.pool.clue method)": [[27, "skactiveml.pool.Clue.get_params", false]], "get_params() (skactiveml.pool.contrastiveal method)": [[28, "skactiveml.pool.ContrastiveAL.get_params", false]], "get_params() (skactiveml.pool.coreset method)": [[29, "skactiveml.pool.CoreSet.get_params", false]], "get_params() (skactiveml.pool.costembeddingal method)": [[30, "skactiveml.pool.CostEmbeddingAL.get_params", false]], "get_params() (skactiveml.pool.discriminativeal method)": [[31, "skactiveml.pool.DiscriminativeAL.get_params", false]], "get_params() (skactiveml.pool.dropquery method)": [[32, "skactiveml.pool.DropQuery.get_params", false]], "get_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[33, "skactiveml.pool.EpistemicUncertaintySampling.get_params", false]], "get_params() (skactiveml.pool.expectederrorreduction method)": [[34, "skactiveml.pool.ExpectedErrorReduction.get_params", false]], "get_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[35, "skactiveml.pool.ExpectedModelChangeMaximization.get_params", false]], "get_params() (skactiveml.pool.expectedmodeloutputchange method)": [[36, "skactiveml.pool.ExpectedModelOutputChange.get_params", false]], "get_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[37, "skactiveml.pool.ExpectedModelVarianceReduction.get_params", false]], "get_params() (skactiveml.pool.falcun method)": [[38, "skactiveml.pool.Falcun.get_params", false]], "get_params() (skactiveml.pool.fourds method)": [[39, "skactiveml.pool.FourDs.get_params", false]], "get_params() (skactiveml.pool.greedybald method)": [[40, "skactiveml.pool.GreedyBALD.get_params", false]], "get_params() (skactiveml.pool.greedysamplingtarget method)": [[41, "skactiveml.pool.GreedySamplingTarget.get_params", false]], "get_params() (skactiveml.pool.greedysamplingx method)": [[42, "skactiveml.pool.GreedySamplingX.get_params", false]], "get_params() (skactiveml.pool.kldivergencemaximization method)": [[43, "skactiveml.pool.KLDivergenceMaximization.get_params", false]], "get_params() (skactiveml.pool.montecarloeer method)": [[44, "skactiveml.pool.MonteCarloEER.get_params", false]], "get_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[62, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_params", false]], "get_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[63, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_params", false]], "get_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[64, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_params", false]], "get_params() (skactiveml.pool.parallelutilityestimationwrapper method)": [[45, "skactiveml.pool.ParallelUtilityEstimationWrapper.get_params", false]], "get_params() (skactiveml.pool.probabilistical method)": [[47, "skactiveml.pool.ProbabilisticAL.get_params", false]], "get_params() (skactiveml.pool.probcover method)": [[46, "skactiveml.pool.ProbCover.get_params", false]], "get_params() (skactiveml.pool.querybycommittee method)": [[48, "skactiveml.pool.QueryByCommittee.get_params", false]], "get_params() (skactiveml.pool.quire method)": [[49, "skactiveml.pool.Quire.get_params", false]], "get_params() (skactiveml.pool.randomsampling method)": [[50, "skactiveml.pool.RandomSampling.get_params", false]], "get_params() (skactiveml.pool.regressiontreebasedal method)": [[51, "skactiveml.pool.RegressionTreeBasedAL.get_params", false]], "get_params() (skactiveml.pool.subsamplingwrapper method)": [[52, "skactiveml.pool.SubSamplingWrapper.get_params", false]], "get_params() (skactiveml.pool.typiclust method)": [[53, "skactiveml.pool.TypiClust.get_params", false]], "get_params() (skactiveml.pool.uncertaintysampling method)": [[54, "skactiveml.pool.UncertaintySampling.get_params", false]], "get_params() (skactiveml.pool.valueofinformationeer method)": [[55, "skactiveml.pool.ValueOfInformationEER.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[86, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[87, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[88, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[89, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[90, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[91, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[92, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_params", false]], "get_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[93, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_params", false]], "get_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[71, "skactiveml.stream.CognitiveDualQueryStrategy.get_params", false]], "get_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[72, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_params", false]], "get_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[73, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_params", false]], "get_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[74, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_params", false]], "get_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[75, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_params", false]], "get_params() (skactiveml.stream.fixeduncertainty method)": [[76, "skactiveml.stream.FixedUncertainty.get_params", false]], "get_params() (skactiveml.stream.periodicsampling method)": [[77, "skactiveml.stream.PeriodicSampling.get_params", false]], "get_params() (skactiveml.stream.randomvariableuncertainty method)": [[78, "skactiveml.stream.RandomVariableUncertainty.get_params", false]], "get_params() (skactiveml.stream.split method)": [[79, "skactiveml.stream.Split.get_params", false]], "get_params() (skactiveml.stream.streamdensitybasedal method)": [[80, "skactiveml.stream.StreamDensityBasedAL.get_params", false]], "get_params() (skactiveml.stream.streamprobabilistical method)": [[81, "skactiveml.stream.StreamProbabilisticAL.get_params", false]], "get_params() (skactiveml.stream.streamrandomsampling method)": [[82, "skactiveml.stream.StreamRandomSampling.get_params", false]], "get_params() (skactiveml.stream.uncertaintyzliobaite method)": [[83, "skactiveml.stream.UncertaintyZliobaite.get_params", false]], "get_params() (skactiveml.stream.variableuncertainty method)": [[84, "skactiveml.stream.VariableUncertainty.get_params", false]], "get_params() (skactiveml.utils.extlabelencoder method)": [[95, "skactiveml.utils.ExtLabelEncoder.get_params", false]], "greedybald (class in skactiveml.pool)": [[40, "skactiveml.pool.GreedyBALD", false]], "greedysamplingtarget (class in skactiveml.pool)": [[41, "skactiveml.pool.GreedySamplingTarget", false]], "greedysamplingx (class in skactiveml.pool)": [[42, "skactiveml.pool.GreedySamplingX", false]], "indexclassifierwrapper (class in skactiveml.pool.utils)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper", false]], "intervalestimationannotmodel (class in skactiveml.pool.multiannotator)": [[62, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", false]], "intervalestimationthreshold (class in skactiveml.pool.multiannotator)": [[63, "skactiveml.pool.multiannotator.IntervalEstimationThreshold", false]], "inverse_transform() (skactiveml.utils.extlabelencoder method)": [[95, "skactiveml.utils.ExtLabelEncoder.inverse_transform", false]], "is_fitted() (skactiveml.pool.utils.indexclassifierwrapper method)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper.is_fitted", false]], "is_labeled() (in module skactiveml.utils)": [[114, "skactiveml.utils.is_labeled", false]], "is_unlabeled() (in module skactiveml.utils)": [[115, "skactiveml.utils.is_unlabeled", false]], "k_greedy_center() (in module skactiveml.pool)": [[60, "skactiveml.pool.k_greedy_center", false]], "kldivergencemaximization (class in skactiveml.pool)": [[43, "skactiveml.pool.KLDivergenceMaximization", false]], "labeled_indices() (in module skactiveml.utils)": [[116, "skactiveml.utils.labeled_indices", false]], "majority_vote() (in module skactiveml.utils)": [[117, "skactiveml.utils.majority_vote", false]], "mappingerror (class in skactiveml.exceptions)": [[23, "skactiveml.exceptions.MappingError", false]], "match_signature() (in module skactiveml.utils)": [[118, "skactiveml.utils.match_signature", false]], "mesh() (in module skactiveml.visualization)": [[124, "skactiveml.visualization.mesh", false]], "metrics (skactiveml.classifier.parzenwindowclassifier attribute)": [[16, "skactiveml.classifier.ParzenWindowClassifier.METRICS", false]], "metrics (skactiveml.pool.quire attribute)": [[49, "skactiveml.pool.Quire.METRICS", false]], "mixturemodelclassifier (class in skactiveml.classifier)": [[15, "skactiveml.classifier.MixtureModelClassifier", false]], "module": [[1, "module-skactiveml", false], [2, "module-skactiveml.base", false], [14, "module-skactiveml.classifier", false], [19, "module-skactiveml.classifier.multiannotator", false], [22, "module-skactiveml.exceptions", false], [24, "module-skactiveml.pool", false], [61, "module-skactiveml.pool.multiannotator", false], [66, "module-skactiveml.pool.utils", false], [70, "module-skactiveml.stream", false], [85, "module-skactiveml.stream.budgetmanager", false], [94, "module-skactiveml.utils", false], [123, "module-skactiveml.visualization", false]], "montecarloeer (class in skactiveml.pool)": [[44, "skactiveml.pool.MonteCarloEER", false]], "multiannotatorpoolquerystrategy (class in skactiveml.base)": [[6, "skactiveml.base.MultiAnnotatorPoolQueryStrategy", false]], "parallelutilityestimationwrapper (class in skactiveml.pool)": [[45, "skactiveml.pool.ParallelUtilityEstimationWrapper", false]], "partial_fit() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.partial_fit", false]], "partial_fit() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.partial_fit", false]], "partial_fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper.partial_fit", false]], "parzenwindowclassifier (class in skactiveml.classifier)": [[16, "skactiveml.classifier.ParzenWindowClassifier", false]], "periodicsampling (class in skactiveml.stream)": [[77, "skactiveml.stream.PeriodicSampling", false]], "plot_annotator_utilities() (in module skactiveml.visualization)": [[125, "skactiveml.visualization.plot_annotator_utilities", false]], "plot_contour_for_samples() (in module skactiveml.visualization)": [[126, "skactiveml.visualization.plot_contour_for_samples", false]], "plot_decision_boundary() (in module skactiveml.visualization)": [[127, "skactiveml.visualization.plot_decision_boundary", false]], "plot_stream_decision_boundary() (in module skactiveml.visualization)": [[128, "skactiveml.visualization.plot_stream_decision_boundary", false]], "plot_stream_training_data() (in module skactiveml.visualization)": [[129, "skactiveml.visualization.plot_stream_training_data", false]], "plot_utilities() (in module skactiveml.visualization)": [[130, "skactiveml.visualization.plot_utilities", false]], "poolquerystrategy (class in skactiveml.base)": [[7, "skactiveml.base.PoolQueryStrategy", false]], "precompute() (skactiveml.pool.utils.indexclassifierwrapper method)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper.precompute", false]], "predict() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.predict", false]], "predict() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict", false]], "predict() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict", false]], "predict() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.predict", false]], "predict() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.predict", false]], "predict() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict", false]], "predict() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict", false]], "predict() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.predict", false]], "predict() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.predict", false]], "predict() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.predict", false]], "predict() (skactiveml.pool.utils.indexclassifierwrapper method)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper.predict", false]], "predict_annotator_perf() (skactiveml.base.annotatormodelmixin method)": [[3, "skactiveml.base.AnnotatorModelMixin.predict_annotator_perf", false]], "predict_annotator_perf() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_annotator_perf", false]], "predict_annotator_perf() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[62, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.predict_annotator_perf", false]], "predict_freq() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.predict_freq", false]], "predict_freq() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.predict_freq", false]], "predict_freq() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.predict_freq", false]], "predict_freq() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.predict_freq", false]], "predict_freq() (skactiveml.pool.utils.indexclassifierwrapper method)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper.predict_freq", false]], "predict_proba() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.predict_proba", false]], "predict_proba() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict_proba", false]], "predict_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.predict_proba", false]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict_proba", false]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_proba", false]], "predict_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.predict_proba", false]], "predict_proba() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.predict_proba", false]], "predict_proba() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.predict_proba", false]], "predict_proba() (skactiveml.pool.utils.indexclassifierwrapper method)": [[67, "skactiveml.pool.utils.IndexClassifierWrapper.predict_proba", false]], "predict_target_distribution() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict_target_distribution", false]], "probabilistical (class in skactiveml.pool)": [[47, "skactiveml.pool.ProbabilisticAL", false]], "probabilisticregressor (class in skactiveml.base)": [[8, "skactiveml.base.ProbabilisticRegressor", false]], "probcover (class in skactiveml.pool)": [[46, "skactiveml.pool.ProbCover", false]], "query() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[6, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.query", false]], "query() (skactiveml.base.poolquerystrategy method)": [[7, "skactiveml.base.PoolQueryStrategy.query", false]], "query() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.query", false]], "query() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.query", false]], "query() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.query", false]], "query() (skactiveml.pool.badge method)": [[25, "skactiveml.pool.Badge.query", false]], "query() (skactiveml.pool.batchbald method)": [[26, "skactiveml.pool.BatchBALD.query", false]], "query() (skactiveml.pool.clue method)": [[27, "skactiveml.pool.Clue.query", false]], "query() (skactiveml.pool.contrastiveal method)": [[28, "skactiveml.pool.ContrastiveAL.query", false]], "query() (skactiveml.pool.coreset method)": [[29, "skactiveml.pool.CoreSet.query", false]], "query() (skactiveml.pool.costembeddingal method)": [[30, "skactiveml.pool.CostEmbeddingAL.query", false]], "query() (skactiveml.pool.discriminativeal method)": [[31, "skactiveml.pool.DiscriminativeAL.query", false]], "query() (skactiveml.pool.dropquery method)": [[32, "skactiveml.pool.DropQuery.query", false]], "query() (skactiveml.pool.epistemicuncertaintysampling method)": [[33, "skactiveml.pool.EpistemicUncertaintySampling.query", false]], "query() (skactiveml.pool.expectederrorreduction method)": [[34, "skactiveml.pool.ExpectedErrorReduction.query", false]], "query() (skactiveml.pool.expectedmodelchangemaximization method)": [[35, "skactiveml.pool.ExpectedModelChangeMaximization.query", false]], "query() (skactiveml.pool.expectedmodeloutputchange method)": [[36, "skactiveml.pool.ExpectedModelOutputChange.query", false]], "query() (skactiveml.pool.expectedmodelvariancereduction method)": [[37, "skactiveml.pool.ExpectedModelVarianceReduction.query", false]], "query() (skactiveml.pool.falcun method)": [[38, "skactiveml.pool.Falcun.query", false]], "query() (skactiveml.pool.fourds method)": [[39, "skactiveml.pool.FourDs.query", false]], "query() (skactiveml.pool.greedybald method)": [[40, "skactiveml.pool.GreedyBALD.query", false]], "query() (skactiveml.pool.greedysamplingtarget method)": [[41, "skactiveml.pool.GreedySamplingTarget.query", false]], "query() (skactiveml.pool.greedysamplingx method)": [[42, "skactiveml.pool.GreedySamplingX.query", false]], "query() (skactiveml.pool.kldivergencemaximization method)": [[43, "skactiveml.pool.KLDivergenceMaximization.query", false]], "query() (skactiveml.pool.montecarloeer method)": [[44, "skactiveml.pool.MonteCarloEER.query", false]], "query() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[63, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.query", false]], "query() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[64, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.query", false]], "query() (skactiveml.pool.parallelutilityestimationwrapper method)": [[45, "skactiveml.pool.ParallelUtilityEstimationWrapper.query", false]], "query() (skactiveml.pool.probabilistical method)": [[47, "skactiveml.pool.ProbabilisticAL.query", false]], "query() (skactiveml.pool.probcover method)": [[46, "skactiveml.pool.ProbCover.query", false]], "query() (skactiveml.pool.querybycommittee method)": [[48, "skactiveml.pool.QueryByCommittee.query", false]], "query() (skactiveml.pool.quire method)": [[49, "skactiveml.pool.Quire.query", false]], "query() (skactiveml.pool.randomsampling method)": [[50, "skactiveml.pool.RandomSampling.query", false]], "query() (skactiveml.pool.regressiontreebasedal method)": [[51, "skactiveml.pool.RegressionTreeBasedAL.query", false]], "query() (skactiveml.pool.subsamplingwrapper method)": [[52, "skactiveml.pool.SubSamplingWrapper.query", false]], "query() (skactiveml.pool.typiclust method)": [[53, "skactiveml.pool.TypiClust.query", false]], "query() (skactiveml.pool.uncertaintysampling method)": [[54, "skactiveml.pool.UncertaintySampling.query", false]], "query() (skactiveml.pool.valueofinformationeer method)": [[55, "skactiveml.pool.ValueOfInformationEER.query", false]], "query() (skactiveml.stream.cognitivedualquerystrategy method)": [[71, "skactiveml.stream.CognitiveDualQueryStrategy.query", false]], "query() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[72, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.query", false]], "query() (skactiveml.stream.cognitivedualquerystrategyran method)": [[73, "skactiveml.stream.CognitiveDualQueryStrategyRan.query", false]], "query() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[74, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.query", false]], "query() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[75, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.query", false]], "query() (skactiveml.stream.fixeduncertainty method)": [[76, "skactiveml.stream.FixedUncertainty.query", false]], "query() (skactiveml.stream.periodicsampling method)": [[77, "skactiveml.stream.PeriodicSampling.query", false]], "query() (skactiveml.stream.randomvariableuncertainty method)": [[78, "skactiveml.stream.RandomVariableUncertainty.query", false]], "query() (skactiveml.stream.split method)": [[79, "skactiveml.stream.Split.query", false]], "query() (skactiveml.stream.streamdensitybasedal method)": [[80, "skactiveml.stream.StreamDensityBasedAL.query", false]], "query() (skactiveml.stream.streamprobabilistical method)": [[81, "skactiveml.stream.StreamProbabilisticAL.query", false]], "query() (skactiveml.stream.streamrandomsampling method)": [[82, "skactiveml.stream.StreamRandomSampling.query", false]], "query() (skactiveml.stream.uncertaintyzliobaite method)": [[83, "skactiveml.stream.UncertaintyZliobaite.query", false]], "query() (skactiveml.stream.variableuncertainty method)": [[84, "skactiveml.stream.VariableUncertainty.query", false]], "query_by_utility() (skactiveml.base.budgetmanager method)": [[4, "skactiveml.base.BudgetManager.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[86, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[87, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[88, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[89, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[90, "skactiveml.stream.budgetmanager.RandomBudgetManager.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[91, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[92, "skactiveml.stream.budgetmanager.SplitBudgetManager.query_by_utility", false]], "query_by_utility() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[93, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.query_by_utility", false]], "querybycommittee (class in skactiveml.pool)": [[48, "skactiveml.pool.QueryByCommittee", false]], "querystrategy (class in skactiveml.base)": [[9, "skactiveml.base.QueryStrategy", false]], "quire (class in skactiveml.pool)": [[49, "skactiveml.pool.Quire", false]], "rand_argmax() (in module skactiveml.utils)": [[119, "skactiveml.utils.rand_argmax", false]], "rand_argmin() (in module skactiveml.utils)": [[120, "skactiveml.utils.rand_argmin", false]], "randombudgetmanager (class in skactiveml.stream.budgetmanager)": [[90, "skactiveml.stream.budgetmanager.RandomBudgetManager", false]], "randomsampling (class in skactiveml.pool)": [[50, "skactiveml.pool.RandomSampling", false]], "randomvariableuncertainty (class in skactiveml.stream)": [[78, "skactiveml.stream.RandomVariableUncertainty", false]], "randomvariableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[91, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", false]], "regressiontreebasedal (class in skactiveml.pool)": [[51, "skactiveml.pool.RegressionTreeBasedAL", false]], "sample_proba() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.sample_proba", false]], "sample_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.sample_proba", false]], "sample_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.sample_proba", false]], "sample_y() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.sample_y", false]], "score() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.score", false]], "score() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.score", false]], "score() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.score", false]], "score() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.score", false]], "score() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.score", false]], "score() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.score", false]], "score() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.score", false]], "score() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.score", false]], "score() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.score", false]], "score() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.score", false]], "set_fit_request() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.set_fit_request", false]], "set_fit_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_fit_request", false]], "set_fit_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_fit_request", false]], "set_fit_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_fit_request", false]], "set_fit_request() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.set_fit_request", false]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_fit_request", false]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_fit_request", false]], "set_fit_request() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.set_fit_request", false]], "set_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.set_fit_request", false]], "set_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.set_fit_request", false]], "set_fit_request() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[62, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_fit_request", false]], "set_params() (skactiveml.base.budgetmanager method)": [[4, "skactiveml.base.BudgetManager.set_params", false]], "set_params() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.set_params", false]], "set_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[6, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.set_params", false]], "set_params() (skactiveml.base.poolquerystrategy method)": [[7, "skactiveml.base.PoolQueryStrategy.set_params", false]], "set_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_params", false]], "set_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.set_params", false]], "set_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.set_params", false]], "set_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.set_params", false]], "set_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_params", false]], "set_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_params", false]], "set_params() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.set_params", false]], "set_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_params", false]], "set_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_params", false]], "set_params() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.set_params", false]], "set_params() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.set_params", false]], "set_params() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.set_params", false]], "set_params() (skactiveml.pool.badge method)": [[25, "skactiveml.pool.Badge.set_params", false]], "set_params() (skactiveml.pool.batchbald method)": [[26, "skactiveml.pool.BatchBALD.set_params", false]], "set_params() (skactiveml.pool.clue method)": [[27, "skactiveml.pool.Clue.set_params", false]], "set_params() (skactiveml.pool.contrastiveal method)": [[28, "skactiveml.pool.ContrastiveAL.set_params", false]], "set_params() (skactiveml.pool.coreset method)": [[29, "skactiveml.pool.CoreSet.set_params", false]], "set_params() (skactiveml.pool.costembeddingal method)": [[30, "skactiveml.pool.CostEmbeddingAL.set_params", false]], "set_params() (skactiveml.pool.discriminativeal method)": [[31, "skactiveml.pool.DiscriminativeAL.set_params", false]], "set_params() (skactiveml.pool.dropquery method)": [[32, "skactiveml.pool.DropQuery.set_params", false]], "set_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[33, "skactiveml.pool.EpistemicUncertaintySampling.set_params", false]], "set_params() (skactiveml.pool.expectederrorreduction method)": [[34, "skactiveml.pool.ExpectedErrorReduction.set_params", false]], "set_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[35, "skactiveml.pool.ExpectedModelChangeMaximization.set_params", false]], "set_params() (skactiveml.pool.expectedmodeloutputchange method)": [[36, "skactiveml.pool.ExpectedModelOutputChange.set_params", false]], "set_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[37, "skactiveml.pool.ExpectedModelVarianceReduction.set_params", false]], "set_params() (skactiveml.pool.falcun method)": [[38, "skactiveml.pool.Falcun.set_params", false]], "set_params() (skactiveml.pool.fourds method)": [[39, "skactiveml.pool.FourDs.set_params", false]], "set_params() (skactiveml.pool.greedybald method)": [[40, "skactiveml.pool.GreedyBALD.set_params", false]], "set_params() (skactiveml.pool.greedysamplingtarget method)": [[41, "skactiveml.pool.GreedySamplingTarget.set_params", false]], "set_params() (skactiveml.pool.greedysamplingx method)": [[42, "skactiveml.pool.GreedySamplingX.set_params", false]], "set_params() (skactiveml.pool.kldivergencemaximization method)": [[43, "skactiveml.pool.KLDivergenceMaximization.set_params", false]], "set_params() (skactiveml.pool.montecarloeer method)": [[44, "skactiveml.pool.MonteCarloEER.set_params", false]], "set_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[62, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_params", false]], "set_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[63, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.set_params", false]], "set_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[64, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.set_params", false]], "set_params() (skactiveml.pool.parallelutilityestimationwrapper method)": [[45, "skactiveml.pool.ParallelUtilityEstimationWrapper.set_params", false]], "set_params() (skactiveml.pool.probabilistical method)": [[47, "skactiveml.pool.ProbabilisticAL.set_params", false]], "set_params() (skactiveml.pool.probcover method)": [[46, "skactiveml.pool.ProbCover.set_params", false]], "set_params() (skactiveml.pool.querybycommittee method)": [[48, "skactiveml.pool.QueryByCommittee.set_params", false]], "set_params() (skactiveml.pool.quire method)": [[49, "skactiveml.pool.Quire.set_params", false]], "set_params() (skactiveml.pool.randomsampling method)": [[50, "skactiveml.pool.RandomSampling.set_params", false]], "set_params() (skactiveml.pool.regressiontreebasedal method)": [[51, "skactiveml.pool.RegressionTreeBasedAL.set_params", false]], "set_params() (skactiveml.pool.subsamplingwrapper method)": [[52, "skactiveml.pool.SubSamplingWrapper.set_params", false]], "set_params() (skactiveml.pool.typiclust method)": [[53, "skactiveml.pool.TypiClust.set_params", false]], "set_params() (skactiveml.pool.uncertaintysampling method)": [[54, "skactiveml.pool.UncertaintySampling.set_params", false]], "set_params() (skactiveml.pool.valueofinformationeer method)": [[55, "skactiveml.pool.ValueOfInformationEER.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[86, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[87, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[88, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[89, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[90, "skactiveml.stream.budgetmanager.RandomBudgetManager.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[91, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[92, "skactiveml.stream.budgetmanager.SplitBudgetManager.set_params", false]], "set_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[93, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.set_params", false]], "set_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[71, "skactiveml.stream.CognitiveDualQueryStrategy.set_params", false]], "set_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[72, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.set_params", false]], "set_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[73, "skactiveml.stream.CognitiveDualQueryStrategyRan.set_params", false]], "set_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[74, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.set_params", false]], "set_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[75, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.set_params", false]], "set_params() (skactiveml.stream.fixeduncertainty method)": [[76, "skactiveml.stream.FixedUncertainty.set_params", false]], "set_params() (skactiveml.stream.periodicsampling method)": [[77, "skactiveml.stream.PeriodicSampling.set_params", false]], "set_params() (skactiveml.stream.randomvariableuncertainty method)": [[78, "skactiveml.stream.RandomVariableUncertainty.set_params", false]], "set_params() (skactiveml.stream.split method)": [[79, "skactiveml.stream.Split.set_params", false]], "set_params() (skactiveml.stream.streamdensitybasedal method)": [[80, "skactiveml.stream.StreamDensityBasedAL.set_params", false]], "set_params() (skactiveml.stream.streamprobabilistical method)": [[81, "skactiveml.stream.StreamProbabilisticAL.set_params", false]], "set_params() (skactiveml.stream.streamrandomsampling method)": [[82, "skactiveml.stream.StreamRandomSampling.set_params", false]], "set_params() (skactiveml.stream.uncertaintyzliobaite method)": [[83, "skactiveml.stream.UncertaintyZliobaite.set_params", false]], "set_params() (skactiveml.stream.variableuncertainty method)": [[84, "skactiveml.stream.VariableUncertainty.set_params", false]], "set_params() (skactiveml.utils.extlabelencoder method)": [[95, "skactiveml.utils.ExtLabelEncoder.set_params", false]], "set_partial_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.set_partial_fit_request", false]], "set_predict_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_predict_request", false]], "set_score_request() (skactiveml.base.classfrequencyestimator method)": [[5, "skactiveml.base.ClassFrequencyEstimator.set_score_request", false]], "set_score_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_score_request", false]], "set_score_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_score_request", false]], "set_score_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_score_request", false]], "set_score_request() (skactiveml.classifier.mixturemodelclassifier method)": [[15, "skactiveml.classifier.MixtureModelClassifier.set_score_request", false]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[20, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_score_request", false]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[21, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_score_request", false]], "set_score_request() (skactiveml.classifier.parzenwindowclassifier method)": [[16, "skactiveml.classifier.ParzenWindowClassifier.set_score_request", false]], "set_score_request() (skactiveml.classifier.sklearnclassifier method)": [[17, "skactiveml.classifier.SklearnClassifier.set_score_request", false]], "set_score_request() (skactiveml.classifier.slidingwindowclassifier method)": [[18, "skactiveml.classifier.SlidingWindowClassifier.set_score_request", false]], "simple_batch() (in module skactiveml.utils)": [[121, "skactiveml.utils.simple_batch", false]], "singleannotatorpoolquerystrategy (class in skactiveml.base)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy", false]], "singleannotatorstreamquerystrategy (class in skactiveml.base)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy", false]], "singleannotatorwrapper (class in skactiveml.pool.multiannotator)": [[64, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper", false]], "skactiveml": [[1, "module-skactiveml", false]], "skactiveml.base": [[2, "module-skactiveml.base", false]], "skactiveml.classifier": [[14, "module-skactiveml.classifier", false]], "skactiveml.classifier.multiannotator": [[19, "module-skactiveml.classifier.multiannotator", false]], "skactiveml.exceptions": [[22, "module-skactiveml.exceptions", false]], "skactiveml.pool": [[24, "module-skactiveml.pool", false]], "skactiveml.pool.multiannotator": [[61, "module-skactiveml.pool.multiannotator", false]], "skactiveml.pool.utils": [[66, "module-skactiveml.pool.utils", false]], "skactiveml.stream": [[70, "module-skactiveml.stream", false]], "skactiveml.stream.budgetmanager": [[85, "module-skactiveml.stream.budgetmanager", false]], "skactiveml.utils": [[94, "module-skactiveml.utils", false]], "skactiveml.visualization": [[123, "module-skactiveml.visualization", false]], "skactivemlclassifier (class in skactiveml.base)": [[12, "skactiveml.base.SkactivemlClassifier", false]], "skactivemlregressor (class in skactiveml.base)": [[13, "skactiveml.base.SkactivemlRegressor", false]], "sklearnclassifier (class in skactiveml.classifier)": [[17, "skactiveml.classifier.SklearnClassifier", false]], "slidingwindowclassifier (class in skactiveml.classifier)": [[18, "skactiveml.classifier.SlidingWindowClassifier", false]], "split (class in skactiveml.stream)": [[79, "skactiveml.stream.Split", false]], "splitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[92, "skactiveml.stream.budgetmanager.SplitBudgetManager", false]], "streamdensitybasedal (class in skactiveml.stream)": [[80, "skactiveml.stream.StreamDensityBasedAL", false]], "streamprobabilistical (class in skactiveml.stream)": [[81, "skactiveml.stream.StreamProbabilisticAL", false]], "streamrandomsampling (class in skactiveml.stream)": [[82, "skactiveml.stream.StreamRandomSampling", false]], "subsamplingwrapper (class in skactiveml.pool)": [[52, "skactiveml.pool.SubSamplingWrapper", false]], "transform() (skactiveml.utils.extlabelencoder method)": [[95, "skactiveml.utils.ExtLabelEncoder.transform", false]], "typiclust (class in skactiveml.pool)": [[53, "skactiveml.pool.TypiClust", false]], "uncertainty_scores() (in module skactiveml.pool)": [[65, "skactiveml.pool.uncertainty_scores", false]], "uncertaintysampling (class in skactiveml.pool)": [[54, "skactiveml.pool.UncertaintySampling", false]], "uncertaintyzliobaite (class in skactiveml.stream)": [[83, "skactiveml.stream.UncertaintyZliobaite", false]], "unlabeled_indices() (in module skactiveml.utils)": [[122, "skactiveml.utils.unlabeled_indices", false]], "update() (skactiveml.base.budgetmanager method)": [[4, "skactiveml.base.BudgetManager.update", false]], "update() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.update", false]], "update() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[86, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.update", false]], "update() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[87, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.update", false]], "update() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[88, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.update", false]], "update() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[89, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.update", false]], "update() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[90, "skactiveml.stream.budgetmanager.RandomBudgetManager.update", false]], "update() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[91, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.update", false]], "update() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[92, "skactiveml.stream.budgetmanager.SplitBudgetManager.update", false]], "update() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[93, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.update", false]], "update() (skactiveml.stream.cognitivedualquerystrategy method)": [[71, "skactiveml.stream.CognitiveDualQueryStrategy.update", false]], "update() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[72, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.update", false]], "update() (skactiveml.stream.cognitivedualquerystrategyran method)": [[73, "skactiveml.stream.CognitiveDualQueryStrategyRan.update", false]], "update() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[74, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.update", false]], "update() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[75, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.update", false]], "update() (skactiveml.stream.fixeduncertainty method)": [[76, "skactiveml.stream.FixedUncertainty.update", false]], "update() (skactiveml.stream.periodicsampling method)": [[77, "skactiveml.stream.PeriodicSampling.update", false]], "update() (skactiveml.stream.randomvariableuncertainty method)": [[78, "skactiveml.stream.RandomVariableUncertainty.update", false]], "update() (skactiveml.stream.split method)": [[79, "skactiveml.stream.Split.update", false]], "update() (skactiveml.stream.streamdensitybasedal method)": [[80, "skactiveml.stream.StreamDensityBasedAL.update", false]], "update() (skactiveml.stream.streamprobabilistical method)": [[81, "skactiveml.stream.StreamProbabilisticAL.update", false]], "update() (skactiveml.stream.streamrandomsampling method)": [[82, "skactiveml.stream.StreamRandomSampling.update", false]], "update() (skactiveml.stream.uncertaintyzliobaite method)": [[83, "skactiveml.stream.UncertaintyZliobaite.update", false]], "update() (skactiveml.stream.variableuncertainty method)": [[84, "skactiveml.stream.VariableUncertainty.update", false]], "valueofinformationeer (class in skactiveml.pool)": [[55, "skactiveml.pool.ValueOfInformationEER", false]], "variableuncertainty (class in skactiveml.stream)": [[84, "skactiveml.stream.VariableUncertainty", false]], "variableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[93, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", false]], "variation_ratios() (in module skactiveml.pool)": [[68, "skactiveml.pool.variation_ratios", false]], "vote_entropy() (in module skactiveml.pool)": [[69, "skactiveml.pool.vote_entropy", false]], "with_traceback() (skactiveml.exceptions.mappingerror method)": [[23, "skactiveml.exceptions.MappingError.with_traceback", false]]}, "objects": {"": [[1, 0, 0, "-", "skactiveml"]], "skactiveml": [[2, 0, 0, "-", "base"], [14, 0, 0, "-", "classifier"], [22, 0, 0, "-", "exceptions"], [24, 0, 0, "-", "pool"], [70, 0, 0, "-", "stream"], [94, 0, 0, "-", "utils"], [123, 0, 0, "-", "visualization"]], "skactiveml.base": [[3, 1, 1, "", "AnnotatorModelMixin"], [4, 1, 1, "", "BudgetManager"], [5, 1, 1, "", "ClassFrequencyEstimator"], [6, 1, 1, "", "MultiAnnotatorPoolQueryStrategy"], [7, 1, 1, "", "PoolQueryStrategy"], [8, 1, 1, "", "ProbabilisticRegressor"], [9, 1, 1, "", "QueryStrategy"], [10, 1, 1, "", "SingleAnnotatorPoolQueryStrategy"], [11, 1, 1, "", "SingleAnnotatorStreamQueryStrategy"], [12, 1, 1, "", "SkactivemlClassifier"], [13, 1, 1, "", "SkactivemlRegressor"]], "skactiveml.base.AnnotatorModelMixin": [[3, 2, 1, "", "predict_annotator_perf"]], "skactiveml.base.BudgetManager": [[4, 2, 1, "", "get_metadata_routing"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "query_by_utility"], [4, 2, 1, "", "set_params"], [4, 2, 1, "", "update"]], "skactiveml.base.ClassFrequencyEstimator": [[5, 2, 1, "", "fit"], [5, 2, 1, "", "get_metadata_routing"], [5, 2, 1, "", "get_params"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "predict_freq"], [5, 2, 1, "", "predict_proba"], [5, 2, 1, "", "sample_proba"], [5, 2, 1, "", "score"], [5, 2, 1, "", "set_fit_request"], [5, 2, 1, "", "set_params"], [5, 2, 1, "", "set_score_request"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[6, 2, 1, "", "get_metadata_routing"], [6, 2, 1, "", "get_params"], [6, 2, 1, "", "query"], [6, 2, 1, "", "set_params"]], "skactiveml.base.PoolQueryStrategy": [[7, 2, 1, "", "get_metadata_routing"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "query"], [7, 2, 1, "", "set_params"]], "skactiveml.base.ProbabilisticRegressor": [[8, 2, 1, "", "fit"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_target_distribution"], [8, 2, 1, "", "sample_y"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_predict_request"], [8, 2, 1, "", "set_score_request"]], "skactiveml.base.QueryStrategy": [[9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "query"], [9, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "query"], [10, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "query"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "update"]], "skactiveml.base.SkactivemlClassifier": [[12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "skactiveml.base.SkactivemlRegressor": [[13, 2, 1, "", "fit"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "skactiveml.classifier": [[15, 1, 1, "", "MixtureModelClassifier"], [16, 1, 1, "", "ParzenWindowClassifier"], [17, 1, 1, "", "SklearnClassifier"], [18, 1, 1, "", "SlidingWindowClassifier"], [19, 0, 0, "-", "multiannotator"]], "skactiveml.classifier.MixtureModelClassifier": [[15, 2, 1, "", "fit"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_freq"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "sample_proba"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_score_request"]], "skactiveml.classifier.ParzenWindowClassifier": [[16, 3, 1, "", "METRICS"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_freq"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "sample_proba"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SklearnClassifier": [[17, 2, 1, "", "fit"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "partial_fit"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_partial_fit_request"], [17, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SlidingWindowClassifier": [[18, 2, 1, "", "fit"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "partial_fit"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_freq"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "score"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_partial_fit_request"], [18, 2, 1, "", "set_score_request"]], "skactiveml.classifier.multiannotator": [[20, 1, 1, "", "AnnotatorEnsembleClassifier"], [21, 1, 1, "", "AnnotatorLogisticRegression"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[20, 2, 1, "", "fit"], [20, 2, 1, "", "get_metadata_routing"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "predict"], [20, 2, 1, "", "predict_proba"], [20, 2, 1, "", "score"], [20, 2, 1, "", "set_fit_request"], [20, 2, 1, "", "set_params"], [20, 2, 1, "", "set_score_request"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[21, 2, 1, "", "fit"], [21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "predict"], [21, 2, 1, "", "predict_annotator_perf"], [21, 2, 1, "", "predict_proba"], [21, 2, 1, "", "score"], [21, 2, 1, "", "set_fit_request"], [21, 2, 1, "", "set_params"], [21, 2, 1, "", "set_score_request"]], "skactiveml.exceptions": [[23, 1, 1, "", "MappingError"]], "skactiveml.exceptions.MappingError": [[23, 2, 1, "", "add_note"], [23, 3, 1, "", "args"], [23, 2, 1, "", "with_traceback"]], "skactiveml.pool": [[25, 1, 1, "", "Badge"], [26, 1, 1, "", "BatchBALD"], [27, 1, 1, "", "Clue"], [28, 1, 1, "", "ContrastiveAL"], [29, 1, 1, "", "CoreSet"], [30, 1, 1, "", "CostEmbeddingAL"], [31, 1, 1, "", "DiscriminativeAL"], [32, 1, 1, "", "DropQuery"], [33, 1, 1, "", "EpistemicUncertaintySampling"], [34, 1, 1, "", "ExpectedErrorReduction"], [35, 1, 1, "", "ExpectedModelChangeMaximization"], [36, 1, 1, "", "ExpectedModelOutputChange"], [37, 1, 1, "", "ExpectedModelVarianceReduction"], [38, 1, 1, "", "Falcun"], [39, 1, 1, "", "FourDs"], [40, 1, 1, "", "GreedyBALD"], [41, 1, 1, "", "GreedySamplingTarget"], [42, 1, 1, "", "GreedySamplingX"], [43, 1, 1, "", "KLDivergenceMaximization"], [44, 1, 1, "", "MonteCarloEER"], [45, 1, 1, "", "ParallelUtilityEstimationWrapper"], [46, 1, 1, "", "ProbCover"], [47, 1, 1, "", "ProbabilisticAL"], [48, 1, 1, "", "QueryByCommittee"], [49, 1, 1, "", "Quire"], [50, 1, 1, "", "RandomSampling"], [51, 1, 1, "", "RegressionTreeBasedAL"], [52, 1, 1, "", "SubSamplingWrapper"], [53, 1, 1, "", "TypiClust"], [54, 1, 1, "", "UncertaintySampling"], [55, 1, 1, "", "ValueOfInformationEER"], [56, 4, 1, "", "average_kl_divergence"], [57, 4, 1, "", "batch_bald"], [58, 4, 1, "", "cost_reduction"], [59, 4, 1, "", "expected_average_precision"], [60, 4, 1, "", "k_greedy_center"], [61, 0, 0, "-", "multiannotator"], [65, 4, 1, "", "uncertainty_scores"], [66, 0, 0, "-", "utils"], [68, 4, 1, "", "variation_ratios"], [69, 4, 1, "", "vote_entropy"]], "skactiveml.pool.Badge": [[25, 2, 1, "", "get_metadata_routing"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "query"], [25, 2, 1, "", "set_params"]], "skactiveml.pool.BatchBALD": [[26, 2, 1, "", "get_metadata_routing"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "query"], [26, 2, 1, "", "set_params"]], "skactiveml.pool.Clue": [[27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "query"], [27, 2, 1, "", "set_params"]], "skactiveml.pool.ContrastiveAL": [[28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "query"], [28, 2, 1, "", "set_params"]], "skactiveml.pool.CoreSet": [[29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "query"], [29, 2, 1, "", "set_params"]], "skactiveml.pool.CostEmbeddingAL": [[30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "query"], [30, 2, 1, "", "set_params"]], "skactiveml.pool.DiscriminativeAL": [[31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "query"], [31, 2, 1, "", "set_params"]], "skactiveml.pool.DropQuery": [[32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "query"], [32, 2, 1, "", "set_params"]], "skactiveml.pool.EpistemicUncertaintySampling": [[33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "query"], [33, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedErrorReduction": [[34, 2, 1, "", "get_metadata_routing"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "query"], [34, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[35, 2, 1, "", "get_metadata_routing"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "query"], [35, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelOutputChange": [[36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "query"], [36, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[37, 2, 1, "", "get_metadata_routing"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "query"], [37, 2, 1, "", "set_params"]], "skactiveml.pool.Falcun": [[38, 2, 1, "", "get_metadata_routing"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "query"], [38, 2, 1, "", "set_params"]], "skactiveml.pool.FourDs": [[39, 2, 1, "", "get_metadata_routing"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "query"], [39, 2, 1, "", "set_params"]], "skactiveml.pool.GreedyBALD": [[40, 2, 1, "", "get_metadata_routing"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "query"], [40, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingTarget": [[41, 2, 1, "", "get_metadata_routing"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "query"], [41, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingX": [[42, 2, 1, "", "get_metadata_routing"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "query"], [42, 2, 1, "", "set_params"]], "skactiveml.pool.KLDivergenceMaximization": [[43, 2, 1, "", "get_metadata_routing"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "query"], [43, 2, 1, "", "set_params"]], "skactiveml.pool.MonteCarloEER": [[44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "query"], [44, 2, 1, "", "set_params"]], "skactiveml.pool.ParallelUtilityEstimationWrapper": [[45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "query"], [45, 2, 1, "", "set_params"]], "skactiveml.pool.ProbCover": [[46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "query"], [46, 2, 1, "", "set_params"]], "skactiveml.pool.ProbabilisticAL": [[47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "query"], [47, 2, 1, "", "set_params"]], "skactiveml.pool.QueryByCommittee": [[48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "query"], [48, 2, 1, "", "set_params"]], "skactiveml.pool.Quire": [[49, 3, 1, "", "METRICS"], [49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "query"], [49, 2, 1, "", "set_params"]], "skactiveml.pool.RandomSampling": [[50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "query"], [50, 2, 1, "", "set_params"]], "skactiveml.pool.RegressionTreeBasedAL": [[51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "query"], [51, 2, 1, "", "set_params"]], "skactiveml.pool.SubSamplingWrapper": [[52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "query"], [52, 2, 1, "", "set_params"]], "skactiveml.pool.TypiClust": [[53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "query"], [53, 2, 1, "", "set_params"]], "skactiveml.pool.UncertaintySampling": [[54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "query"], [54, 2, 1, "", "set_params"]], "skactiveml.pool.ValueOfInformationEER": [[55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "query"], [55, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator": [[62, 1, 1, "", "IntervalEstimationAnnotModel"], [63, 1, 1, "", "IntervalEstimationThreshold"], [64, 1, 1, "", "SingleAnnotatorWrapper"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[62, 2, 1, "", "fit"], [62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 2, 1, "", "predict_annotator_perf"], [62, 2, 1, "", "set_fit_request"], [62, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "query"], [63, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "query"], [64, 2, 1, "", "set_params"]], "skactiveml.pool.utils": [[67, 1, 1, "", "IndexClassifierWrapper"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[67, 2, 1, "", "fit"], [67, 2, 1, "", "is_fitted"], [67, 2, 1, "", "partial_fit"], [67, 2, 1, "", "precompute"], [67, 2, 1, "", "predict"], [67, 2, 1, "", "predict_freq"], [67, 2, 1, "", "predict_proba"]], "skactiveml.stream": [[71, 1, 1, "", "CognitiveDualQueryStrategy"], [72, 1, 1, "", "CognitiveDualQueryStrategyFixUn"], [73, 1, 1, "", "CognitiveDualQueryStrategyRan"], [74, 1, 1, "", "CognitiveDualQueryStrategyRanVarUn"], [75, 1, 1, "", "CognitiveDualQueryStrategyVarUn"], [76, 1, 1, "", "FixedUncertainty"], [77, 1, 1, "", "PeriodicSampling"], [78, 1, 1, "", "RandomVariableUncertainty"], [79, 1, 1, "", "Split"], [80, 1, 1, "", "StreamDensityBasedAL"], [81, 1, 1, "", "StreamProbabilisticAL"], [82, 1, 1, "", "StreamRandomSampling"], [83, 1, 1, "", "UncertaintyZliobaite"], [84, 1, 1, "", "VariableUncertainty"], [85, 0, 0, "-", "budgetmanager"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[71, 2, 1, "", "get_metadata_routing"], [71, 2, 1, "", "get_params"], [71, 2, 1, "", "query"], [71, 2, 1, "", "set_params"], [71, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[72, 2, 1, "", "get_metadata_routing"], [72, 2, 1, "", "get_params"], [72, 2, 1, "", "query"], [72, 2, 1, "", "set_params"], [72, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_params"], [73, 2, 1, "", "query"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[74, 2, 1, "", "get_metadata_routing"], [74, 2, 1, "", "get_params"], [74, 2, 1, "", "query"], [74, 2, 1, "", "set_params"], [74, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[75, 2, 1, "", "get_metadata_routing"], [75, 2, 1, "", "get_params"], [75, 2, 1, "", "query"], [75, 2, 1, "", "set_params"], [75, 2, 1, "", "update"]], "skactiveml.stream.FixedUncertainty": [[76, 2, 1, "", "get_metadata_routing"], [76, 2, 1, "", "get_params"], [76, 2, 1, "", "query"], [76, 2, 1, "", "set_params"], [76, 2, 1, "", "update"]], "skactiveml.stream.PeriodicSampling": [[77, 2, 1, "", "get_metadata_routing"], [77, 2, 1, "", "get_params"], [77, 2, 1, "", "query"], [77, 2, 1, "", "set_params"], [77, 2, 1, "", "update"]], "skactiveml.stream.RandomVariableUncertainty": [[78, 2, 1, "", "get_metadata_routing"], [78, 2, 1, "", "get_params"], [78, 2, 1, "", "query"], [78, 2, 1, "", "set_params"], [78, 2, 1, "", "update"]], "skactiveml.stream.Split": [[79, 2, 1, "", "get_metadata_routing"], [79, 2, 1, "", "get_params"], [79, 2, 1, "", "query"], [79, 2, 1, "", "set_params"], [79, 2, 1, "", "update"]], "skactiveml.stream.StreamDensityBasedAL": [[80, 2, 1, "", "get_metadata_routing"], [80, 2, 1, "", "get_params"], [80, 2, 1, "", "query"], [80, 2, 1, "", "set_params"], [80, 2, 1, "", "update"]], "skactiveml.stream.StreamProbabilisticAL": [[81, 2, 1, "", "get_metadata_routing"], [81, 2, 1, "", "get_params"], [81, 2, 1, "", "query"], [81, 2, 1, "", "set_params"], [81, 2, 1, "", "update"]], "skactiveml.stream.StreamRandomSampling": [[82, 2, 1, "", "get_metadata_routing"], [82, 2, 1, "", "get_params"], [82, 2, 1, "", "query"], [82, 2, 1, "", "set_params"], [82, 2, 1, "", "update"]], "skactiveml.stream.UncertaintyZliobaite": [[83, 2, 1, "", "get_metadata_routing"], [83, 2, 1, "", "get_params"], [83, 2, 1, "", "query"], [83, 2, 1, "", "set_params"], [83, 2, 1, "", "update"]], "skactiveml.stream.VariableUncertainty": [[84, 2, 1, "", "get_metadata_routing"], [84, 2, 1, "", "get_params"], [84, 2, 1, "", "query"], [84, 2, 1, "", "set_params"], [84, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager": [[86, 1, 1, "", "BalancedIncrementalQuantileFilter"], [87, 1, 1, "", "DensityBasedSplitBudgetManager"], [88, 1, 1, "", "EstimatedBudgetZliobaite"], [89, 1, 1, "", "FixedUncertaintyBudgetManager"], [90, 1, 1, "", "RandomBudgetManager"], [91, 1, 1, "", "RandomVariableUncertaintyBudgetManager"], [92, 1, 1, "", "SplitBudgetManager"], [93, 1, 1, "", "VariableUncertaintyBudgetManager"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[86, 2, 1, "", "get_metadata_routing"], [86, 2, 1, "", "get_params"], [86, 2, 1, "", "query_by_utility"], [86, 2, 1, "", "set_params"], [86, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[87, 2, 1, "", "get_metadata_routing"], [87, 2, 1, "", "get_params"], [87, 2, 1, "", "query_by_utility"], [87, 2, 1, "", "set_params"], [87, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[88, 2, 1, "", "get_metadata_routing"], [88, 2, 1, "", "get_params"], [88, 2, 1, "", "query_by_utility"], [88, 2, 1, "", "set_params"], [88, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[89, 2, 1, "", "get_metadata_routing"], [89, 2, 1, "", "get_params"], [89, 2, 1, "", "query_by_utility"], [89, 2, 1, "", "set_params"], [89, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[90, 2, 1, "", "get_metadata_routing"], [90, 2, 1, "", "get_params"], [90, 2, 1, "", "query_by_utility"], [90, 2, 1, "", "set_params"], [90, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[91, 2, 1, "", "get_metadata_routing"], [91, 2, 1, "", "get_params"], [91, 2, 1, "", "query_by_utility"], [91, 2, 1, "", "set_params"], [91, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[92, 2, 1, "", "get_metadata_routing"], [92, 2, 1, "", "get_params"], [92, 2, 1, "", "query_by_utility"], [92, 2, 1, "", "set_params"], [92, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[93, 2, 1, "", "get_metadata_routing"], [93, 2, 1, "", "get_params"], [93, 2, 1, "", "query_by_utility"], [93, 2, 1, "", "set_params"], [93, 2, 1, "", "update"]], "skactiveml.utils": [[95, 1, 1, "", "ExtLabelEncoder"], [96, 4, 1, "", "_check_callable"], [97, 4, 1, "", "call_func"], [98, 4, 1, "", "check_X_y"], [99, 4, 1, "", "check_bound"], [100, 4, 1, "", "check_budget_manager"], [101, 4, 1, "", "check_class_prior"], [102, 4, 1, "", "check_classes"], [103, 4, 1, "", "check_classifier_params"], [104, 4, 1, "", "check_cost_matrix"], [105, 4, 1, "", "check_equal_missing_label"], [106, 4, 1, "", "check_indices"], [107, 4, 1, "", "check_missing_label"], [108, 4, 1, "", "check_n_features"], [109, 4, 1, "", "check_random_state"], [110, 4, 1, "", "check_scalar"], [111, 4, 1, "", "check_type"], [112, 4, 1, "", "compute_vote_vectors"], [113, 4, 1, "", "ext_confusion_matrix"], [114, 4, 1, "", "is_labeled"], [115, 4, 1, "", "is_unlabeled"], [116, 4, 1, "", "labeled_indices"], [117, 4, 1, "", "majority_vote"], [118, 4, 1, "", "match_signature"], [119, 4, 1, "", "rand_argmax"], [120, 4, 1, "", "rand_argmin"], [121, 4, 1, "", "simple_batch"], [122, 4, 1, "", "unlabeled_indices"]], "skactiveml.utils.ExtLabelEncoder": [[95, 2, 1, "", "fit"], [95, 2, 1, "", "fit_transform"], [95, 2, 1, "", "get_metadata_routing"], [95, 2, 1, "", "get_params"], [95, 2, 1, "", "inverse_transform"], [95, 2, 1, "", "set_params"], [95, 2, 1, "", "transform"]], "skactiveml.visualization": [[124, 4, 1, "", "mesh"], [125, 4, 1, "", "plot_annotator_utilities"], [126, 4, 1, "", "plot_contour_for_samples"], [127, 4, 1, "", "plot_decision_boundary"], [128, 4, 1, "", "plot_stream_decision_boundary"], [129, 4, 1, "", "plot_stream_training_data"], [130, 4, 1, "", "plot_utilities"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "terms": {"": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 108, 110, 119, 120, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216], "0": [0, 4, 5, 6, 8, 10, 11, 13, 15, 16, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 106, 113, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "00": [178, 179, 193, 196, 200, 207, 211, 218], "000": 179, "0001": 21, "001": [58, 81, 202, 213], "00379": 30, "006": [141, 178, 218], "01": [87, 91, 92, 93, 178, 196, 200, 201, 207, 211, 212, 218], "013": [176, 178, 218], "0194": 217, "02": [178, 193, 196, 200, 207, 211, 218], "020": [185, 193, 218], "03": [178, 200, 211, 218], "033": [177, 178, 218], "04": [200, 211], "04it": [200, 211], "05": [39, 62, 63, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 200, 207, 211, 218], "06": [178, 200, 211, 218], "06347": [31, 139, 194], "069": [148, 178, 218], "07": [26, 28, 40, 48, 56, 57, 200, 211], "08": [200, 211], "09": [178, 196, 207, 218], "093": [153, 178, 218], "09it": [200, 211], "0e": 81, "0x264b9891450": [204, 215], "1": [0, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 106, 108, 113, 121, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "10": [5, 15, 16, 38, 71, 72, 73, 74, 75, 82, 133, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 162, 164, 165, 166, 178, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218], "100": [0, 21, 80, 86, 88, 89, 90, 91, 92, 93, 142, 143, 144, 149, 150, 151, 152, 158, 159, 160, 161, 164, 165, 166, 195, 196, 197, 198, 199, 200, 202, 206, 207, 208, 209, 210, 211, 213], "1000": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 196, 201, 203, 204, 205, 207, 212, 214, 215, 216], "1013": [181, 182, 183], "102": [200, 211], "105": [41, 42, 149, 150, 151, 194], "106": [39, 146, 147, 194], "10it": [200, 211], "11": [21, 34, 55, 148, 152, 162, 178, 194, 200, 211, 218], "110": [165, 178, 218], "1112": [40, 57, 134, 148, 194], "116": [170, 194], "118": 193, "12": [98, 171, 178, 193, 194, 196, 200, 207, 211, 218], "120": [169, 194], "127": [169, 170, 194], "128": [196, 207], "129": [37, 144, 194], "1297": 21, "13": [54, 65, 181, 193, 194, 200, 202, 211, 213, 218], "131": [39, 146, 147, 194], "1322": 21, "133": [71, 72, 73, 74, 75, 80, 87, 189, 194], "13it": [200, 211], "14": [182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 200, 211, 218], "145": [37, 81, 86, 144, 190, 194], "148": [71, 72, 73, 74, 75, 80, 87, 189, 194], "14it": [200, 211], "14th": [202, 213], "15": [36, 142, 143, 144, 149, 150, 151, 152, 186, 191, 192, 193, 194, 196, 197, 207, 208, 218], "157": [81, 86, 190, 194], "16": [194, 196, 207], "1600": [196, 207], "161": [144, 178, 218], "1622": [34, 55, 176, 194], "1623": [34, 55, 176, 194], "1648": [172, 173, 174, 194], "169": [164, 178, 218], "17": 194, "1710": 30, "175": [201, 212], "18": [54, 65, 143, 178, 194, 218], "186": [71, 72, 73, 74, 75, 181, 182, 183, 184, 194], "19": [194, 202, 213], "1907": [31, 139, 194], "1936": [162, 194], "1949": [162, 194], "196": [190, 193, 218], "1992": [48, 158, 159, 160, 161, 194], "1996": [37, 48, 69, 144, 161, 194], "1998": [48, 56, 159, 194], "19it": [200, 211], "1d": 98, "1e": [26, 28, 40, 48, 56, 57, 200, 211], "2": [6, 8, 13, 16, 30, 34, 35, 46, 47, 48, 51, 54, 55, 57, 58, 62, 63, 64, 65, 71, 72, 73, 74, 75, 80, 81, 87, 98, 99, 113, 116, 122, 124, 125, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "20": [136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 194, 195, 197, 200, 202, 206, 208, 211, 213, 217, 218], "200": [71, 72, 73, 74, 75, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 208, 217], "2001": [34, 44, 153, 154, 194], "2002": [169, 194], "2005": [16, 34, 55, 176, 194], "2007": [34, 48, 55, 158, 170, 175, 194], "2009": [54, 62, 63, 65, 172, 173, 174, 177, 194], "200px": [201, 212], "2010": [21, 49, 162, 194], "2011": [40, 57, 98, 134, 148, 194], "2012": [34, 55], "2013": [35, 39, 54, 65, 142, 146, 147, 194], "2014": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 162, 185, 187, 188, 189, 192, 194], "2015": [81, 86, 190, 194], "2016": [30, 47, 81, 138, 157, 194], "2017": [16, 30], "2018": [29, 36, 48, 54, 59, 68, 137, 143, 160, 171, 194], "2019": [26, 31, 33, 41, 42, 43, 57, 134, 139, 141, 149, 150, 151, 152, 194], "2020": [25, 133, 194], "2021": [27, 28, 135, 136, 194, 217], "2022": [46, 53, 156, 168, 194], "2023": [51, 71, 72, 73, 74, 75, 164, 165, 166, 181, 182, 183, 184, 194], "2024": [32, 38, 140, 145, 194], "203": [154, 178, 218], "209": [48, 158, 194], "20944": 217, "20th": [202, 213], "21": [43, 125, 126, 127, 130, 152, 194, 218], "218": [48, 158, 194], "21it": [200, 211], "22": 194, "224": [200, 211], "225": [200, 211], "2259": [34, 55], "2273": [34, 55], "229": [200, 211], "22it": [200, 211], "23": [8, 13, 144, 178, 194, 218], "230": [39, 146, 147, 194], "2304": [200, 211], "2372": [177, 194], "2379": [177, 194], "23it": [200, 211], "24": [194, 200, 211], "24it": [200, 211], "25": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 200, 208, 211, 218], "250px": [201, 212], "255": [200, 211], "256": [200, 211], "259": [62, 63], "25it": [200, 211], "26": [141, 178, 194, 200, 211, 218], "267": [201, 212], "268": [62, 63], "26it": [200, 211], "27": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 185, 187, 188, 192, 194], "274": 178, "27it": [200, 211], "28": [194, 196, 200, 207, 211], "2825": 98, "2830": 98, "287": [48, 158, 159, 160, 161, 194], "28it": [200, 211], "28px": [196, 207], "29": [177, 178, 194, 200, 211, 218], "294": [48, 158, 159, 160, 161, 194], "2d": [98, 116, 122], "2x2": [133, 134, 135, 140, 145, 146], "3": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 32, 34, 35, 48, 54, 55, 62, 64, 71, 72, 73, 74, 75, 81, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "30": [194, 196, 197, 200, 203, 204, 205, 207, 208, 211, 214, 215, 216], "300": [133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "3072": [200, 211], "31": [170, 194, 199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "319": [48, 69, 161, 194], "32": [98, 178, 194, 196, 207], "326": [48, 69, 161, 194], "33": [194, 196, 207], "338": [163, 178, 218], "34": [34, 55, 71, 72, 73, 74, 75, 181, 182, 183, 184, 194, 196, 207], "35": [194, 218], "350": [186, 193, 218], "359": [48, 56, 159, 194], "36": [162, 194], "367": [48, 56, 159, 194], "37": 194, "374": [166, 178, 218], "376": [151, 178, 218], "38": 194, "39": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 185, 187, 188, 192, 194, 200, 211], "392": 218, "3e": [196, 207], "3f": [198, 201, 209, 212], "4": [21, 34, 48, 133, 134, 135, 140, 144, 145, 146, 155, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "40": [194, 197, 208], "400": [199, 210], "406": [200, 211], "42": [145, 195, 196, 198, 206, 207, 209], "420": [51, 164, 165, 166, 194], "421": [38, 145, 194], "439": [38, 145, 194], "43it": [200, 211], "440": [157, 178, 218], "441": [34, 44, 153, 154, 194], "448": [34, 44, 153, 154, 194], "45": [171, 178, 218], "450px": [201, 212], "456": [200, 211], "460": [51, 164, 165, 166, 194], "46it": [200, 211], "472": [172, 178, 218], "474": [41, 42, 149, 150, 151, 194], "485": [200, 211], "498": [203, 205, 214, 216], "4d": [39, 146, 147, 178, 194, 218], "4f": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 200, 210, 211], "5": [32, 34, 35, 39, 48, 51, 53, 55, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216], "50": [86, 198, 199, 203, 204, 205, 209, 210, 214, 215, 216], "500": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216], "5000": [203, 204, 205, 214, 215, 216], "502": [205, 216], "51": [35, 142, 194], "521": [203, 205, 214, 216], "522": [203, 214], "523": [205, 216], "536": [173, 178, 218], "540px": [201, 212], "57": [154, 178, 218], "5745": [40, 57, 134, 148, 194], "575": [133, 178, 218], "57it": [200, 211], "58": [153, 178, 193, 218], "586": [47, 81, 157, 194], "587": [149, 178, 218], "590px": [201, 212], "591": [168, 178, 218], "594": [47, 81, 157, 194], "5th": [202, 213], "6": [149, 151, 155, 164, 165, 166, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216], "60": [35, 142, 194, 197, 208], "611": [155, 178, 218], "612": [162, 178, 218], "619": [143, 178, 218], "625": [175, 178, 218], "626": [183, 193, 218], "638": [174, 178, 218], "639": [146, 178, 218], "63it": [200, 211], "64": [196, 207], "64it": [200, 211], "650": [28, 136, 194], "651": [43, 152, 194], "652": [189, 193, 218], "653": [204, 215], "655": [158, 178, 218], "66": [196, 207], "663": [28, 136, 194], "664": [156, 178, 218], "678": [136, 178, 218], "67it": [200, 211], "68": [195, 206], "689": [138, 178, 218], "690": [147, 178, 218], "7": [26, 28, 34, 40, 43, 48, 55, 56, 57, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 203, 204, 205, 206, 207, 208, 210, 211, 214, 215, 216], "70": [201, 212], "72": [33, 141, 194], "727": [205, 216], "73it": [200, 211], "7416": [203, 214], "745": [188, 193, 218], "7456": [205, 216], "7462": [205, 216], "75": [32, 127, 197, 208], "755": [159, 178, 218], "757": [135, 178, 218], "758": [139, 178, 218], "7606": [205, 216], "7614": [205, 216], "7642": [203, 214], "766": [170, 178, 218], "768": [200, 211], "771": [161, 178, 218], "773": [203, 214], "7746": [205, 216], "776": [137, 178, 218], "7764": [203, 214], "781": [145, 178, 218], "7834": [203, 214], "785": [134, 178, 218], "790": [152, 178, 218], "796": [204, 215], "7966": [203, 214], "7994": [204, 215], "8": [0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 194, 197, 198, 199, 200, 203, 204, 205, 208, 209, 210, 211, 214, 215, 216], "80": [197, 208], "806": [204, 215], "8154": [204, 215], "8175": [53, 168, 194], "8195": [53, 168, 194], "828": [171, 178, 184, 193, 218], "829": [169, 178, 218], "82it": [200, 211], "83it": [200, 211], "842": [191, 193, 218], "850": [167, 178, 218], "8505": [27, 135, 194], "8514": [27, 135, 194], "855": [150, 178, 218], "86": [33, 141, 194], "861": [160, 178, 218], "877": [175, 194], "882": [175, 194], "888": [140, 178, 218], "8x8": [198, 209], "9": [63, 82, 134, 138, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 194, 196, 198, 200, 207, 209, 211], "90": [41, 42, 149, 150, 151, 194], "925": [30, 138, 194], "930": [30, 138, 194], "934": [187, 193, 218], "9368": [48, 68, 160, 194], "9377": [48, 68, 160, 194], "93it": [200, 211], "95": [46, 195, 206], "960": [142, 178, 218], "964": [54, 59, 171, 194], "965": [182, 193, 218], "967": [192, 193, 218], "970": [54, 59, 171, 194], "993": [181, 193, 218], "99it": [200, 211], "A": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 101, 106, 118, 137, 138, 144, 145, 152, 179, 194, 198, 200, 202, 209, 211, 213], "And": [196, 200, 207, 211], "As": [0, 21, 55, 195, 196, 197, 198, 199, 205, 206, 207, 208, 209, 210, 216, 217], "At": [198, 209], "By": [0, 98, 113, 198, 200, 209, 211], "For": [0, 8, 13, 16, 32, 36, 37, 39, 40, 43, 45, 51, 65, 77, 97, 98, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217], "If": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 116, 117, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "In": [0, 6, 17, 18, 25, 26, 27, 28, 29, 30, 33, 34, 36, 38, 46, 47, 48, 49, 53, 54, 55, 56, 57, 59, 62, 63, 64, 65, 68, 69, 71, 72, 73, 74, 75, 80, 81, 86, 87, 119, 120, 133, 134, 135, 136, 137, 138, 141, 142, 143, 145, 153, 154, 156, 157, 158, 159, 160, 161, 162, 168, 169, 170, 171, 175, 176, 177, 189, 190, 194, 195, 196, 198, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 214, 215, 216], "It": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 26, 27, 31, 32, 40, 41, 42, 51, 63, 79, 81, 86, 87, 111, 119, 120, 127, 195, 198, 200, 206, 209, 211], "Its": 31, "No": [164, 165, 166, 194], "Not": [34, 44, 198, 209], "One": 0, "The": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 106, 107, 108, 109, 110, 111, 118, 121, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217], "Then": [0, 47, 54, 64, 195, 202, 206, 213], "There": [0, 5, 15, 16, 195, 206], "These": [0, 21, 34, 203, 204, 205, 214, 215, 216], "To": [0, 11, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216], "Will": 67, "With": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 185, 187, 188, 192, 194, 217], "_": [142, 143, 144, 149, 150, 151, 152, 158, 197, 208], "__": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "__class__": [27, 32, 46, 53, 100, 197, 208], "__init__": [196, 198, 207, 209], "__name__": [197, 208], "__traceback__": 23, "_annotation_iter": [198, 209], "_annotation_loop": [198, 209], "_begin_annot": [198, 209], "_build": 0, "_check_cal": 1, "_check_n_featur": 0, "_conditional_expect": [36, 37, 43], "_density_uncertainti": [181, 182, 183], "_distn_infrastructur": 8, "_generalbald": [26, 40], "_init": [203, 204, 205, 214, 215, 216], "_kmean": [27, 32, 46, 53], "_render_finish": [198, 209], "_render_hold_messag": [198, 209], "_stream": [203, 204, 205, 214, 215, 216], "_undo": [198, 209], "_validate_data": 0, "_with_diversity_select": [164, 178, 218], "_with_empirical_vari": [158, 178, 218], "_with_kullback": [159, 178, 218], "_with_random_select": [165, 178, 218], "_with_representativity_select": [166, 178, 218], "_with_variation_ratio": [160, 178, 218], "_with_vote_entropi": [161, 178, 218], "a_cand": 62, "a_perf": 64, "a_perf_": 62, "abc": [3, 4, 9, 12, 13], "abl": [5, 196, 202, 207, 213], "about": [26, 40, 77, 82], "abov": [32, 198, 201, 209, 212], "abstract": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 34, 88, 201, 212], "acc": [196, 207], "acc_dict": [196, 207], "accept": [4, 11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 107, 110, 111, 198, 209], "accept_large_spars": 98, "accept_spars": 98, "access": [67, 195, 206], "accord": [0, 5, 12, 15, 16, 17, 18, 20, 21, 32, 57, 63, 64, 67, 196, 201, 207, 212], "accordingli": [0, 21], "accuraci": [0, 5, 12, 15, 16, 17, 18, 20, 21, 62, 63, 113, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217], "achiev": [202, 213], "acm": [62, 63], "acquir": [11, 28, 47, 58, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 194, 195, 206], "acquis": [204, 205, 215, 216], "acquisit": [26, 57, 86, 134, 194, 203, 204, 214, 215], "acqur": 170, "across": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 117, 119, 120, 197, 199, 200, 208, 210, 211, 217], "act": [0, 195, 199, 200, 206, 210, 211], "action": [54, 59, 171, 194], "activ": [0, 4, 5, 6, 7, 9, 10, 11, 12, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 114, 116, 121, 122, 126, 127, 128, 129, 130, 131, 132, 135, 137, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 192, 193, 194, 198, 209, 218, 219, 220], "active_learning_with_cost_embedding_": [138, 178, 218], "activeml": [0, 5, 6, 7, 8, 9, 10, 12, 13, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220], "actual": [30, 34, 44, 54, 55, 65, 199, 200, 210, 211], "ad": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 55, 60, 62, 67, 133, 134, 135, 140, 145, 146, 164, 165, 166, 196, 207], "adapt": [0, 6, 11, 27, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 106, 135, 194, 198, 209], "add": [0, 21, 23, 203, 204, 205, 214, 215, 216], "add_not": 23, "addit": [0, 21, 67, 71, 72, 73, 74, 75, 80, 125, 126, 127, 130, 198, 200, 201, 209, 211, 212, 217], "addition": [0, 60, 92, 201, 203, 205, 212, 214, 216], "additive_chi2": [16, 49], "address": [63, 217], "adher": 82, "adjust": [0, 98, 201, 212], "adopt": 0, "adv": [26, 46, 49, 57, 81, 86, 134, 156, 162, 190, 194], "advanc": [196, 198, 207, 209], "affect": [201, 203, 204, 205, 212, 214, 215, 216], "aforement": [200, 211], "after": [0, 4, 5, 6, 10, 11, 12, 15, 16, 17, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "again": [201, 212], "against": [86, 199, 200, 210, 211], "agarw": [25, 133, 194], "aggreg": [0, 64], "ahead": [200, 211], "ai": [201, 212], "aim": [46, 200, 211], "ajai": [177, 194], "aklilu": [32, 140, 194], "akshai": [133, 194], "al": [0, 6, 7, 9, 10, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 63, 64, 71, 72, 73, 74, 75, 80, 83, 87, 114, 121, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 168, 169, 170, 171, 175, 177, 178, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 198, 200, 209, 211, 218, 219], "albert": [185, 187, 188, 192, 194], "alc": [30, 138, 178, 194, 218], "alekh": [133, 194], "aletra": [28, 136, 194], "alexand": [36, 143, 194, 217], "algorithm": [15, 21, 25, 27, 28, 29, 30, 32, 34, 46, 53, 71, 72, 73, 74, 75, 80, 87, 98, 138, 189, 194, 195, 198, 206, 209], "alia": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "all": [0, 3, 4, 6, 7, 8, 9, 10, 11, 13, 16, 26, 28, 30, 34, 40, 43, 44, 45, 48, 50, 51, 52, 56, 57, 59, 60, 63, 64, 67, 69, 97, 98, 113, 125, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218], "allow": [0, 4, 5, 6, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 62, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 100, 111, 113], "allow_exceeding_budget": 82, "allow_nan": 98, "allow_nd": 98, "almeida": [164, 165, 166, 194], "along": [119, 120, 217], "alpha": [5, 15, 16, 46, 62, 63, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 199, 200, 210, 211], "alpha_": 21, "alreadi": [18, 88, 90, 91, 92, 93, 108, 109, 197, 200, 201, 202, 208, 211, 212, 213], "also": [0, 6, 10, 11, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 98, 100, 111, 112, 117, 195, 198, 199, 200, 201, 202, 206, 209, 210, 211, 212, 213], "altern": 36, "alwai": [8, 13, 201, 212], "amersfoort": [26, 57, 134, 194], "amir": [152, 194], "among": [0, 60], "amount": [63, 217], "an": [1, 3, 5, 6, 8, 12, 13, 15, 16, 17, 18, 20, 21, 30, 34, 35, 36, 48, 52, 57, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 80, 81, 87, 91, 92, 93, 95, 98, 106, 108, 109, 110, 111, 113, 116, 117, 119, 120, 121, 122, 125, 127, 128, 130, 142, 143, 144, 149, 150, 151, 152, 158, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "anal": [81, 86, 162, 190, 194], "andrea": [134, 160, 194], "andrew": [153, 154, 159, 194], "ani": [0, 16, 18, 41, 42, 47, 49, 77, 81, 82, 98, 108, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 201, 212, 217], "anim": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "anna": [145, 194], "annot": [3, 6, 10, 20, 21, 30, 45, 48, 52, 61, 62, 63, 64, 69, 113, 125, 129, 130, 161, 194, 217, 220], "annot_prior_diag": 21, "annot_prior_ful": 21, "annotatorensembleclassifi": 1, "annotatorlogisticregress": 1, "annotatormodelmixin": [0, 1, 21, 62], "annu": [48, 69, 158, 159, 160, 161, 169, 194], "anoth": [45, 197, 199, 200, 203, 205, 208, 210, 211, 214, 216], "ao": [196, 207], "appear": [67, 113, 118], "append": [67, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 203, 205, 207, 209, 211, 212, 214, 216, 217], "appl": [54, 65, 71, 72, 73, 74, 75, 80, 87, 189, 194], "appli": [0, 16, 40, 98, 200, 211], "applic": [34, 44], "approach": [18, 29, 36, 44, 137, 194], "approxim": [200, 211], "ar": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 100, 102, 103, 105, 106, 109, 112, 113, 117, 121, 125, 130, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217], "arang": [46, 196, 199, 200, 204, 207, 210, 211, 215], "arbitrarili": [8, 13], "area": [125, 126, 127, 129, 130, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 196, 199, 200, 207, 210, 211], "arfclassifi": [205, 216], "arg": [4, 6, 7, 9, 10, 11, 23, 88, 201, 212], "argmax": [20, 119], "argmax_kwarg": 119, "argmin": 120, "argmin_kwarg": 120, "argsort": [164, 165, 166], "argument": [7, 9, 35, 36, 37, 41, 42, 43, 45, 52, 119, 120, 125, 130, 198, 202, 209, 213], "argwher": [196, 207], "arjun": [135, 194], "around": [71, 72, 73, 74, 75], "arrai": [0, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 108, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 196, 198, 201, 202, 203, 204, 205, 207, 209, 212, 213, 214, 215, 216], "array_lik": 101, "arriv": 0, "arrow": 0, "art": [200, 211], "articl": [71, 72, 73, 74, 75, 217], "artif": [47, 54, 59, 65, 81, 144, 157, 171, 175, 176, 194], "artifici": [16, 196, 205, 207, 216], "artist": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "artistanim": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "arxiv": [30, 31, 40, 57, 134, 139, 148, 194, 201, 212], "as_fram": [196, 207], "ash": [25, 133, 194], "ashish": [34, 55, 175, 194], "ashna": [164, 165, 166, 194], "ask": [4, 86, 87, 88, 89, 90, 91, 92, 93, 195, 199, 206, 210], "assess": [0, 76, 78, 79, 80, 81, 84, 86], "assign": [0, 21, 64, 117, 195, 197, 198, 201, 202, 206, 208, 209, 212, 213], "assoc": [48, 69, 161, 169, 194], "assum": [21, 35, 43, 63, 112, 117], "assume_linear": [36, 197, 208], "assumpt": 45, "astyp": [196, 207], "atal": 217, "atiya": [43, 152, 194], "attempt": 98, "attn": [200, 211], "attn_drop": [200, 211], "attribut": [0, 5, 12, 15, 16, 17, 18, 20, 21, 26, 40, 48, 49, 62, 67, 95, 108], "attributeerror": [198, 209], "aulc": [196, 201, 207, 212], "author": [71, 72, 73, 74, 75, 217], "autom": [48, 158, 194, 200, 211], "automat": [0, 201, 212], "avail": [0, 6, 16, 23, 45, 63, 64, 65, 67, 77, 86, 87, 90, 197, 198, 203, 204, 205, 208, 209, 214, 215, 216, 217], "available_if": 118, "averag": [5, 7, 9, 10, 12, 16, 54, 55, 56, 59, 82, 116, 127, 130, 131, 132, 178, 194, 199, 200, 203, 204, 205, 210, 211, 214, 215, 216, 218, 219], "average_kl_diverg": 1, "avg": [203, 204, 205, 214, 215, 216], "avihu": [156, 168, 194], "avoid": [39, 217], "ax": [113, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 201, 202, 207, 208, 212, 213], "ax_1": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "ax_2": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "ax_t": [197, 208], "axi": [98, 119, 120, 126, 127, 128, 129, 130, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 199, 200, 208, 210, 211], "b": [0, 21, 39, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 98], "back": 95, "backend": 129, "badg": [1, 5, 7, 9, 10, 12, 16, 116, 126, 127, 131, 132, 178, 194, 200, 211, 218, 219], "baggingclassifi": [134, 148, 159], "baggingregressor": [197, 208], "balanc": [43, 81, 86, 152, 194, 201, 212], "balancedincrementalquantilefilt": [1, 81, 203, 214], "bald": [7, 9, 10, 12, 17, 40, 48, 57, 116, 122, 127, 130, 131, 132, 178, 194, 196, 207, 218, 219], "ball": 46, "bandwidth": 16, "bar": [199, 210], "bar_styl": [198, 209], "barrault": [28, 136, 194], "barz": [36, 143, 194], "base": [1, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 100, 108, 114, 117, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 198, 200, 201, 209, 211, 212, 218, 219, 220], "base_clf": 67, "base_estim": 18, "base_regressor": 30, "baseestim": [4, 9, 12, 13, 62, 95], "baselin": [50, 77, 82], "basic": [34, 196, 197, 198, 207, 208, 209], "basu": [34, 55, 175, 194], "batch": [0, 5, 6, 7, 9, 10, 12, 15, 16, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 63, 64, 116, 121, 126, 127, 131, 132, 135, 140, 145, 178, 194, 196, 198, 200, 201, 202, 207, 209, 211, 212, 213, 217, 218, 219, 220], "batch4d": [146, 178, 194, 218], "batch_active_learning_by_diverse_gradient_embedding_": [133, 178, 218], "batch_bald": 1, "batch_bayesian_active_learning_by_disagreement_": [134, 178, 218], "batch_dens": [146, 178, 218], "batch_index": [201, 212], "batch_siz": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 63, 64, 121, 133, 134, 135, 140, 145, 146, 164, 165, 166, 195, 196, 198, 199, 200, 201, 202, 204, 206, 207, 209, 210, 211, 212, 213, 215], "batch_util": 121, "batchbald": [1, 7, 9, 10, 12, 17, 48, 57, 116, 126, 127, 131, 132, 178, 194, 196, 207, 218, 219], "bayesian": [7, 9, 10, 12, 15, 17, 21, 26, 40, 48, 57, 116, 122, 126, 127, 130, 131, 132, 178, 194, 218, 219], "bayesian_active_learning_by_disagreement_": [148, 178, 218], "bayesiangaussianmixtur": 15, "bayesianmixturemodel": 15, "bbox_to_anchor": [201, 212], "becaus": [8, 13, 127, 197, 208], "been": [0, 20, 34, 67, 86, 88, 90, 91, 92, 93, 129, 217], "beer": [38, 145, 194], "befor": [0, 52, 203, 204, 205, 214, 215, 216], "begin": [195, 200, 206, 211], "behavior": [197, 208], "behind": 77, "being": [21, 78, 113], "believ": 0, "belong": [5, 15, 16, 21, 201, 202, 212, 213], "below": [0, 46, 194, 195, 196, 197, 200, 202, 203, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217], "beluch": [48, 68, 160, 194], "bennett": [170, 194], "benz": 217, "bernhard": [146, 147, 185, 187, 188, 189, 192, 194, 217], "besid": [21, 64], "best": [0, 8, 13, 46, 127], "best_indic": 121, "better": [195, 206, 217], "between": [0, 21, 23, 27, 34, 39, 43, 46, 57, 95, 99, 194, 197, 198, 205, 208, 209, 216], "bfg": 21, "bia": [21, 200, 211], "bias": 21, "bibtex": 0, "bifet": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 185, 187, 188, 192, 194], "big": [0, 71, 72, 73, 74, 75, 80, 87, 189, 194], "binari": [31, 33, 113, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "binomi": [202, 213], "biqf": [86, 205, 216], "bit": 98, "bj": [143, 194], "bjoern": 36, "black": [0, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 202, 208, 213, 217], "blend": 129, "blit": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "block": [200, 201, 203, 204, 205, 211, 212, 214, 215, 216], "blondel": 98, "blue": [164, 165, 166], "bm_class": 0, "bmvc": 36, "bogoni": 21, "bool": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 104, 106, 108, 110, 121, 125, 129, 130, 200, 211], "boolean": [0, 6, 33, 63, 64, 97, 98, 111, 114, 115, 200, 201, 211, 212], "bootstrap": 35, "bootstrap_s": 35, "both": [0, 25, 27, 32, 53, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 133, 134, 135, 140, 145, 146, 194, 195, 201, 206, 212], "bottom": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "bound": [25, 62, 99, 110, 124, 125, 126, 129, 130, 133, 194, 195, 199, 202, 206, 210, 213], "bound_must_be_given": 99, "boundari": [125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 202, 206, 213, 217], "boundary_dict": 127, "box": 0, "br": [143, 194], "brake": [198, 209], "branch": 0, "break": [198, 201, 209, 212], "brew": 0, "brief": [196, 207], "brighten": [196, 207], "broad": 217, "brucher": 98, "bsr": 98, "budger": 83, "budget": [0, 4, 11, 53, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 100, 168, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 203, 205, 214, 216, 217], "budget_manag": [11, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 100, 203, 205, 214, 216], "budget_manager_": 100, "budget_manager_param_dict": [0, 11, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 205, 214, 216], "budgetmanag": [0, 1, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 100], "build": [21, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "built": [0, 195, 197, 206, 208], "burbidg": [48, 158, 194], "burr": [54, 65, 172, 173, 174, 194], "button": [0, 198, 201, 209, 212], "button_c0": [201, 212], "button_c1": [201, 212], "button_click": [201, 212], "button_cr": [201, 212], "button_press": [201, 212], "c": [15, 16, 21, 25, 30, 41, 42, 58, 71, 72, 73, 74, 75, 98, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217], "c0": [201, 212], "c0_embed": [201, 212], "c1": [201, 212], "c1_embed": [201, 212], "c_": 113, "cach": [200, 211], "cache_dir": [201, 212], "cai": [35, 142, 194], "cal": [5, 7, 9, 10, 12, 16, 28, 116, 127, 130, 131, 132, 178, 194, 218, 219], "calcul": [0, 3, 21, 36, 37, 41, 42, 43, 45, 47, 48, 54, 56, 58, 59, 62, 65, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 87, 88, 89, 91, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 201, 203, 204, 205, 211, 212, 214, 215, 216], "calibr": 20, "call": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 97, 117, 119, 120, 198, 201, 209, 212], "call_func": [1, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216], "callabl": [16, 21, 35, 36, 46, 47, 49, 64, 71, 72, 73, 74, 75, 80, 81, 96, 97, 118, 198, 209], "callback": [201, 212], "can": [0, 5, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 34, 41, 45, 46, 55, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 98, 110, 111, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217], "canb": 194, "candid": [0, 4, 6, 10, 11, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 125, 126, 129, 130, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 202, 203, 204, 205, 208, 209, 213, 214, 215, 216, 217], "candidate_to_label": [55, 175, 176, 177], "cannot": [98, 195, 198, 206, 209], "cao": [71, 72, 73, 74, 75, 181, 182, 183, 184, 194], "capabl": 85, "captur": [136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 194], "carbonel": [62, 63, 170, 194], "card": [201, 212], "carddata": [201, 212], "carlo": [5, 7, 9, 10, 12, 16, 26, 34, 40, 44, 57, 116, 127, 130, 131, 132, 178, 194, 218, 219], "carlo_eer_with_log": [153, 178, 218], "carlo_eer_with_misclassif": [154, 178, 218], "case": [0, 6, 17, 18, 26, 34, 40, 44, 47, 48, 54, 55, 60, 62, 63, 64, 65, 119, 120, 196, 207, 217], "cat": [200, 211], "categori": [0, 194, 201, 212], "category_field": [201, 212], "category_fn": [201, 212], "caus": 98, "cd": 0, "ceil": [198, 209], "cell": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "center": [29, 60, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 201, 202, 203, 204, 205, 210, 212, 213, 214, 215, 216, 217], "centercrop": [200, 211], "central": [195, 206], "certain": [0, 26, 40, 48, 51], "cf": [0, 100], "cg": 21, "challeng": 217, "chandrasekaran": [27, 135, 194], "chang": [0, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 35, 36, 54, 59, 62, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 91, 92, 93, 114, 131, 132, 171, 178, 194, 196, 201, 207, 212, 218, 219], "channel": [0, 196, 207], "chapel": 16, "chaudhuri": 16, "check": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 115, 116, 122, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 201, 203, 204, 205, 209, 212, 214, 215, 216], "check_bound": 1, "check_budget_manag": 1, "check_class": 1, "check_class_prior": 1, "check_classifier_param": 1, "check_cost_matrix": 1, "check_equal_missing_label": 1, "check_indic": 1, "check_missing_label": 1, "check_n_featur": [0, 1], "check_random_st": 1, "check_scalar": 1, "check_typ": 1, "check_uniqu": 106, "check_x_i": 1, "checkbox": 194, "checkout": 0, "chen": [30, 54, 65], "chi2": [16, 49], "chicheng": [133, 194], "children": [198, 209], "chin": [149, 150, 151, 194], "choic": [196, 201, 207, 212], "choos": [31, 64, 121, 217], "chosen": 64, "christoph": [36, 143, 194, 217], "chuan": [181, 182, 183, 184, 194], "chung": 30, "circl": [202, 213], "class": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 100, 101, 102, 103, 104, 112, 113, 114, 115, 116, 117, 118, 122, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219], "class_prior": [5, 15, 16, 101, 159, 160, 161, 202, 213], "class_prior_": [5, 15, 16], "class_probabilistic_active_learning_": [157, 178, 218], "classes_": [5, 12, 15, 16, 17, 18, 20, 21, 67, 95], "classfrequencyestim": [0, 1, 15, 16, 26, 40, 48], "classif": [0, 12, 21, 26, 31, 33, 34, 40, 48, 54, 55, 56, 57, 65, 68, 113, 131, 132, 134, 148, 159, 160, 177, 180, 194, 217, 220], "classifi": [1, 5, 12, 25, 27, 28, 31, 32, 33, 34, 38, 39, 44, 47, 54, 55, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217], "classifier_factory_funct": [199, 210], "classifier_nam": [199, 210], "classifiermixin": [12, 17, 127, 128], "classifiermodul": [196, 207], "classlabel": [198, 209], "cleanli": [199, 210], "clear": [201, 212], "clear_output": [201, 212], "clf": [0, 25, 27, 28, 32, 33, 34, 38, 39, 44, 47, 54, 55, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217], "clf_dict": [204, 215], "clf_embedding_flag_nam": [25, 27, 28, 32], "clf_embedding_nam": [25, 27, 28, 32], "clf_eval": [198, 209], "clf_factori": [203, 204, 205, 214, 215, 216], "clf_name": [199, 204, 210, 215], "click": [201, 212], "clone": [0, 139, 198, 209], "close": [0, 201, 212], "clue": [1, 5, 7, 9, 10, 12, 16, 116, 126, 127, 131, 132, 178, 194, 218, 219], "cluster": [5, 7, 9, 10, 12, 16, 27, 32, 46, 53, 60, 116, 126, 127, 130, 131, 132, 178, 194, 195, 199, 206, 210, 218, 219], "cluster_algo": [27, 32, 46, 53], "cluster_algo_dict": [27, 32, 46, 53, 156, 168], "cluster_std": [133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "clustering_uncertainti": [135, 178, 218], "clustermixin": [27, 32, 46, 53], "cmap": [127, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 199, 206, 210], "cmm": 15, "cnn": [196, 207], "cobyla": 21, "code": [131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 211, 217], "coeffici": [8, 13], "cogdqsfixun": [203, 205, 214, 216], "cogdqsran": [203, 205, 214, 216], "cogdqsranvarun": [203, 205, 214, 216], "cogdqsvarun": [203, 205, 214, 216], "cognit": [5, 9, 11, 12, 16, 71, 72, 73, 74, 75, 128, 129, 131, 180, 193, 194, 218, 219], "cognition_window_s": [71, 72, 73, 74, 75], "cognitive_du": [181, 182, 183, 184, 193, 218], "cognitivedualquerystrategi": [1, 72, 73, 74, 75], "cognitivedualquerystrategyfixun": [1, 71, 181, 193, 194, 203, 205, 214, 216, 218], "cognitivedualquerystrategyran": [1, 71, 182, 193, 194, 203, 205, 214, 216, 218], "cognitivedualquerystrategyranvarun": [1, 71, 183, 193, 194, 203, 205, 214, 216, 218], "cognitivedualquerystrategyvarun": [1, 71, 184, 193, 194, 203, 205, 214, 216, 218], "cohn": [37, 144, 194], "colab": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "coll_new": [136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "coll_old": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "collect": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 205, 214, 216], "color": [127, 128, 129, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 196, 202, 207, 213], "colormap": [127, 128, 129], "column": [0, 98, 108, 113], "com": [0, 196, 207, 217], "combin": [0, 79, 194, 196, 199, 207, 210], "command": 0, "comment": [201, 212], "commit": 0, "committe": [0, 5, 7, 9, 10, 12, 13, 16, 26, 40, 48, 114, 116, 127, 130, 131, 132, 178, 194, 196, 207, 218, 219], "committee_": [158, 159, 160, 161, 178, 218], "compar": [35, 86, 88, 92, 93, 195, 199, 200, 203, 204, 205, 206, 210, 211, 214, 215, 216], "comparison": [199, 200, 210, 211], "compat": [103, 107, 196, 198, 205, 207, 209, 216, 217], "complet": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 82, 125, 126, 128, 129, 130, 198, 200, 209, 211], "complex_func": [197, 208], "compon": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 199, 200, 210, 211], "compos": [196, 200, 207, 211], "comput": [0, 15, 21, 26, 27, 28, 40, 41, 45, 46, 48, 52, 53, 54, 56, 57, 62, 65, 67, 68, 69, 113, 135, 142, 143, 144, 149, 150, 151, 152, 158, 159, 160, 161, 164, 165, 166, 169, 172, 173, 174, 177, 194, 200, 211], "compute_vote_vector": 1, "concaten": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 200, 201, 204, 208, 211, 212, 215], "conda": 0, "condit": [8, 37, 43, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 113], "conditional_expect": 43, "conf": [25, 27, 28, 29, 30, 33, 38, 47, 48, 53, 54, 56, 59, 62, 63, 65, 68, 81, 133, 135, 136, 137, 138, 141, 142, 143, 145, 153, 154, 157, 159, 160, 168, 170, 171, 175, 176, 177, 194], "conf_matric": 113, "confer": [16, 35, 200, 211], "confid": [5, 7, 9, 10, 12, 16, 54, 62, 63, 65, 116, 127, 129, 130, 131, 132, 178, 194, 218, 219], "confidence_dict": 127, "configur": 82, "conform": 0, "confus": [21, 113], "confusion_matrix": 113, "conjunct": [11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "connect": [201, 212], "consid": [0, 6, 10, 16, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 106, 125, 130], "consider_label": [55, 175, 176, 177], "consider_unlabel": [55, 175, 176, 177], "consist": [8, 13, 20, 67, 98, 196, 200, 201, 203, 204, 205, 207, 211, 212, 214, 215, 216], "constant": [8, 13, 21, 219], "constr": 21, "constrained_layout": [133, 134, 135, 140, 145, 146], "constraint": [0, 4, 11, 46, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "construct": [26, 40, 48, 203, 204, 205, 214, 215, 216], "constructor": [198, 209], "consum": 217, "contain": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 104, 112, 113, 117, 125, 126, 127, 128, 130, 196, 207], "contains_non_zero": 104, "content": 0, "continu": [195, 206], "contour": [125, 126, 127, 130, 133, 134, 135, 140, 145, 146, 217], "contour_dict": [125, 126, 130], "contrast": [5, 7, 9, 10, 12, 16, 28, 38, 116, 126, 127, 130, 131, 132, 178, 194, 196, 207, 218, 219], "contrastiv": [1, 136, 178, 194, 218], "contrastive_active_learning_": [136, 178, 218], "control": [6, 7, 9, 11, 38, 49, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 198, 209], "conv1": [196, 207], "conv2": [196, 207], "conv2_drop": [196, 207], "conv2d": [196, 200, 207, 211], "convent": 113, "convers": 98, "convert": [98, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 205, 216], "convolut": [29, 137, 194], "coo": 98, "coolwarm": [127, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "coolwarm_r": [127, 129], "cope": [195, 206], "copi": [98, 100, 196, 197, 207, 208], "core": [5, 7, 9, 10, 12, 16, 29, 45, 116, 127, 130, 131, 132, 178, 194, 218, 219], "core_set": [137, 178, 218], "coreset": [1, 137, 178, 194, 200, 211, 218], "corpora": [48, 69, 161, 194], "correct": [0, 21, 55, 62, 96, 111, 201, 202, 212, 213], "correct_class_str": [201, 212], "correct_classif": [203, 204, 205, 214, 215, 216, 217], "correctli": [201, 212], "correspond": [4, 21, 38, 67, 71, 72, 73, 74, 75, 86, 87, 88, 89, 90, 91, 92, 93, 106, 125], "cosin": [16, 49], "cost": [0, 5, 7, 9, 10, 12, 15, 16, 17, 18, 20, 21, 30, 34, 44, 48, 54, 55, 58, 65, 69, 103, 104, 116, 127, 130, 131, 132, 161, 176, 178, 194, 218, 219], "cost_matrix": [0, 5, 12, 15, 16, 17, 18, 20, 21, 30, 34, 44, 54, 55, 65, 103, 104], "cost_matrix_": [5, 12, 15, 16, 17, 20, 21], "cost_matrix_new": 104, "cost_reduct": 1, "costembedding": [1, 138, 178, 194, 204, 215, 218], "could": 97, "count": [11, 16, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 112, 113, 203, 204, 205, 214, 215, 216], "cournapeau": 98, "cov": 0, "covari": 21, "cover": [0, 46, 156, 194], "coverag": [5, 7, 9, 10, 12, 16, 46, 116, 127, 130, 131, 132, 178, 194, 218, 219], "cpu": [45, 196, 200, 207, 211], "cr": [201, 212], "creat": [0, 100, 114, 115, 121, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 199, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 214, 215, 216, 217], "create_classifi": [199, 210], "create_ensembl": [196, 207], "create_query_strategi": [199, 200, 210, 211], "creation": [100, 199, 200, 210, 211], "criteria": [16, 194], "criterion": [16, 44, 55], "crop": [196, 207], "cross": [43, 198, 199, 202, 209, 210, 213], "cross_val_scor": [198, 209], "crowd": 21, "csc": 98, "csr": 98, "ctive": 217, "ctrl": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "cuda": [196, 200, 207, 211], "current": [0, 44, 55, 67, 126, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 201, 205, 207, 212, 216, 217], "curv": [164, 165, 166, 196, 199, 200, 201, 207, 210, 211, 212, 217], "custom": [21, 111, 201, 212], "cv": [198, 201, 209, 212], "cvf": [27, 48, 68, 135, 177, 194], "cycl": [6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 63, 64, 121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 196, 198, 199, 200, 202, 207, 209, 210, 211, 213, 217], "d": [16, 31, 34, 41, 42, 43, 44, 46, 47, 48, 53, 54, 55, 59, 71, 72, 73, 74, 75, 80, 81, 86, 87, 98, 121, 158, 176, 194], "dagan": [48, 69, 161, 194], "dal": [31, 139, 178, 194, 218], "daniel": [139, 157, 190, 194, 217], "daphna": [156, 168, 194], "darken": [196, 207], "dash": [0, 127], "data": [0, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 98, 107, 108, 110, 117, 119, 120, 125, 126, 128, 129, 130, 131, 138, 142, 158, 164, 165, 166, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 198, 201, 209, 212, 217, 218, 219], "data_dir": [200, 211], "data_label": [198, 209], "data_lin": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "databas": [0, 38, 145, 194], "datalabel": [198, 209], "dataload": [200, 211], "datapoint": 60, "dataset": [0, 98, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217], "dataset_class": [200, 211], "datastream": [5, 9, 11, 12, 16, 81, 86, 128, 129, 131, 180, 193, 194, 218, 219], "david": [37, 144, 194], "dbalstream": [87, 203, 205, 214, 216], "de": [51, 164, 165, 166, 194], "deal": [63, 202, 213], "decid": [0, 62, 203, 205, 214, 216], "decis": [21, 34, 39, 55, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 202, 206, 213, 217], "decisiontreeregressor": [51, 164, 165, 166], "decod": 95, "decor": 118, "decreas": [26, 40, 86, 87, 91, 92, 93], "dedic": [203, 205, 214, 216], "deep": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 133, 134, 145, 194, 217, 220], "deepcopi": [196, 207], "def": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216], "default": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 198, 203, 205, 209, 214, 216, 217], "default_budget_manager_class": 100, "default_budget_manager_dict": 100, "default_rng": [202, 213], "defin": [0, 5, 8, 12, 13, 15, 16, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 47, 48, 49, 51, 54, 55, 63, 65, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 108, 125, 130, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 219], "definit": 113, "degre": [196, 207], "dekel": [46, 53, 156, 168, 194], "deleg": 108, "delet": [198, 209], "delta": [46, 78, 87, 91, 170], "demonstr": [200, 211], "den": 157, "denot": [203, 204, 205, 214, 215, 216], "dens_est": 157, "densiti": [5, 7, 9, 10, 11, 12, 15, 16, 17, 39, 47, 54, 71, 72, 73, 74, 75, 80, 81, 87, 116, 122, 126, 127, 128, 129, 130, 131, 132, 170, 178, 180, 193, 194, 197, 205, 208, 216, 218, 219], "density_based_active_learning_for_data_stream": [189, 193, 218], "density_threshold": [71, 72, 73, 74, 75], "densitybasedbudgetmanag": [71, 80], "densitybasedsplitbudgetmanag": 1, "denzler": [36, 143, 194], "depart": [54, 65, 172, 173, 174, 194], "depend": [21, 64, 78, 79, 82, 84, 91, 92, 93, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "depth": 51, "dequ": [203, 205, 214, 216], "deriv": 86, "desc": [200, 211], "describ": [0, 21, 55, 67], "descript": [0, 16, 100, 201, 212], "design": 25, "desir": 110, "desterck": [33, 141, 194], "detail": [0, 36, 37, 43, 45, 195, 206], "determin": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 104, 117, 119, 120, 121, 125, 126, 127, 129, 130, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 206, 208], "dev": [0, 196, 207], "develop": [51, 217], "deviat": [8, 87, 91, 199, 210], "devic": [196, 200, 207, 211], "devijv": [51, 164, 165, 166, 194], "diagon": [21, 104], "diagonal_is_zero": 104, "dict": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 100, 119, 120, 125, 126, 127, 130, 198, 209], "dictionari": [21, 36, 37, 43, 64, 198, 199, 200, 209, 210, 211], "differ": [0, 28, 43, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 87, 113, 196, 197, 198, 199, 200, 202, 207, 208, 209, 210, 211, 213, 217], "differenti": [0, 8], "difficult": 217, "digit": [198, 209], "dim": [106, 196, 200, 207, 211], "dimens": [35, 98, 99, 106, 119, 120, 200, 211], "dimension": [197, 202, 208, 213], "dina": [152, 194], "ding": [143, 194], "dino": [189, 194], "dinov2_vitb14": [200, 211], "dinovisiontransform": [200, 211], "directli": [0, 6, 10, 16, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 63, 64, 81, 125, 130, 201, 212], "directori": [200, 211], "dirichlet": [5, 15, 16, 21, 47], "disabl": 98, "disagr": [7, 9, 10, 12, 17, 26, 32, 40, 48, 56, 57, 68, 69, 116, 122, 126, 127, 130, 131, 132, 178, 194, 218, 219], "disagre": 48, "discard": 18, "disclaim": [196, 205, 207, 216], "discov": [33, 38, 51, 62, 63, 141, 145, 164, 165, 166, 194], "discrimin": [5, 7, 9, 10, 12, 16, 31, 116, 127, 130, 131, 132, 178, 194, 200, 211, 218, 219], "discriminativ": [1, 139, 178, 194, 196, 200, 207, 211, 218], "discriminative_active_learning_": [139, 178, 218], "displai": [0, 197, 198, 201, 202, 203, 204, 205, 208, 209, 212, 213, 214, 215, 216], "disregard": [8, 13, 77, 82], "dist": 8, "dist_func": [71, 72, 73, 74, 75, 80], "dist_func_dict": [71, 72, 73, 74, 75, 80], "distanc": [5, 7, 9, 10, 12, 15, 30, 39, 41, 42, 46, 60, 71, 72, 73, 74, 75, 80, 99, 116, 126, 127, 130, 131, 132, 178, 194, 218, 219], "distance_func": 46, "distance_sampling_": [146, 147, 178, 218], "distil": [200, 211], "distinct": 194, "distinguish": [0, 194], "distortion_scal": [196, 207], "distribut": [0, 5, 7, 8, 9, 10, 12, 15, 16, 21, 36, 37, 39, 47, 62, 63, 64, 87, 91, 116, 126, 127, 130, 131, 132, 178, 194, 218, 219], "diverg": [5, 7, 8, 9, 10, 12, 13, 16, 43, 48, 56, 114, 116, 127, 130, 131, 132, 178, 194, 218, 219], "divers": [5, 7, 9, 10, 12, 13, 15, 16, 25, 26, 27, 32, 38, 39, 41, 42, 51, 53, 57, 114, 116, 126, 127, 130, 131, 132, 134, 178, 194, 197, 208, 218, 219], "divid": 194, "do": [0, 195, 197, 198, 199, 201, 206, 208, 209, 210, 212], "doc": 0, "document": 217, "doe": [0, 11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 98, 110, 118, 196, 201, 205, 207, 212, 216], "dogleg": 21, "doi": 217, "domain": [27, 135, 194], "dominik": [157, 194], "done": [55, 196, 207], "dong": [171, 194], "dongrui": [149, 150, 151, 194], "donmez": [62, 63, 170, 194], "downgrad": 217, "download": [131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 201, 211, 212], "drago": [176, 194], "draw": [8, 109, 201, 212], "drawn": 8, "drift": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 181, 182, 183, 184, 185, 187, 188, 192, 194], "drop": [200, 211], "drop_path1": [200, 211], "drop_path2": [200, 211], "dropout": [5, 7, 9, 10, 12, 16, 32, 116, 126, 127, 131, 132, 178, 194, 196, 200, 207, 211, 218, 219], "dropout2d": [196, 207], "dropout_query_": [140, 178, 218], "dropout_r": 32, "dropqueri": [1, 5, 7, 9, 10, 12, 16, 116, 126, 127, 131, 132, 178, 194, 200, 211, 218, 219], "dtype": [6, 10, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 98, 125, 130, 196, 201, 202, 203, 204, 205, 207, 212, 213, 214, 215, 216], "dual": [5, 7, 9, 10, 11, 12, 16, 17, 54, 71, 72, 73, 74, 75, 114, 121, 126, 127, 128, 129, 131, 132, 178, 180, 193, 194, 218, 219], "dual_strategy_for_active_learn": [170, 178, 218], "dubourg": 98, "duchesnai": 98, "duplic": [17, 18], "dure": [0, 5, 12, 15, 16, 17, 18, 20, 21, 64, 133, 134, 135, 140, 145, 146], "dwu": 170, "e": [0, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 86, 88, 95, 97, 98, 106, 108, 125, 126, 128, 129, 130, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 207, 209, 210, 211], "each": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 62, 63, 64, 65, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 103, 105, 112, 117, 127, 128, 129, 133, 134, 135, 140, 145, 146, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216], "earn": 217, "eas": [195, 206, 217], "easi": [195, 206], "easiest": 217, "easili": 0, "ecosystem": 0, "eer": [5, 7, 9, 10, 12, 16, 34, 44, 116, 127, 130, 131, 132, 178, 194, 218, 219], "efault": 44, "effect": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62, 98], "effici": [26, 38, 57, 62, 63, 134, 145, 194], "either": [0, 64, 108, 111], "element": [20, 26, 40, 48, 119, 120, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "elementwise_affin": [200, 211], "elreedi": [43, 152, 194], "els": [20, 121, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 170, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 203, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217], "em": [21, 48, 56, 159, 194], "embed": [5, 7, 9, 10, 12, 16, 25, 27, 28, 30, 32, 46, 116, 126, 127, 130, 131, 132, 178, 194, 200, 211, 218, 219, 220], "embed_dim": 30, "embedding_list": [200, 211], "emc": 35, "emili": [164, 165, 166, 194], "emoc": 36, "empir": [7, 9, 10, 13, 28, 48, 114, 131, 132, 136, 178, 194, 218, 219], "emploi": [48, 56, 159, 194, 200, 211], "empti": [98, 108, 201, 212, 217], "emvr": 37, "enabl": [18, 26, 40, 48, 198, 209, 217], "enable_metadata_rout": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "encapsul": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "encod": 95, "encount": 217, "end": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 211], "endors": 0, "enforc": [0, 98], "enforce_map": 34, "enforce_unique_sampl": 67, "eng": [48, 158, 194], "engelson": [48, 69, 161, 194], "enhanc": 0, "enough": [198, 209], "ensembl": [20, 26, 40, 48, 68, 134, 148, 158, 159, 160, 161, 194, 197, 198, 208, 209], "ensur": [0, 5, 15, 16, 51, 98, 200, 211], "ensure_2d": 98, "ensure_all_finit": 98, "ensure_min_featur": 98, "ensure_min_sampl": 98, "entir": [198, 209], "entri": [0, 5, 6, 15, 16, 63, 64, 104, 113, 127, 128], "entropi": [5, 7, 8, 9, 10, 12, 16, 26, 27, 40, 43, 48, 54, 65, 69, 116, 127, 130, 131, 132, 152, 178, 194, 195, 206, 217, 218, 219], "enumer": [133, 134, 135, 140, 145, 146, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 200, 201, 202, 203, 210, 211, 212, 213, 214], "environ": [204, 215], "ep": [26, 28, 40, 48, 56, 57, 200, 211], "epistem": [5, 7, 9, 10, 12, 16, 33, 116, 127, 130, 131, 132, 178, 194, 218, 219], "epistemic_uncertainty_sampling_": [141, 178, 218], "epistemicuncertaintysampl": [1, 141, 178, 194, 204, 215, 218], "episu": [33, 141, 178, 194, 218], "epsilon": [63, 99], "equal": [0, 6, 35, 63, 64, 105, 106, 111, 112, 113, 117], "era": [32, 140, 194], "eras": [196, 207], "eric": [34, 55, 175, 194], "erik": [36, 143, 194], "err": 170, "error": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 34, 36, 44, 55, 62, 63, 98, 107, 110, 153, 154, 194, 199, 201, 210, 212], "error_scor": [198, 209], "errorbar": [200, 211], "errorbar_mean": [199, 200, 210, 211], "errorbar_std": [199, 200, 210, 211], "especi": 118, "estim": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 108, 113, 116, 127, 130, 131, 132, 153, 154, 178, 194, 196, 205, 207, 216, 218, 219], "estimatedbudgetzliobait": [1, 89, 90, 91, 92, 93], "estimator_": 17, "estimator_class": 0, "estimators_": [20, 26, 40, 48], "et": [71, 72, 73, 74, 75, 80, 83, 87, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 175, 177, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 200, 211], "etc": [36, 37, 43, 98], "euclidean": 42, "eur": [38, 47, 81, 145, 157, 170, 194], "eval_method": [198, 209], "evalu": [0, 34, 36, 44, 55, 81, 83, 113, 196, 197, 198, 203, 204, 205, 207, 208, 209, 214, 215, 216, 217, 220], "evenli": [197, 208], "event": [201, 212], "ever": [34, 44, 55], "everi": [0, 21, 25, 32, 77, 106, 112, 117, 201, 212], "evolv": [71, 72, 73, 74, 75, 80, 87, 189, 194], "exact": [21, 34], "exampl": [132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 206, 207, 212, 213, 218], "exce": [41, 76, 78, 79, 82, 83, 84, 89], "excel": [200, 211], "except": [0, 1, 8, 13, 34, 47, 54, 81, 106, 125, 130, 198, 209], "exchang": [198, 209], "exclud": [26, 27, 32, 40, 46, 48, 52, 53, 201, 212], "exclude_non_subsampl": 52, "exclus": 110, "execut": [0, 178, 179, 193, 195, 196, 198, 201, 206, 207, 209, 212, 217, 218], "exemplari": [195, 206], "exhaust": [77, 82, 88, 89, 90, 91, 92, 93], "exist": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62, 97, 196, 197, 207, 208], "exp": [169, 170], "expect": [0, 5, 7, 8, 9, 10, 12, 13, 16, 21, 25, 26, 27, 28, 32, 34, 35, 36, 37, 40, 43, 44, 48, 54, 55, 58, 59, 67, 108, 114, 116, 127, 130, 131, 132, 178, 194, 198, 209, 218, 219], "expected_average_precis": [1, 54, 171, 178, 218], "expected_cost_reduct": 58, "expected_model_chang": [142, 178, 218], "expected_model_output_chang": [143, 178, 218], "expected_model_variance_reduct": [144, 178, 218], "expectederrorreduct": [1, 44, 55], "expectedmodelchangemaxim": [1, 142, 178, 194, 218], "expectedmodeloutputchang": [1, 143, 178, 194, 218], "expectedmodelvariancereduct": [1, 144, 178, 194, 218], "expens": 217, "experi": [203, 204, 205, 214, 215, 216], "explan": 0, "explicitli": [203, 204, 205, 214, 215, 216], "exploit": [43, 63, 152, 194], "explor": [43, 63, 152, 194], "exponenti": 15, "ext_confusion_matrix": 1, "extend": [0, 5, 55, 201, 203, 204, 205, 212, 214, 215, 216], "extens": [57, 71, 72, 73, 74, 75, 80, 81, 113], "extlabelencod": 1, "extra": 0, "extract": [46, 200, 211], "ey": 21, "eyk": [141, 194], "f": [5, 15, 16, 18, 34, 40, 43, 55, 57, 67, 98, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 199, 200, 201, 202, 204, 206, 207, 209, 210, 211, 212, 213, 215], "f_callabl": 97, "f_callable_result": 97, "f_components_": 15, "facebookresearch": [200, 211], "facebookresearch_dinov2_main": [200, 211], "facecolor": [195, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 210, 211, 213, 214, 216], "factor": [39, 71, 72, 73, 74, 75], "factori": [199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "fail": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "failur": 98, "falcun": [1, 5, 7, 9, 10, 12, 16, 116, 126, 127, 131, 132, 178, 194, 200, 211, 218, 219], "fallback": [46, 100], "fals": [5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 98, 99, 104, 108, 113, 121, 125, 130, 170, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 200, 201, 202, 203, 204, 205, 207, 211, 212, 213, 214, 215, 216], "familiar": [198, 209], "fast": [5, 7, 9, 10, 12, 16, 26, 38, 40, 116, 126, 127, 131, 132, 178, 194, 218, 219], "fast_active_learning_by_contrastive_uncertainty_": [145, 178, 218], "faster": [196, 207], "fatih": [177, 194], "fc1": [196, 200, 207, 211], "fc1_drop": [196, 207], "fc2": [196, 200, 207, 211], "featur": [0, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 21, 28, 35, 36, 41, 42, 77, 82, 98, 99, 108, 114, 131, 132, 178, 194, 195, 197, 199, 200, 203, 204, 205, 206, 208, 210, 211, 214, 215, 216, 218, 219], "feature_bound": [125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 202, 206, 213], "feature_map": 35, "ferenc": [134, 148, 194], "fetch_openml": [196, 207], "fewer": 217, "fig": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 201, 202, 207, 208, 212, 213], "figsiz": [196, 197, 201, 202, 207, 208, 212, 213], "figur": [195, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 210, 211, 213, 214, 216], "file": [0, 178, 179, 193, 200, 211, 218], "fill": [121, 201, 212], "fill_between": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 199, 210], "fill_valu": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 196, 198, 199, 200, 202, 204, 206, 207, 209, 210, 211, 213, 215, 217], "filter": [0, 17, 32, 81, 86, 194, 201, 212], "filterwarn": [195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212], "final": [195, 206, 217], "find": [46, 217], "finish": 0, "finit": 98, "first": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 98, 106, 195, 196, 197, 198, 201, 202, 205, 206, 207, 208, 209, 212, 213, 216, 217], "firstli": [200, 211], "fit": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 47, 48, 51, 54, 55, 62, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 95, 106, 108, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "fit_clf": [0, 25, 27, 28, 32, 33, 34, 38, 39, 44, 47, 54, 55, 63, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 196, 201, 203, 204, 205, 207, 212, 214, 215, 216], "fit_default_param": 0, "fit_ensembl": [26, 40, 48, 196, 207], "fit_if_not_fit": 0, "fit_intercept": 21, "fit_kwarg": [17, 18], "fit_param": 67, "fit_reg": [35, 36, 37, 41, 43, 51, 197, 208], "fit_transform": [27, 32, 35, 95, 196, 207], "fix": [0, 5, 9, 11, 12, 16, 31, 71, 72, 76, 83, 89, 128, 129, 131, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 199, 200, 210, 211, 218, 219], "fixeduncertainti": [1, 72, 185, 193, 194, 203, 205, 214, 216, 218], "fixeduncertaintybudgetmanag": [1, 71, 72, 76], "flag": [25, 27, 28, 32, 55, 67, 201, 212], "flake8": 0, "flatten": [133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 196, 197, 207, 208], "flip": [196, 207], "float": [4, 5, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 26, 28, 32, 35, 38, 39, 40, 46, 47, 48, 49, 52, 56, 57, 58, 62, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 100, 110, 129, 201, 203, 204, 205, 212, 214, 215, 216], "float32": [196, 207], "float64": 98, "florin": 21, "flower": [200, 211], "flowers102": [200, 211], "flowers102_dinov2b_x_test": [200, 211], "flowers102_dinov2b_x_train": [200, 211], "flowers102_dinov2b_y_test": [200, 211], "flowers102_dinov2b_y_train": [200, 211], "flowers102_x_test": [200, 211], "flowers102_x_train": [200, 211], "flowers102_y_test_tru": [200, 211], "flowers102_y_train_tru": [200, 211], "focu": [199, 200, 210, 211], "focus": [71, 72, 73, 74, 75, 80, 87, 189, 194], "fold": [199, 210], "follow": [0, 33, 44, 55, 64, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 91, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "fontdict": [197, 208], "fontsiz": [196, 197, 202, 207, 208, 213], "forc": 98, "force_full_budget": [71, 72, 73, 74, 75, 181, 182, 183, 203, 205, 214, 216], "forest": [205, 216], "fork": 0, "form": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "format": [0, 98, 200, 211], "fortran": 98, "forward": [0, 196, 207], "found": [0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 200, 201, 209, 211, 212], "foundat": [32, 140, 194], "four": [196, 197, 207, 208], "fourd": [1, 146, 147, 178, 194, 218], "fourth": 77, "frac": [8, 13], "fraction": 52, "frame": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 206], "framework": [0, 43, 152, 194, 196, 198, 207, 209], "free": 96, "freeli": [201, 212], "frequenc": [5, 15, 16, 18, 47, 67, 81], "freytag": [36, 143, 194], "friendli": [195, 206], "from": [0, 5, 8, 10, 13, 15, 16, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 98, 109, 118, 125, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "from_numpi": [196, 207], "full": [71, 72, 73, 74, 75, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 198, 199, 200, 202, 204, 206, 209, 210, 211, 213, 215, 217], "full_lik": [196, 197, 201, 207, 208, 212], "fulli": [196, 207], "func": 96, "func_nam": 118, "function": [0, 11, 16, 18, 34, 35, 41, 42, 44, 46, 47, 49, 55, 60, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 96, 97, 108, 111, 113, 117, 118, 119, 120, 124, 125, 127, 130, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "further": [16, 17, 18, 41, 42, 45, 47, 49, 52, 81, 97, 111, 202, 213], "furthermor": [0, 18, 194, 199, 210], "g": [0, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 98, 106, 170, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194], "gain": [47, 197, 208], "gal": [26, 57, 134, 194], "galleri": [131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 218], "gamma": [16, 21, 38, 47, 81, 142, 143, 144, 149, 150, 151, 152, 162, 197, 199, 202, 208, 210, 213], "gap": 27, "gather": 217, "gauss_hermit": [143, 152], "gaussian": [15, 217], "gaussian_filter1d": [203, 204, 205, 214, 215, 216], "gaussian_process": [48, 134, 148, 158, 199, 210, 217], "gaussianblur": [196, 207], "gaussianmixtur": [15, 146, 147, 169, 170], "gaussianprocessclassifi": [134, 148, 199, 210, 217], "gaussianprocessregressor": [48, 158], "gca": 126, "gelu": [200, 211], "gen_random_st": [199, 200, 210, 211], "gen_se": [199, 200, 210, 211], "gener": [8, 13, 15, 32, 39, 117, 119, 120, 121, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 200, 207, 209, 211, 217, 218], "genewein": [48, 68, 160, 194], "geoffrei": [185, 187, 188, 192, 194], "georg": [157, 190, 194], "get": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 124, 170, 201, 212, 217, 220], "get_metadata_rout": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "get_param": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "get_randomse": [203, 204, 205, 214, 215, 216], "ghahramani": [37, 40, 57, 134, 144, 148, 194], "ghostscript": 0, "gilhub": [38, 145, 194], "giorgo": [136, 194], "gissin": [31, 139, 194], "git": [0, 196, 207], "github": [0, 181, 182, 183, 196, 207, 217], "give": [197, 202, 208, 213], "given": [0, 3, 4, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 58, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 99, 107, 109, 110, 111, 113, 118, 121, 124, 125, 126, 127, 128, 129, 130, 196, 200, 202, 207, 211, 213], "global": [201, 212], "gmm": [15, 39, 169, 170], "go": [38, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "goal": [0, 195, 206, 217], "goe": [203, 204, 205, 214, 215, 216], "gonzalez": 16, "googl": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "gpu": [196, 207], "gradient": [5, 7, 9, 10, 12, 16, 25, 35, 116, 126, 127, 131, 132, 178, 194, 218, 219], "grai": [195, 206], "gramfort": 98, "graphic": [200, 211], "grayscal": [196, 207], "greater": [35, 49, 51, 63, 64], "greedi": [0, 7, 8, 9, 10, 13, 29, 40, 41, 42, 114, 131, 132, 178, 194, 218, 219], "greedili": 60, "greedy_sampling_on_the_feature_space_": [151, 178, 218], "greedy_sampling_on_the_target_space_": [149, 178, 218], "greedy_select": 31, "greedybald": [1, 148, 178, 194, 218], "greedysamplingtarget": [1, 149, 150, 178, 194, 197, 208, 218], "greedysamplingx": [1, 151, 178, 194, 197, 208, 218], "green": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 202, 208, 213], "greenish": 217, "grei": [129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "grid": [124, 133, 134, 135, 140, 145, 146], "grisel": 98, "ground": 62, "group": 113, "gsi": [7, 8, 9, 10, 13, 41, 114, 131, 132, 178, 194, 218, 219], "gsx": [7, 8, 9, 10, 13, 41, 42, 114, 131, 132, 178, 194, 218, 219], "gsy": [7, 8, 9, 10, 13, 41, 114, 131, 132, 178, 194, 218, 219], "gt": [204, 215], "guarante": [199, 203, 204, 205, 210, 214, 215, 216], "gui": [156, 168, 194], "guid": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 175, 194, 200, 211], "guidanc": 0, "guidelin": 0, "gupt": [32, 140, 194], "h": [21, 30, 48, 49, 54, 59, 65, 68, 158, 159, 160, 161, 194], "ha": [0, 5, 6, 8, 12, 13, 15, 16, 17, 18, 20, 21, 26, 34, 40, 48, 62, 63, 64, 67, 86, 88, 90, 91, 92, 93, 98, 104, 108, 116, 119, 120, 122, 127, 128, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 208, 217], "hacohen": [46, 53, 156, 168, 194], "haim": [158, 159, 160, 161, 194], "half": [62, 63], "handl": [0, 12, 17, 67, 199, 200, 201, 210, 211, 212], "handwritten": [196, 198, 207, 209], "hanmo": [171, 194], "hao": [138, 194], "happen": [197, 208], "hard": 20, "have": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 108, 110, 111, 116, 118, 122, 129, 198, 199, 200, 201, 202, 203, 205, 209, 210, 211, 212, 213, 214, 216, 217], "hbox": [198, 201, 209, 212], "head": [200, 211], "heavili": 118, "height": [196, 201, 207, 212], "help": [44, 55, 118, 217], "helper": [199, 200, 210, 211], "herd": 217, "here": [0, 67, 195, 197, 200, 203, 204, 205, 206, 208, 211, 214, 215, 216], "herebi": 21, "heterog": [71, 72, 73, 74, 75, 80, 87, 189, 194], "hide": 118, "hierarchi": 0, "high": [49, 53, 71, 72, 73, 74, 75, 80, 87, 168, 189, 194, 217], "high_density_diff": [197, 208], "high_nois": [197, 208], "higher": [86, 88, 89, 90, 91, 92, 93, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "highest": [38, 121], "highlight": [129, 133, 134, 135, 140, 145, 146], "hler": [160, 194], "hoffman": [27, 135, 194], "hold": [0, 5, 12, 15, 16, 17, 18, 20, 21, 59, 62, 72, 76, 89, 95, 112, 117, 129, 203, 204, 205, 214, 215, 216], "holm": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 185, 187, 188, 192, 194], "home": [181, 182, 183], "horizont": [196, 207], "horvitz": [34, 55, 175, 194], "houlsbi": [40, 57, 134, 148, 194], "how": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 121, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217], "howev": [195, 199, 206, 210], "hsuan": [138, 194], "html": [0, 198, 209], "http": [0, 196, 207, 217], "hua": [162, 194], "huang": [30, 41, 42, 49, 138, 149, 150, 151, 162, 194], "hub": [200, 211], "huggingfac": [201, 212], "huggingface_cach": [201, 212], "husz": [134, 148, 194], "husz\u00e1r": [40, 57], "hybrid": [38, 79], "hypothes": [26, 40], "hypothet": [47, 58], "h\u00fcllermeier": [33, 141, 194], "i": [0, 1, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 65, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "i_fold": [199, 210], "i_rep": [199, 200, 210, 211], "ibrari": 217, "icdmw": 16, "icml": [34, 44], "icvgip": [200, 211], "idea": [31, 67, 71, 72, 73, 74, 75, 77], "ideal": [201, 212], "ident": [21, 35, 200, 211], "identif": 0, "identifi": [0, 48, 133, 134, 135, 140, 145, 146, 196, 207], "ido": [161, 194], "idx": [67, 198, 202, 209, 213], "idx_fit": 67, "idx_pr": 67, "idx_predict": 67, "ieee": [16, 27, 30, 34, 35, 48, 55, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 135, 138, 142, 160, 162, 177, 181, 182, 183, 184, 185, 187, 188, 192, 194], "ielearn": 62, "ienco": [71, 72, 73, 74, 75, 80, 87, 189, 194], "iethresh": 63, "ignor": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 34, 44, 48, 55, 62, 125, 126, 130, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212], "ignore_partial_fit": [34, 44, 55, 67, 153, 154, 175, 176, 177], "ignore_undefined_query_param": [125, 130], "ignore_var_keyword": 97, "ijcai": [34, 55], "illustr": [0, 217], "imag": [0, 34, 48, 55, 68, 160, 177, 194, 196, 198, 201, 207, 209, 212, 217, 220], "image_s": [198, 209], "imbalanc": 0, "implement": [0, 2, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 89, 91, 92, 93, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 195, 196, 198, 206, 207, 209, 217], "impli": [0, 110], "import": [0, 34, 44, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "import_misc": 0, "improv": [0, 7, 8, 9, 10, 13, 41, 114, 131, 132, 178, 194, 195, 206, 218, 219], "improved_greedy_sampling_": [150, 178, 218], "imshow": [196, 207], "in_featur": [200, 211], "includ": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 94, 98, 123, 125, 126, 128, 129, 130, 196, 198, 200, 207, 209, 211, 217], "inclus": 110, "incom": [204, 215], "incompat": 217, "incorpor": [25, 32], "increas": [42, 86, 87, 91, 92, 93, 201, 212], "increment": [81, 86, 88], "independ": [43, 45, 55], "index": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 106, 113, 116, 119, 120, 122, 133, 134, 135, 140, 145, 146, 195, 201, 202, 206, 212, 213, 217], "index_arrai": [119, 120], "index_cand": [204, 215], "indexclassifierwrapp": 1, "indian": [200, 211], "indic": [0, 4, 5, 6, 10, 11, 12, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 106, 108, 111, 113, 114, 115, 116, 119, 120, 121, 122, 125, 129, 130, 133, 134, 135, 140, 145, 146, 197, 198, 200, 201, 202, 208, 209, 211, 212, 213], "indicator_func": 111, "indistinguish": 31, "indr": [189, 194], "indr\u0117": [185, 187, 188, 192, 194], "inf": [26, 39, 41, 42, 46, 49, 57, 98, 134, 146, 147, 149, 150, 151, 156, 162, 170, 194], "infer": [86, 99], "infin": 38, "infinit": 98, "influenc": [8, 13, 39, 98], "inform": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 116, 127, 130, 131, 132, 142, 143, 144, 149, 150, 151, 152, 158, 178, 196, 207, 217, 218, 219], "inherit": [0, 198, 209], "init": [0, 67], "init_clf": 0, "init_default_param": 0, "init_param": [169, 170], "init_q": 0, "init_reg": 0, "init_s": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "init_train_length": [203, 204, 205, 214, 215, 216], "initi": [0, 15, 21, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 87, 91, 92, 93, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 201, 207, 212, 217], "initialis": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "inplac": [200, 211], "input": [0, 5, 7, 8, 9, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 32, 40, 46, 48, 67, 95, 98, 108, 164, 165, 166, 198, 200, 201, 209, 211, 212], "insid": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "insight": [200, 211], "inspect": 97, "inspir": 118, "instal": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "instanc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 109, 117, 119, 120, 121, 128], "instead": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 34, 36, 44, 47, 55, 62, 67, 81, 87, 126], "int": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 101, 104, 106, 109, 110, 117, 119, 120, 121, 124, 125, 126, 127, 128, 130, 133, 135, 137, 138, 141, 142, 153, 154, 159, 168, 171, 175, 176, 189, 194, 196, 198, 200, 201, 202, 207, 209, 211, 212, 213], "int64": [196, 207], "integ": [0, 52, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "integr": [36, 37, 43], "integration_dict": [36, 37, 143], "integration_dict_cross_entropi": [43, 197, 208], "integration_dict_target_v": [43, 152, 197, 208], "integration_method": 36, "intel": [47, 48, 54, 59, 65, 81, 86, 144, 157, 158, 162, 171, 175, 176, 190, 194], "intellig": [16, 200, 211], "interact": [201, 212], "intercept": 21, "interfac": [0, 198, 209], "intern": [0, 11, 16, 31, 35, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "interpret": [64, 106], "interv": [62, 63, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "intervalestimationannotmodel": [1, 63], "intervalestimationthreshold": 1, "introduc": [195, 206], "introduct": [202, 213], "invers": 21, "inverse_transform": 95, "invok": [198, 209], "involv": [200, 211], "io": [181, 182, 183], "ipyannot": [198, 209], "ipynb": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "ipython": [201, 212], "ipywidget": [198, 201, 209, 212], "is_avail": [196, 200, 207, 211], "is_c0": [201, 212], "is_c0_categori": [201, 212], "is_c1": [201, 212], "is_c1_categori": [201, 212], "is_exclusive_c0": [201, 212], "is_exclusive_c0_subset": [201, 212], "is_exclusive_c1": [201, 212], "is_exclusive_c1_subset": [201, 212], "is_fit": 67, "is_label": [1, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 170, 197, 198, 208, 209], "is_lbld": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "is_train": [200, 211], "is_tru": [202, 213], "is_unlabel": [1, 36, 114], "is_valid_pap": [201, 212], "isn": 0, "issu": 217, "ist": 87, "item": [196, 198, 203, 204, 205, 207, 209, 214, 215, 216], "iter": [21, 51, 111, 195, 196, 198, 200, 201, 202, 206, 207, 209, 211, 212, 213, 217], "its": [0, 18, 26, 34, 40, 44, 48, 55, 83, 88, 98, 217], "itself": [4, 11, 21, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 201, 212], "j": [0, 5, 6, 12, 15, 16, 17, 18, 20, 21, 25, 26, 27, 30, 32, 34, 41, 42, 44, 47, 48, 49, 51, 54, 55, 57, 62, 63, 64, 65, 68, 71, 72, 73, 74, 75, 81, 98, 112, 113, 133, 134, 135, 140, 144, 145, 146, 158, 177, 194, 196, 198, 207, 209], "jaim": [170, 194], "jaks": [51, 164, 165, 166, 194], "jan": [160, 194], "jeffrei": [140, 194], "jem": [158, 194], "jet": [195, 199, 206, 210], "jia": [181, 182, 183, 184, 194], "jian": [149, 150, 151, 181, 182, 183, 184, 194], "jie": [181, 182, 183, 184, 194], "jin": [49, 162, 194], "jo": [164, 165, 166, 194], "joachim": [36, 143, 194], "joblib": 45, "johann": [157, 194], "john": [133, 194], "join": [201, 212], "joint": [38, 57], "jointli": [38, 57], "joost": [134, 194], "jordan": [37, 133, 144, 194], "jose": [51, 164, 165, 166, 194], "joshi": [34, 55, 177, 194], "josiah": [140, 194], "journal": 217, "json": 0, "jt": [54, 59, 145, 171, 175, 176, 194], "judi": [135, 194], "jun": [35, 142, 162, 194], "jupyt": [131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 209], "jupyter_ui_pol": [201, 212], "justify_cont": [198, 209], "k": [21, 27, 28, 29, 30, 40, 48, 51, 53, 56, 64, 128, 143, 160, 194, 199, 210], "k_greedy_cent": 1, "k_vec_list": 58, "kachit": [159, 194], "kaed": 36, "kakd": 16, "kamal": [159, 194], "kapoor": [34, 55, 175, 194], "kate": [135, 194], "katerina": [136, 194], "keep": [8, 13, 199, 210], "kei": [0, 196, 199, 200, 207, 210, 211], "kept": 31, "kernel": [8, 13, 16, 47, 49, 67, 81, 205, 216], "kernel_s": [196, 200, 207, 211], "key_word_arg": [197, 208], "keyword": [45, 52, 119, 120, 125, 130], "kf": [199, 210], "kfold": [199, 210], "kfold_class": [199, 210], "kind": [34, 44, 55, 97], "king": [48, 158, 194], "kirsch": [26, 57, 134, 194], "kl": 56, "kl_diverg": [48, 159], "kldivergencemaxim": [1, 152, 178, 194, 197, 208, 218], "kmean": [27, 32, 46, 53, 169, 170], "know": [39, 146, 147, 194, 195, 199, 206, 210], "knowl": [38, 51, 62, 63, 145, 164, 165, 166, 194], "knowledg": [198, 209], "known": [0, 113, 195, 206], "kong": 16, "kottk": [47, 81, 86, 157, 190, 194, 217], "krempl": [47, 81, 86, 157, 190, 194], "krishnamurthi": [25, 133, 194], "krylov": 21, "kuan": [138, 194], "kullback": [5, 7, 8, 9, 10, 12, 13, 16, 43, 48, 56, 114, 116, 127, 130, 131, 132, 178, 194, 218, 219], "kwarg": [4, 6, 7, 9, 10, 11, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 88, 97, 125, 130, 198, 209], "k\u00f6hler": [48, 68], "l": [3, 16, 21, 28, 33, 54, 59, 62, 65, 164, 165, 166, 194, 217], "label": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 102, 103, 105, 107, 112, 113, 114, 115, 116, 117, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219], "label_list": [200, 211], "labeled_indic": [1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 195, 198, 206, 209], "labeling_t": 88, "labelling_widget": [198, 209], "lambda": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 199, 200, 201, 202, 203, 204, 205, 208, 210, 211, 212, 213, 214, 215, 216], "lang": [28, 47, 81, 136, 157, 194], "langford": [25, 133, 194], "languag": [169, 194], "laplacian": [16, 49], "larg": [0, 196, 200, 207, 211, 217], "last": [64, 86, 88, 89, 90, 91, 92, 93, 128, 195, 206], "lastli": [203, 204, 205, 214, 215, 216], "later": 67, "latest": 18, "latter": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "layernorm": [200, 211], "layerscal": [200, 211], "layout": [198, 201, 209, 212], "lbld_idx": [195, 206], "lbld_indic": 116, "leaf": 51, "learn": [0, 4, 5, 6, 7, 9, 10, 11, 12, 13, 16, 17, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 113, 114, 116, 121, 122, 126, 127, 128, 129, 130, 131, 132, 135, 137, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 192, 193, 194, 198, 209, 218, 219, 220], "learner": [197, 208], "learning_curv": [201, 212], "learning_curve_id": [201, 212], "least": [5, 7, 9, 10, 12, 16, 54, 65, 98, 104, 113, 116, 127, 130, 131, 132, 178, 194, 198, 203, 204, 205, 209, 214, 215, 216, 218, 219], "least_confid": [27, 54, 65, 169, 170, 173], "lee": 30, "legend": [131, 132, 180, 196, 199, 200, 201, 203, 204, 205, 207, 210, 211, 212, 214, 215, 216], "lei": [171, 194], "leibler": [5, 7, 8, 9, 10, 12, 13, 16, 43, 48, 56, 114, 116, 127, 130, 131, 132, 178, 194, 218, 219], "leibler_diverg": [159, 178, 218], "len": [6, 46, 63, 64, 121, 156, 157, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217], "length": [35, 47, 54, 77, 98, 203, 204, 205, 214, 215, 216], "lengyel": [40, 57, 134, 148, 194], "let": [39, 146, 147, 194, 195, 206], "level": [56, 62, 63, 68, 69, 127, 129], "levi": [32, 140, 194], "lexicograph": 67, "lg": [201, 212], "lgorithm": 217, "li": [71, 72, 73, 74, 75, 181, 182, 183, 184, 194], "libact": 30, "librari": [0, 195, 200, 205, 206, 211, 216], "lie": 35, "light": [164, 165, 166], "lightblu": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "lightgreen": [197, 208], "like": [0, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 102, 103, 104, 106, 108, 112, 113, 114, 115, 116, 117, 119, 120, 122, 124, 125, 126, 127, 128, 129, 130, 198, 201, 209, 212], "limit": [18, 203, 204, 214, 215], "lin": [30, 41, 42, 54, 65, 138, 149, 150, 151, 194], "linalg": 35, "line": [0, 127, 129, 197, 202, 208, 213, 217], "linear": [16, 35, 49, 196, 200, 207, 211], "linear_model": [33, 169, 170, 195, 200, 201, 206, 211, 212], "linewidth": 129, "linguist": [48, 69, 161, 169, 194], "linh": [141, 194], "linspac": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 202, 208, 213], "lint": 0, "liobait": [189, 194], "list": [8, 13, 20, 26, 30, 40, 46, 48, 69, 98, 113, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 203, 204, 205, 207, 209, 214, 215, 216, 217], "literatur": [54, 65, 172, 173, 174, 194], "liu": [71, 72, 73, 74, 75, 181, 182, 183, 184, 194], "ll": [200, 211], "lmbda": [39, 49, 162], "lo": [136, 194, 201, 212], "load": [198, 209], "load_and_process_dataset": [200, 211], "load_dataset": [201, 212], "load_digit": [198, 209], "loc": [196, 199, 200, 201, 207, 210, 211, 212], "local": [0, 71, 72, 73, 74, 75, 80, 198, 201, 209, 212], "locat": [203, 204, 205, 214, 215, 216], "log": [5, 7, 9, 10, 12, 16, 26, 28, 34, 40, 44, 48, 55, 56, 57, 116, 127, 130, 131, 132, 178, 194, 218, 219], "log_loss": [44, 153], "logic": 0, "logical_and": [201, 212], "logist": [21, 33, 195, 206], "logisticregress": [33, 169, 170, 195, 200, 201, 206, 211, 212], "long": 82, "look": [196, 197, 198, 201, 207, 208, 209, 212], "loop": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 201, 202, 203, 204, 205, 209, 212, 213, 214, 215, 216], "loss": [5, 7, 9, 10, 12, 16, 34, 36, 44, 55, 116, 127, 130, 131, 132, 178, 194, 218, 219], "low": [49, 53, 168, 194], "lower": [25, 50, 62, 110, 133, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 194, 196, 199, 200, 207, 210, 211], "lr": [196, 207], "ls1": [200, 211], "ls2": [200, 211], "lt": [196, 200, 204, 207, 211, 215], "luo": [169, 194], "m": [0, 40, 47, 48, 57, 68, 81, 86, 98, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "m_max": [47, 58, 81], "m_sampl": 16, "ma": [38, 145, 194], "ma_q": [202, 213], "mach": [21, 32, 38, 48, 53, 56, 98, 140, 143, 145, 153, 154, 159, 162, 168, 170, 194], "machin": [0, 98, 195, 198, 200, 201, 206, 209, 211, 212, 217], "made": 0, "madison": [54, 65], "mahalanobi": 15, "mai": [0, 4, 5, 8, 11, 12, 13, 20, 21, 26, 40, 48, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 112, 113, 117, 126, 181, 182, 183], "main": [0, 45, 77, 194, 195, 199, 206, 210], "mainli": 87, "major": [0, 20, 21, 62, 64, 202, 213], "majority_vot": [1, 64, 202, 213], "make": [0, 98, 195, 196, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216], "make_blob": [133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 202, 203, 204, 205, 210, 213, 214, 215, 216, 217], "make_classif": [195, 206], "manag": [0, 4, 11, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 100, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 209], "managag": [203, 205, 214, 216], "mandatori": 97, "manfr": [158, 159, 160, 161, 194], "manger": 100, "mani": [0, 16, 48, 64, 88, 195, 206], "manifold": 30, "manual": [48, 69, 161, 194], "manual_se": [196, 207], "map": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "mappingerror": 1, "marek": 217, "margatina": [28, 136, 194], "margin": [5, 7, 9, 10, 12, 16, 38, 54, 65, 116, 127, 130, 131, 132, 178, 194, 218, 219], "margin_sampl": [27, 54, 65, 174], "margineantu": [34, 55, 176, 194], "mark": [201, 212], "marker": [133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 202, 213], "marker_s": [202, 213], "mask": [114, 115], "master_random_st": [199, 200, 210, 211], "match": [110, 118, 197, 208], "match_signatur": 1, "math": [198, 209], "matplotlib": [125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216], "matric": [4, 11, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93], "matrix": [0, 4, 5, 6, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 34, 44, 54, 55, 58, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 103, 104, 113], "max": [0, 121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 199, 202, 206, 210, 213, 217], "max_candid": [52, 167], "max_epoch": [196, 207], "max_inclus": 110, "max_it": 21, "max_iter_repres": 51, "max_pool2d": [196, 207], "max_val": 110, "maxim": [7, 8, 9, 10, 13, 26, 27, 28, 35, 40, 41, 43, 46, 54, 58, 59, 114, 131, 132, 171, 178, 194, 218, 219], "maximis": [26, 40], "maximum": [0, 21, 45, 46, 47, 51, 52, 58, 60, 110, 119, 121, 198, 201, 209, 212, 217], "maxit": 21, "maxlen": [203, 205, 214, 216], "mb": [178, 179, 193, 218], "mccallum": [34, 44, 48, 56, 153, 154, 159, 194], "mcpal": [47, 81, 157, 178, 194, 218], "md": 30, "mds_param": 30, "mead": 21, "mean": [0, 5, 6, 8, 12, 13, 15, 16, 17, 18, 20, 21, 47, 62, 63, 64, 81, 91, 98, 196, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216], "mean_absolute_error": 36, "mean_squared_error": 36, "meaning": [46, 200, 211], "measur": [30, 32, 35, 39, 54, 56, 68, 69, 194, 195, 206], "mechan": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "median": 16, "meet": [48, 69, 161, 169, 194], "mem": [178, 179, 193, 218], "member": [26, 40, 48], "membership": [0, 28, 59, 65], "memeffattent": [200, 211], "memori": [88, 89, 90, 91, 92, 93], "mendon": [164, 165, 166, 194], "mendon\u00e7a": 51, "mergard": 217, "mesh": [1, 125, 130], "mesh_sampl": 124, "messag": [0, 98, 107, 110], "meta": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "metadata": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 201, 212], "metadata_rout": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "metadatarequest": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "metaestim": 118, "metaestimatormixin": [17, 18, 20], "method": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 118, 121, 136, 143, 149, 150, 152, 153, 154, 159, 160, 161, 164, 166, 169, 170, 171, 172, 173, 174, 194, 195, 197, 198, 199, 203, 205, 206, 208, 209, 210, 214, 216, 217], "methodolog": 0, "metric": [16, 36, 41, 42, 46, 47, 49, 71, 72, 73, 74, 75, 80, 81, 113, 162, 199, 202, 205, 210, 213, 216], "metric_dict": [16, 42, 47, 49, 81, 142, 143, 144, 149, 150, 151, 152, 162, 197, 199, 202, 208, 210, 213], "michael": [37, 144, 194], "michel": 98, "might": [36, 44, 55, 67, 98, 199, 200, 201, 210, 211, 212], "min": [0, 30, 39, 51, 62, 63, 71, 72, 73, 74, 75, 80, 87, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 198, 199, 201, 202, 206, 209, 210, 212, 213], "min_inclus": 110, "min_samples_leaf": [51, 164, 165, 166], "min_val": 110, "mind": [199, 210, 217], "mine": [16, 35], "minh": 217, "minibatchkmean": [27, 32], "minim": [21, 26, 27, 37, 40, 48, 60, 69, 99, 161, 194], "minimum": [26, 28, 40, 46, 48, 56, 57, 98, 110, 120, 217], "minut": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "misclassif": [5, 7, 9, 10, 12, 16, 34, 44, 55, 116, 127, 130, 131, 132, 178, 194, 218, 219], "misclassifi": 0, "misclassification_loss": [44, 154], "miss": [0, 5, 6, 7, 8, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 64, 67, 95, 98, 103, 105, 107, 112, 113, 114, 115, 116, 117, 122, 195, 196, 206, 207, 219], "missing_label": [0, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 95, 98, 103, 107, 112, 113, 114, 115, 116, 117, 122, 125, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217], "missing_label1": 105, "missing_label2": 105, "missing_label_": [8, 13, 17, 18, 20], "mixtur": [15, 146, 147, 169, 170], "mixture_model": [15, 146, 147], "mixture_model_": 15, "mixturemodelclassifi": [1, 39, 146, 147], "mlp": [195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216], "mlpclassifi": [198, 209], "mnist": [196, 207], "mnist_784": [196, 207], "mode": 62, "model": [3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 34, 35, 36, 37, 44, 54, 55, 57, 62, 63, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 114, 131, 132, 140, 178, 189, 194, 196, 197, 198, 203, 204, 205, 207, 208, 209, 214, 215, 216, 217, 218, 219], "model_perform": [198, 209], "model_select": [196, 198, 199, 201, 207, 209, 210, 212], "modif": [196, 207], "modifi": 0, "modul": [0, 14, 94, 123, 196, 207, 217], "module__n_class": [196, 207], "modulelist": [200, 211], "moi": 21, "monbet": [51, 164, 165, 166, 194], "mongodb": [201, 212], "monitor": [0, 71, 72, 73, 74, 75], "monoton": [197, 208], "mont": [5, 7, 9, 10, 12, 16, 26, 34, 40, 44, 57, 116, 127, 130, 131, 132, 178, 194, 218, 219], "montecarlo": [1, 153, 154, 178, 194, 218], "more": [0, 21, 39, 65, 196, 207], "moreov": [67, 200, 211], "most": [0, 11, 27, 36, 42, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 194, 195, 197, 206, 208, 217], "mostli": 194, "moth": [36, 143, 194], "mu": [8, 91], "much": [196, 207], "multi": [5, 7, 9, 10, 12, 16, 47, 61, 81, 98, 116, 127, 130, 131, 132, 177, 178, 194, 217, 218, 219, 220], "multi_output": 98, "multiannot": [0, 1, 14, 24, 202, 213], "multiannotatorpoolquerystrategi": [0, 1, 63, 64, 125], "multiclass": [30, 34, 54, 55, 65, 138, 194], "multioutput": [8, 13], "multioutputregressor": [8, 13], "multipl": [0, 5, 6, 8, 12, 13, 15, 16, 17, 18, 20, 21, 57, 61, 62, 63, 64, 67, 113, 117, 119, 120, 125, 194, 202, 203, 204, 205, 213, 214, 215, 216], "multipli": [47, 54, 78, 81, 91, 109], "must": [0, 5, 12, 15, 16, 17, 18, 20, 21, 26, 27, 32, 35, 40, 41, 42, 47, 48, 49, 51, 63, 81, 99, 104, 111, 125, 126, 127, 129, 130], "mutual": 57, "myra": [157, 190, 194], "n": [0, 28, 34, 40, 44, 51, 55, 57, 78, 121, 160, 170, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 201, 208, 212], "n_annot": [3, 6, 21, 62, 63, 64, 112, 113, 117, 125, 130, 202, 213], "n_annotators_": [21, 62], "n_annotators_per_sampl": [64, 202, 213], "n_annotators_to_plot": [125, 129], "n_avl_annot": [0, 6, 63, 64], "n_candid": [0, 4, 6, 10, 11, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 125, 130], "n_candidate_sampl": 81, "n_centers_per_class": [199, 210], "n_channel": [196, 207], "n_class": [5, 12, 15, 16, 17, 18, 20, 21, 26, 30, 34, 40, 44, 46, 48, 49, 54, 55, 56, 57, 58, 59, 62, 65, 69, 72, 76, 89, 95, 101, 102, 103, 104, 112, 113, 117, 129, 156, 196, 199, 204, 207, 210, 215], "n_cluster": [27, 32, 46, 53], "n_cluster_param_nam": [27, 32, 46, 53], "n_compon": [15, 146, 147, 169, 170], "n_cycl": [0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 196, 198, 199, 200, 202, 206, 207, 209, 210, 211, 213, 217], "n_delta": 46, "n_dim": 106, "n_dropout_sampl": 32, "n_estim": [20, 26, 40, 48, 56, 57, 68, 69, 197, 208], "n_eval_sampl": [34, 36, 44, 198, 209], "n_featur": [0, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 108, 125, 126, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 198, 199, 206, 209, 210], "n_features_in_": 108, "n_fit_sampl": 67, "n_fold": [199, 210], "n_free_paramet": 96, "n_gsx_sampl": 41, "n_indic": 106, "n_integration_sampl": [143, 152, 197, 208], "n_iter": [197, 208], "n_job": [45, 155], "n_k": 51, "n_mc_sampl": [26, 40, 57], "n_member": [26, 40, 48], "n_neighbor": 16, "n_new_cand": 60, "n_output": [5, 8, 12, 13, 17, 18, 21, 95, 114, 115, 116, 122], "n_positional_paramet": 96, "n_predict_sampl": 67, "n_queried_indic": [4, 11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93], "n_queried_sampl": 87, "n_redund": [195, 206], "n_rep": [199, 200, 210, 211], "n_sampl": [0, 3, 4, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 108, 112, 113, 114, 115, 116, 117, 122, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 199, 202, 203, 204, 205, 207, 209, 210, 213, 214, 215, 216, 217], "n_samples_fit": [8, 13], "n_samples_x": 8, "n_seen_sampl": 87, "n_split": [198, 199, 209, 210], "n_sub_sampl": 67, "n_sub_set": [196, 207], "n_target": [8, 13], "n_test_sampl": [5, 15, 16], "n_train": 35, "na": 98, "naiv": 0, "name": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 107, 110, 111, 118, 199, 200, 210, 211], "nan": [0, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 95, 98, 103, 105, 107, 112, 113, 114, 115, 116, 117, 121, 122, 126, 195, 197, 198, 199, 200, 201, 206, 208, 209, 210, 211, 212], "nanmean": 170, "nat": [28, 136, 194], "natur": [169, 194], "nbextens": [198, 209], "ncg": 21, "ncol": [196, 201, 207, 212], "nd": [98, 121], "ndarrai": [3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 101, 104, 106, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 200, 211], "ndim": [34, 44, 47, 54, 98, 99, 121, 125, 129, 130], "ndimag": [203, 204, 205, 214, 215, 216], "nearest": [16, 28, 32, 53, 80], "nearest_neighbors_dict": 28, "nearestneighbor": [28, 30], "necessari": [0, 67, 198, 200, 203, 204, 205, 209, 211, 214, 215, 216], "necessarili": [0, 6, 10, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 43, 44, 45, 48, 50, 51, 52, 54, 55, 63, 64, 125, 130], "need": [0, 23, 71, 72, 73, 74, 75, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "neg": [5, 8, 13, 15, 16, 104, 113], "neighbor": [28, 30, 53, 80], "neighbour": 16, "neil": [134, 148, 194], "nelder": 21, "nest": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "nestedtensorblock": [200, 211], "net": [196, 207], "netw": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 181, 182, 183, 184, 185, 187, 188, 192, 194], "network": [29, 137, 194], "neural": [26, 29, 46, 49, 57, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 134, 137, 156, 162, 181, 182, 183, 184, 185, 187, 188, 192, 194], "neural_network": [198, 209], "neuralnetclassifi": [196, 207], "new": [0, 34, 44, 55, 60, 67, 80, 95, 100, 109, 128, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 199, 200, 201, 203, 204, 205, 206, 210, 211, 212, 214, 215, 216], "newest": 128, "newli": [67, 100], "newton": 21, "next": [32, 38, 39, 41, 42, 47, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 196, 197, 198, 201, 203, 204, 205, 207, 208, 209, 212, 214, 215, 216], "nguyen": [33, 141, 194], "ni": [201, 212], "nichola": [153, 154, 194], "nickernelregressor": [0, 142, 143, 144, 149, 150, 151, 152, 197, 208], "nigami": [48, 56, 159, 194], "nikolao": [136, 177, 194], "nilsback": [200, 211], "nirschl": [32, 140, 194], "nn": [196, 207], "nn_param": 30, "no_grad": [196, 200, 207, 211], "node": 0, "nois": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 196, 197, 207, 208], "non": [5, 15, 16, 98, 104, 201, 212], "none": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 156, 157, 159, 160, 161, 162, 163, 168, 169, 170, 172, 173, 174, 175, 176, 177, 196, 198, 200, 207, 209, 211], "nonetheless": 63, "norm": [35, 197, 200, 208, 211], "norm1": [200, 211], "norm2": [200, 211], "norm_rv": [197, 208], "normal": [21, 55, 87, 91, 113, 177, 200, 211], "normalize_text": [201, 212], "note": [5, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 45, 62, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "notebook": [131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "novel": [30, 43, 138, 152, 194], "now": [0, 196, 197, 205, 207, 208, 216], "np": [0, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 101, 103, 104, 105, 106, 107, 109, 112, 113, 114, 115, 116, 117, 121, 122, 124, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "npy": [200, 211], "nrow": [196, 207], "num": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 202, 208, 213], "num_annot_error": [201, 212], "num_annotation_error": [201, 212], "num_total_annot": [201, 212], "num_work": [200, 211], "number": [0, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 76, 78, 79, 80, 82, 84, 86, 87, 89, 96, 98, 99, 101, 102, 104, 105, 107, 108, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 126, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216], "numer": [8, 13, 21, 48, 98, 101, 125, 126, 130], "numpi": [3, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 95, 101, 104, 112, 113, 116, 117, 119, 120, 122, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "n\u00fcrnberger": [48, 68], "o": [16, 29, 46, 98, 164, 165, 166, 194], "obj": [108, 111], "object": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 100, 108, 110, 111, 118, 200, 203, 204, 205, 211, 214, 215, 216], "observ": [5, 15, 16, 58, 78, 79, 84, 86, 113, 197, 202, 208, 213], "obtain": [16, 86, 164, 165, 166, 196, 202, 207, 213, 217], "occur": 30, "ofer": [156, 194], "off": [43, 63, 152, 194], "offer": [26, 40, 48, 201, 212], "offici": 0, "often": [194, 217], "ok": [198, 209], "old": 43, "old_is_lbld": [197, 208], "oliv": [36, 143, 194], "omnisci": [202, 213], "on_click": [201, 212], "onc": [0, 67, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 201, 212], "one": [0, 6, 10, 20, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 63, 64, 67, 111, 121, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216], "ones": [0, 6, 10, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 125, 129, 130, 198, 209], "onli": [0, 4, 5, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 27, 28, 31, 32, 33, 41, 45, 46, 48, 51, 54, 60, 62, 65, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 103, 104, 125, 129, 130, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217], "onlin": [71, 72, 73, 74, 75, 181, 182, 183, 184, 194], "only_label": 18, "only_mandatori": 97, "only_non_neg": 104, "onto": 81, "oolbox": 217, "open": [127, 201, 212], "opper": [48, 158, 159, 160, 161, 194], "opposit": [53, 168, 194], "optim": [21, 34, 44, 54, 67, 153, 154, 194, 196, 207], "optimis": 51, "optimizer__momentum": [196, 207], "optimizer__weight_decai": [196, 207], "option": [0, 5, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 37, 39, 41, 53, 56, 62, 64, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 198, 199, 209, 210], "oquab": [200, 211], "oracl": [195, 199, 206, 210], "orang": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "ord": 35, "ordens": 194, "order": [0, 5, 12, 15, 16, 17, 18, 20, 21, 67, 71, 72, 73, 74, 75, 98, 113], "orient": 217, "origin": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 51, 52, 62, 95, 98, 196, 207], "ornon": 112, "other": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 50, 62, 80, 103, 105, 113, 125, 130, 195, 196, 198, 201, 203, 204, 205, 206, 207, 209, 212, 214, 215, 216, 217], "otherwis": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 26, 34, 40, 44, 48, 62, 63, 109, 110, 116, 122, 125, 126, 129, 130, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 201, 212], "our": [0, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217], "out": [0, 196, 203, 204, 205, 207, 214, 215, 216], "out_featur": [200, 211], "outcom": [34, 44, 55], "output": [0, 7, 8, 9, 10, 13, 15, 25, 26, 27, 28, 32, 35, 36, 37, 40, 48, 114, 131, 132, 142, 144, 149, 150, 151, 152, 158, 164, 165, 166, 178, 194, 198, 201, 209, 212, 218, 219], "output_box": [201, 212], "output_plot": [201, 212], "output_sampl": [201, 212], "output_stat": [201, 212], "outsourc": 0, "over": [21, 64, 71, 72, 73, 74, 75, 80, 87, 113, 124, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "overal": [194, 201, 212], "overlai": [133, 134, 135, 140, 145, 146], "overview": [1, 197, 208], "overwrit": [198, 209], "overwritten": [0, 18], "ozan": [137, 194], "p": [0, 5, 12, 15, 16, 17, 18, 20, 21, 34, 48, 51, 54, 55, 62, 63, 65, 67, 69, 98, 161, 194, 196, 200, 202, 207, 211, 213], "p_annot": [0, 3, 21, 62], "packag": [0, 2, 24, 61, 70, 85, 97, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219], "pad": [196, 207], "page": [0, 27, 28, 30, 33, 35, 36, 37, 38, 47, 48, 51, 53, 54, 56, 59, 62, 63, 65, 68, 69, 71, 72, 73, 74, 75, 80, 81, 86, 87, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 217], "pair": [0, 6, 34, 44, 46, 55, 63, 64, 67, 202, 213], "pairwis": [16, 47, 49, 71, 72, 73, 74, 75, 80, 81], "pairwise_dist": [41, 42, 46, 71, 72, 73, 74, 75, 80], "pairwise_kernel": [16, 47, 49, 81], "pal": [205, 216], "panda": [196, 207], "pandoc": 0, "papanikolopoulo": [34, 55, 177, 194], "paper": [0, 36, 217, 220], "paradigm": 0, "parallel": [5, 7, 9, 10, 12, 16, 45, 47, 116, 127, 130, 131, 132, 178, 194, 218, 219], "parallel_dict": 45, "parallel_utility_estimation_wrapp": [155, 178, 218], "parallelutilityestimationwrapp": [1, 155, 178, 194, 218], "param": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "paramet": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 198, 201, 209, 212], "parametr": 16, "pars": [169, 194], "part": [0, 52, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 203, 204, 205, 206, 207, 214, 215, 216], "partial": [0, 17, 18, 67], "partial_fit": [17, 18, 34, 44, 55, 67, 205, 216], "parzen": [16, 33, 217], "parzenwindowclassifi": [0, 1, 33, 67, 133, 135, 136, 137, 138, 139, 140, 141, 145, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 202, 203, 204, 210, 213, 214, 215, 217], "pascal": 217, "pass": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 32, 35, 40, 41, 42, 45, 46, 47, 48, 49, 52, 53, 62, 64, 67, 81, 97, 98, 111, 117, 119, 120, 125, 130, 198, 201, 202, 209, 212, 213], "passo": 98, "past": [198, 209], "patch_emb": [200, 211], "patchemb": [200, 211], "pattern": [48, 68, 160, 162, 177, 194], "paul": [170, 194], "paulo": [164, 165, 166, 194], "pd": 98, "pedregosa": 98, "pep": 0, "per": [0, 5, 15, 16, 17, 18, 20, 62, 112, 196, 201, 202, 207, 212, 213], "percent": 92, "perfect": [201, 212], "perform": [0, 3, 21, 26, 40, 47, 48, 62, 63, 64, 98, 195, 196, 198, 201, 203, 204, 205, 206, 207, 209, 212, 214, 215, 216, 217], "period": [5, 9, 11, 12, 16, 77, 128, 129, 131, 180, 193, 194, 218, 219], "periodic_sampl": [186, 193, 218], "periodicsampl": [1, 186, 193, 194, 203, 205, 214, 216, 218], "perrot": 98, "pf": 65, "pfahring": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 185, 187, 188, 189, 192, 194], "pham": 217, "philosophi": 0, "pinar": [170, 194], "pip": [0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "pipe": [198, 209], "pipelin": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 198, 209], "pipenv": 0, "pl": [201, 212], "placehold": 0, "pleas": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 200, 211, 217], "plot": [0, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 218], "plot_annot": 125, "plot_annotator_util": [1, 202, 213], "plot_cand_highlight": 129, "plot_contour_for_sampl": [1, 133, 134, 135, 140, 145, 146, 170], "plot_decision_boundari": [1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 202, 206, 213], "plot_step": [128, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "plot_stream_decision_boundari": [1, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "plot_stream_training_data": [1, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "plot_util": [1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 195, 206], "plt": [126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216], "plu": [26, 40, 48], "point": [26, 40, 57, 129, 164, 165, 166, 195, 196, 199, 206, 207, 210, 217], "poli": [16, 49], "poll": [201, 212], "poloni": [51, 164, 165, 166, 194], "polynomi": [16, 49], "polynomialfeatur": 35, "pool": [1, 6, 7, 10, 81, 86, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 198, 200, 201, 209, 211, 212, 218, 220], "poolquerystrategi": [1, 6, 10], "pop": [198, 209], "popul": 113, "porikli": [34, 55, 177, 194], "pos_arg": [197, 208], "posit": [77, 82, 113, 128], "possibl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 111, 125, 130, 196, 207], "possibli": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 125, 129, 130, 198, 209], "posterior": [26, 27, 40], "potenti": [43, 67, 217], "powel": 21, "power": [48, 68, 160, 194], "pp": [34, 44, 55], "prabhu": [27, 135, 194], "practic": [195, 199, 200, 206, 210, 211], "pre": [67, 200, 203, 204, 205, 211, 214, 215, 216], "precis": [5, 7, 9, 10, 12, 16, 54, 59, 116, 127, 130, 131, 132, 178, 194, 218, 219], "precomput": [8, 13, 16, 33, 46, 49, 67, 201, 212], "pred": 113, "pred_list": 128, "pred_param": 67, "predict": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 28, 30, 32, 34, 35, 36, 37, 40, 43, 44, 48, 51, 54, 55, 65, 67, 68, 69, 76, 78, 79, 83, 84, 113, 128, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 203, 204, 205, 208, 214, 215, 216, 217], "predict_annotator_perf": [3, 21, 62], "predict_default_param": 0, "predict_freq": [5, 15, 16, 18, 47, 67, 81, 157], "predict_freq_kwarg": 18, "predict_kwarg": [17, 18], "predict_proba": [5, 12, 15, 16, 17, 18, 20, 21, 25, 27, 28, 31, 34, 38, 44, 47, 54, 55, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 127], "predict_proba_kwarg": [17, 18], "predict_target_distribut": 8, "prediction_lin": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "predictions_list": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "prefer": [40, 57, 64, 134, 148, 194], "prepar": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "preprint": 217, "preprints202103": 217, "preproc": 0, "preprocess": [0, 35, 196, 198, 207, 209], "prequenti": [203, 204, 205, 214, 215, 216], "present": [114, 116, 122, 201, 212], "preserv": 98, "press": [198, 201, 209, 212], "pretrain": [200, 211], "prettenhof": 98, "previou": [0, 198, 203, 204, 205, 209, 214, 215, 216], "previous": [64, 200, 211], "primarili": 64, "print": [107, 110, 195, 196, 197, 201, 203, 204, 205, 206, 207, 208, 212, 214, 215, 216], "prior": [0, 5, 15, 16, 21, 47, 58, 81, 101, 197, 198, 202, 208, 209, 213], "proba": [25, 27, 28, 32, 56, 57, 59, 65], "probabilist": [0, 1, 5, 7, 8, 9, 10, 11, 12, 16, 54, 65, 81, 86, 116, 127, 128, 129, 130, 131, 132, 155, 178, 180, 193, 194, 199, 202, 204, 210, 213, 215, 218, 219], "probabilistic_active_learning_in_datastream": [190, 193, 218], "probabilisticregressor": [0, 1, 36, 37, 43], "probability_coverage_": [156, 178, 218], "probabl": [0, 5, 7, 9, 10, 12, 15, 16, 17, 18, 20, 21, 26, 27, 28, 36, 38, 40, 43, 46, 47, 48, 56, 57, 59, 62, 65, 67, 76, 78, 79, 81, 82, 84, 89, 90, 92, 116, 121, 127, 130, 131, 132, 178, 194, 218, 219], "probcov": [1, 5, 7, 9, 10, 12, 16, 116, 127, 130, 131, 132, 178, 194, 200, 211, 218, 219], "problem": [0, 21, 29, 31, 202, 213], "proceed": 16, "process": [26, 28, 46, 49, 57, 64, 108, 134, 136, 156, 162, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 200, 201, 202, 204, 211, 212, 213, 215, 217], "process_batch_annotation_ui": [201, 212], "produc": [198, 201, 209, 212], "product": 109, "program": [71, 72, 73, 74, 75, 80, 87, 189, 194], "progressbar": [198, 209], "proj": [200, 211], "proj_drop": [200, 211], "project": [0, 217], "prone": [0, 63], "proper": [199, 210], "proport": 121, "propos": [36, 71, 72, 73, 74, 75, 80, 83, 86, 87], "provid": [0, 3, 4, 5, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 62, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 108, 194, 197, 198, 200, 201, 202, 203, 204, 205, 208, 209, 211, 212, 213, 214, 215, 216, 217], "proxi": [0, 15], "public": 0, "purpos": [32, 195, 196, 199, 206, 207, 210], "push": 0, "pwc": 16, "py": [0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 209, 218], "pyplot": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216], "pytest": 0, "python": [0, 30, 98, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 207, 217], "pytorch": [196, 207], "q": [125, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 217], "qat": [196, 207], "qbc": [5, 7, 9, 10, 12, 13, 16, 48, 114, 116, 127, 130, 131, 132, 178, 194, 218, 219], "qkv": [200, 211], "qs_": [197, 208], "qs_class": 0, "qs_dict": [196, 207], "qs_name": [196, 199, 200, 207, 210, 211], "qualiti": 0, "quantil": [81, 86], "queri": [4, 5, 6, 7, 9, 10, 11, 12, 13, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 100, 114, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 201, 202, 207, 208, 209, 212, 213, 218, 219, 220], "queried_indic": [0, 4, 11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 129, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 205, 214, 216, 217], "query_batch_s": [200, 204, 211, 215], "query_by_util": [4, 86, 87, 88, 89, 90, 91, 92, 93], "query_by_utility_param": 0, "query_default_params_clf": 0, "query_default_params_reg": 0, "query_dict": [198, 209], "query_idx": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 196, 199, 200, 202, 206, 207, 210, 211, 213, 217], "query_index": [201, 212], "query_indic": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 201, 212], "query_kwarg": [45, 52, 64], "query_param": 0, "query_strategi": [0, 45, 52, 64, 155, 167, 198, 203, 204, 205, 209, 214, 215, 216], "query_strategy_factory_funct": [199, 200, 210, 211], "query_strategy_nam": [199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "query_strategy_with_fix": [181, 193, 218], "query_strategy_with_random": [183, 193, 218], "query_strategy_with_random_sampl": [182, 193, 218], "query_strategy_with_vari": [184, 193, 218], "querybycommitte": [1, 56, 68, 69, 158, 159, 160, 161, 178, 194, 196, 197, 207, 208, 218], "querying_informative_and_representative_examples_": [162, 178, 218], "querystrategi": [0, 1, 7, 11, 198, 209], "question": [0, 86], "quiet": [197, 208], "quir": [1, 162, 178, 194, 218], "r": [6, 8, 13, 32, 48, 49, 50, 51, 63, 64, 98, 114, 115, 116, 122, 134, 148, 194, 201, 212], "r2": 0, "r2_score": [8, 13], "radii": 46, "rais": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 23, 34, 46, 47, 62, 81, 98, 105, 106, 109, 110, 125, 130, 198, 209], "rajan": [140, 194], "rand": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "rand_argmax": 1, "rand_argmin": 1, "randint": [199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "random": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 109, 114, 116, 117, 119, 120, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 184, 185, 186, 188, 189, 190, 192, 193, 194, 196, 201, 202, 207, 212, 213, 218, 219], "random_sampl": [163, 178, 218], "random_st": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 109, 117, 119, 120, 121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "randomaffin": [196, 207], "randombudgetmanag": [1, 71, 73, 74, 75], "randomli": [8, 52, 64, 79, 82, 90, 92, 119, 120, 121], "randomperspect": [196, 207], "randomsampl": [0, 1, 82, 163, 178, 194, 196, 199, 200, 201, 203, 204, 205, 207, 210, 211, 212, 214, 215, 216, 218], "randomst": [0, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 109, 117, 119, 120, 121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 200, 201, 203, 204, 205, 210, 211, 212, 214, 215, 216], "randomvariableuncertainti": [1, 74, 187, 193, 194, 218], "randomvariableuncertaintybudgetmanag": [1, 71, 78, 87], "rang": [35, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217], "rank": [63, 64], "rate": [32, 91, 92, 93], "ratio": [4, 5, 7, 9, 10, 11, 12, 16, 48, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 100, 116, 127, 130, 131, 132, 178, 194, 218, 219], "raykar": 21, "rbf": [16, 47, 49, 81, 162, 199, 202, 205, 210, 213, 216], "rcparam": [136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 210, 211, 213, 214, 216], "re": [21, 98, 124, 125, 126, 127, 128, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 209], "reach": [0, 71, 72, 73, 74, 75, 195, 206], "real": [201, 212], "realiz": [199, 210], "recogn": [196, 207], "recognit": [48, 54, 59, 68, 160, 171, 177, 194], "recommend": [0, 20], "record": [142, 143, 144, 149, 150, 151, 152, 158, 199, 210], "red": [197, 208], "redefin": 31, "reduc": [26, 40], "reduct": [0, 7, 8, 9, 10, 13, 34, 37, 44, 58, 114, 131, 132, 153, 154, 178, 194, 218, 219], "redund": 39, "ref": 0, "refer": [0, 6, 10, 16, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 97, 98, 113, 118, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 200, 211, 217], "referenc": 36, "refin": 21, "refit": [15, 31, 203, 205, 214, 216], "reflect": [30, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "reg": [35, 36, 37, 41, 43, 51, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 198, 208, 209], "regard": [0, 3, 5, 12, 15, 16, 17, 18, 20, 21, 196, 207], "regardless": [77, 82], "regress": [0, 7, 8, 9, 10, 13, 21, 30, 33, 35, 36, 41, 42, 43, 48, 51, 98, 114, 131, 132, 142, 143, 149, 150, 151, 158, 178, 194, 195, 206, 217, 218, 219, 220], "regression_based_kullback_leibler_divergence_maxim": [152, 178, 218], "regression_tree_based_active_learning_": [164, 165, 166, 178, 218], "regressiontreebased": [1, 164, 165, 166, 178, 194, 218], "regressor": [8, 13, 35, 36, 37, 43, 51, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "regressormixin": [13, 30], "regul": 39, "regular": 21, "reitmaier": [39, 146, 147, 194], "reject": 98, "rel": [87, 91, 92, 93, 199, 210, 217], "releas": [0, 217], "relev": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 31, 33, 34, 38, 44, 48, 55, 62, 195, 206], "reli": [62, 63, 197, 208], "relu": [196, 207], "remain": [125, 130], "remov": [52, 119, 120, 201, 212], "rendom": 91, "reorder": 113, "repeat": [67, 199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "repetit": [199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "replac": [4, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 126, 201, 212], "replace_nan": [125, 126, 130, 133, 134, 135, 140, 145, 146, 148, 162, 169, 170], "repo": [201, 212], "report": [172, 173, 174, 194, 196, 207], "repositori": 0, "repres": [0, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 64, 67, 71, 72, 73, 74, 75, 80, 95, 98, 99, 103, 105, 107, 108, 112, 113, 114, 115, 116, 117, 122, 127, 130, 131, 132, 133, 137, 178, 203, 204, 205, 214, 215, 216, 217, 218, 219], "represent": [25, 27, 28, 32, 200, 211], "reproduc": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 117, 119, 120, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 200, 210, 211], "request": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62, 198, 209], "requir": [0, 41, 196, 198, 207, 209, 217], "requirements_extra": 0, "research": [200, 211, 217], "reset": [108, 201, 212], "reshap": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217], "reshaped_result": [199, 200, 210, 211], "residu": [8, 13], "resiz": [200, 211], "resolut": [124, 125, 126, 127, 128, 130], "resolv": 0, "resort": [196, 207], "resp": 67, "respect": [6, 21, 32, 35, 63, 64, 87, 91, 92, 93, 201, 212], "respons": 15, "restart": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "restrict": 51, "result": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 67, 77, 98, 117, 119, 120, 133, 134, 135, 140, 145, 146, 197, 201, 202, 203, 204, 205, 208, 212, 213, 214, 215, 216, 217], "retain": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "retrain": [67, 195, 198, 206, 209], "retriev": [133, 134, 135, 140, 145, 146], "return": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 104, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216], "return_entropi": 8, "return_std": [8, 197, 208], "return_util": [0, 6, 10, 11, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 121, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 170, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 203, 205, 208, 214, 216], "return_x_i": [196, 207], "revisit": [32, 140, 194], "rie": [164, 165, 166, 194], "right": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 199, 200, 203, 205, 207, 208, 210, 211, 214, 216], "risk": [34, 44, 55], "river": [217, 220], "river2sklclassifi": [205, 216], "rn": [143, 194], "rnberger": [160, 194], "rng": [202, 213], "robert": [158, 194], "roberta": [164, 165, 166, 194], "robust": [200, 211], "rodner": [36, 143, 194], "roghman": 217, "roi": [34, 44, 153, 154, 194], "rong": [162, 194], "root": [0, 200, 211], "root_dir": [200, 211], "ross": [158, 194], "rotat": [196, 207], "rouko": [169, 194], "round": [39, 196, 207], "rout": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "row": [21, 68, 69, 98, 108, 113, 121], "rowland": [48, 158, 194], "rt": [7, 9, 10, 13, 51, 114, 131, 132, 178, 194, 218, 219], "rule": 20, "run": [0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "runner": [181, 182, 183], "runtim": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "rv": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "rv_frozen": 8, "sa_q": [202, 213], "sadek": 16, "saenko": [27, 135, 194], "sake": [203, 205, 214, 216], "salim": [169, 194], "same": [0, 5, 12, 15, 16, 17, 18, 20, 21, 52, 63, 67, 71, 72, 73, 74, 75, 119, 120, 197, 208], "samir": [152, 194], "sampl": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 112, 113, 114, 116, 117, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 170, 171, 175, 178, 180, 181, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "sample_box": [201, 212], "sample_i": [8, 48, 158], "sample_predictions_dict": [26, 40, 48, 158, 159, 160, 161], "sample_predictions_method_nam": [26, 40, 48, 158, 159, 160, 161], "sample_proba": [5, 15, 16, 26, 40, 48, 159, 160, 161], "sample_weight": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 47, 48, 51, 54, 55, 62, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 98], "sample_weight_cand": 98, "sample_weight_candid": [34, 44], "sample_weight_ev": [34, 44], "sampled_indic": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216, 217], "sampling_wrapp": [167, 178, 218], "sandra": [145, 194], "sandrock": 217, "sanket": [140, 194], "sanmin": [181, 182, 183, 184, 194], "satisfi": 46, "satur": [202, 213], "savares": [29, 137, 194], "save": [0, 18, 133, 134, 135, 140, 145, 146, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 200, 201, 205, 211, 212, 216], "scalabl": [34, 55], "scalar": [5, 6, 7, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 64, 67, 95, 98, 103, 110, 112, 113, 117, 127, 129], "scale": [196, 207], "scaler": [198, 209], "scatter": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 197, 199, 202, 203, 204, 205, 206, 208, 210, 213, 214, 215, 216], "scenario": 67, "schneider": [62, 63], "sci": [33, 39, 41, 42, 141, 146, 147, 149, 150, 151, 194], "scienc": [54, 65, 172, 173, 174, 194], "scikit": [0, 5, 6, 7, 8, 9, 10, 12, 13, 17, 98, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220], "scipi": [8, 21, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 203, 204, 205, 208, 214, 215, 216], "score": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 44, 55, 56, 57, 59, 65, 68, 195, 196, 198, 199, 200, 201, 206, 207, 209, 210, 211, 212], "score_id": [201, 212], "score_sampl": [169, 170], "script": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "sean": [161, 194], "search": [0, 217], "sebastian": [158, 159, 160, 161, 194], "second": [27, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 200, 206, 211], "section": 217, "see": [5, 6, 8, 12, 13, 15, 16, 17, 18, 20, 21, 36, 37, 43, 62, 63, 64, 65, 76, 78, 79, 81, 84, 89, 90, 91, 92, 93, 97, 100, 126, 195, 201, 206, 212], "seed": [0, 109, 196, 202, 207, 213], "seed_multipli": 109, "seek": [26, 40], "seem": [197, 208], "seen": [11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87], "seidl": [38, 145, 194], "select": [0, 6, 7, 9, 10, 11, 13, 16, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 113, 114, 119, 120, 121, 131, 132, 146, 147, 175, 178, 194, 195, 196, 197, 198, 200, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 216, 218, 219], "self": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 196, 198, 207, 209, 217, 220], "semi": [198, 209], "send": [198, 209], "sener": [29, 137, 194], "sensit": [12, 30, 34, 54, 55, 65, 138, 176, 194], "separ": [31, 199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "sequenc": [0, 67], "sequenti": 0, "serena": [140, 194], "session": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "set": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 106, 107, 108, 116, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 164, 165, 166, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 200, 201, 209, 211, 212, 217, 218, 219], "set_base_clf": 67, "set_config": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "set_dir": [200, 211], "set_fit_request": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "set_param": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "set_partial_fit_request": [17, 18], "set_predict_request": 8, "set_score_request": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21], "set_titl": [133, 134, 135, 140, 145, 146, 196, 197, 202, 207, 208, 213], "set_xlabel": [201, 212], "set_xlim": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 201, 212], "set_ylabel": [201, 212], "set_ylim": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "settl": [54, 65, 172, 173, 174, 194], "setup": [196, 207], "seung": [48, 158, 159, 160, 161, 194], "sever": 0, "sgd": [196, 207], "shaheen": [43, 152, 194], "shai": [139, 194], "shalev": [31, 139, 194], "shan": [181, 182, 183, 184, 194], "shannon": [26, 40], "shape": [0, 3, 4, 5, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 101, 102, 103, 104, 106, 108, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 198, 199, 200, 202, 204, 206, 209, 210, 211, 213, 215, 217], "shape_clf": [198, 209], "shape_queri": [198, 209], "share": [0, 197, 208], "sharex": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "shen": [54, 59, 171, 194], "sheng": [162, 194], "shi": [54, 59, 171, 194], "short": [200, 211], "should": [0, 5, 8, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 48, 51, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 95, 98, 118, 128, 199, 200, 201, 203, 204, 205, 210, 211, 212, 214, 215, 216], "show": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "show_correct_class": [201, 212], "showcas": [201, 203, 205, 212, 214, 216], "shown": [195, 201, 206, 212, 217], "shuffl": [117, 119, 120, 199, 200, 201, 203, 204, 205, 210, 211, 212, 214, 215, 216], "shwartz": [31, 139, 194], "sick": [39, 146, 147, 194, 217], "sigkdd": [62, 63], "sigma": [196, 207], "sigmoid": [16, 49], "signatur": 118, "signific": [195, 206], "silvio": [137, 194], "similar": [0, 15, 28, 217], "similarli": 91, "simpl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 145, 194, 198, 209, 217, 220], "simple_batch": [0, 1, 170], "simpli": 67, "simplic": [196, 200, 203, 205, 207, 211, 214, 216], "simplifi": [67, 199, 200, 201, 203, 204, 205, 210, 211, 212, 214, 215, 216], "simul": [34, 44, 55, 67], "sinc": [197, 203, 204, 205, 208, 214, 215, 216], "singl": [10, 45, 52, 64, 129, 130, 194, 199, 200, 201, 202, 203, 204, 205, 210, 211, 212, 213, 214, 215, 216], "singleannotatorpoolquerystrategi": [0, 1, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 64, 130], "singleannotatorstreambasedquerystrategi": 0, "singleannotatorstreamquerystrategi": [0, 1, 71, 76, 77, 78, 79, 80, 81, 82, 83, 84], "singleannotatorwrapp": [0, 1, 202, 213], "singleannotwrapp": [202, 213], "singleton": 109, "size": [18, 35, 51, 71, 72, 73, 74, 75, 80, 88, 89, 90, 91, 92, 93, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 216], "skactiveml": [0, 1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "skactiveml2021": 217, "skactivemlclassifi": [0, 1, 5, 17, 18, 20, 21, 25, 26, 27, 28, 31, 32, 34, 38, 40, 44, 47, 48, 54, 55, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 198, 209], "skactivemlregressor": [0, 1, 8, 35, 48, 51], "skactivml": 0, "skip": [200, 211], "skip_interact": [201, 212], "sklearn": [0, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 27, 28, 30, 32, 33, 35, 36, 41, 42, 46, 47, 48, 49, 51, 53, 62, 71, 72, 73, 74, 75, 80, 81, 98, 113, 118, 127, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "sklearn_check_n_featur": 108, "sklearnclassifi": [1, 134, 148, 169, 170, 195, 196, 198, 199, 200, 201, 205, 206, 207, 209, 210, 211, 212, 216, 217], "sklearnregressor": [158, 164, 165, 166, 197, 208], "skorch": [217, 220], "sleep": [201, 212], "slide": [18, 80, 203, 204, 205, 214, 215, 216], "slidingwindowclassifi": [1, 205, 216], "slowli": [197, 208], "slsqp": 21, "small": [197, 208], "smaller": [21, 88], "smallest": [200, 211], "smooth": [164, 165, 166, 204, 215], "snippet": 217, "so": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 195, 197, 198, 201, 206, 208, 209, 212], "soft": [20, 196, 207], "softmax": [196, 207], "solut": 0, "solv": 31, "solver": [21, 198, 209], "solver_dict": 21, "some": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 34, 44, 55, 62, 98, 197, 198, 203, 204, 205, 208, 209, 214, 215, 216], "someth": [0, 67], "sompolinski": [48, 158, 159, 160, 161, 194], "soon": 77, "sort": [113, 164, 165, 166, 197, 198, 208, 209], "sort_mask": [164, 165, 166], "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 207], "space": [7, 8, 9, 10, 13, 28, 30, 36, 38, 41, 42, 46, 77, 82, 114, 131, 132, 178, 194, 197, 198, 203, 204, 205, 208, 209, 214, 215, 216, 218, 219], "spars": [4, 11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98], "spatial": [81, 86], "specif": [0, 83, 111, 200, 211], "specifi": [0, 4, 6, 11, 21, 41, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 124, 195, 198, 202, 203, 204, 205, 206, 209, 213, 214, 215, 216], "speed": 67, "speedup": 46, "spent": 88, "sphinx": [0, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "sphinx_gallery_exampl": [178, 179, 193], "sphinx_gallery_examples_jupyt": 131, "sphinx_gallery_examples_python": 131, "spike": [197, 208], "spiliopoul": [47, 81, 86, 157, 190, 194], "split": [1, 5, 9, 11, 12, 16, 83, 92, 128, 129, 131, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 203, 205, 207, 210, 211, 212, 214, 216, 217, 218, 219], "splitbudgetmanag": [1, 79, 90], "squar": [8, 13], "stai": [52, 86], "stand": 127, "standard": [0, 8, 29, 54, 91, 98, 196, 199, 200, 207, 210, 211], "standardscal": [196, 198, 207, 209], "standart": [87, 91], "start": [196, 207, 217, 220], "startegi": [11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "startswith": [198, 209], "stat": [8, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 201, 208, 212], "state": [0, 11, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 109, 121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "statist": [16, 37, 144, 169, 194], "stats_box": [201, 212], "std": [8, 197, 199, 200, 208, 210, 211], "steep": [197, 208], "step": [0, 21, 44, 55, 88, 89, 90, 91, 92, 93, 128, 196, 198, 200, 207, 209, 211], "stop": [21, 44, 55], "store": [0, 98, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 199, 200, 203, 204, 205, 206, 210, 211, 214, 215, 216, 217], "str": [5, 6, 8, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 32, 40, 41, 42, 47, 48, 49, 51, 62, 81, 96, 98, 105, 107, 110, 111, 114, 115, 116, 118, 121, 122, 127, 128, 129, 198, 200, 209, 211], "straightforward": 217, "strategi": [4, 5, 6, 7, 9, 10, 11, 12, 16, 17, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 114, 121, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 201, 202, 207, 208, 209, 212, 213, 218, 219, 220], "stratifi": [199, 210], "stratifiedkfold": [199, 210], "stream": [1, 4, 5, 9, 11, 12, 16, 128, 129, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 218, 219, 220], "stream_batch_s": [204, 215], "stream_length": [203, 204, 205, 214, 215, 216], "stream_random_sampl": [191, 193, 218], "streamdensitybased": [1, 71, 72, 73, 74, 75, 189, 193, 194, 203, 205, 214, 216, 218], "streamprobabilist": [1, 190, 193, 194, 203, 205, 214, 216, 218], "streamrandomsampl": [1, 191, 193, 194, 203, 205, 214, 216, 218], "strictli": 82, "stride": [200, 211], "string": [0, 6, 7, 12, 13, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 64, 67, 95, 98, 102, 103, 112, 113, 117], "strip": [201, 212], "strong": [197, 208], "strongli": [196, 207], "structur": [0, 34, 119, 120], "student": [62, 63], "studi": [200, 211, 217, 220], "style": [0, 98], "sub": [0, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 21, 52, 54, 62, 116, 127, 130, 131, 132, 178, 194, 218, 219], "submissionwidgetmixin": [198, 209], "subobject": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "subpackag": 0, "subplot": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 201, 202, 207, 208, 212, 213], "subsampl": [52, 201, 212], "subsamplingwrapp": [1, 167, 178, 194, 218], "subsequ": [200, 211], "subset": [67, 113, 201, 212], "subset_arxiv_papers_with_embed": [201, 212], "subset_s": [201, 212], "substitut": 217, "subtract": [44, 55], "subtract_curr": [44, 55, 175, 176, 177], "success": 0, "suffici": [4, 71, 72, 73, 74, 75, 80, 86, 87, 88, 89, 90, 91, 92, 93], "suffix": [203, 204, 205, 214, 215, 216], "suit": [53, 168, 194], "sum": [5, 8, 13, 15, 16, 20, 55, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 201, 209, 212], "sumit": [34, 55, 175, 194], "summar": 0, "summari": [201, 212], "super": [0, 196, 198, 207, 209], "superclass": 0, "superintend": [198, 209], "supervis": [34, 48, 55, 69, 161, 175, 194, 198, 209, 217, 220], "suppli": 98, "support": [0, 4, 6, 10, 11, 16, 21, 26, 28, 30, 33, 40, 43, 45, 48, 50, 51, 52, 54, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 125, 129, 130, 196, 198, 205, 207, 209, 216], "suppos": [202, 213], "sure": [0, 98], "survei": [54, 65, 172, 173, 174, 194], "switch": 41, "switching_point": 170, "syst": [26, 46, 49, 57, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 134, 156, 162, 181, 182, 183, 184, 185, 187, 188, 189, 192, 194], "s\u00e9bastien": [141, 194], "t": [0, 6, 8, 13, 25, 30, 38, 39, 41, 42, 48, 54, 62, 63, 64, 65, 68, 88, 114, 115, 116, 122, 133, 134, 148, 194, 201, 203, 204, 212, 214, 215, 217], "t_x": [128, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "tag": [0, 194], "take": [26, 27, 32, 35, 36, 40, 46, 48, 110, 196, 207], "taken": [88, 89, 90, 91, 92, 93], "tang": [169, 194], "target": [0, 6, 7, 8, 9, 10, 13, 36, 41, 43, 63, 64, 98, 107, 113, 114, 131, 132, 178, 194, 197, 208, 218, 219], "target_typ": [107, 110, 111], "target_v": 111, "task": [21, 31, 33, 36, 143, 194, 196, 201, 207, 212], "tb": 23, "technic": [172, 173, 174, 194], "techniqu": 83, "technol": [54, 65], "templat": 0, "template_budget_manag": 0, "template_estim": 0, "template_pool": 0, "template_pool_batch": 0, "template_pool_regress": 0, "template_query_strategi": 0, "template_stream": 0, "templatebudgetmanag": 0, "templatesingleannotatorpoolquerystrategi": 0, "templatesingleannotatorstreamquerystrategi": 0, "templateskactivemlclassifi": 0, "templateskactivemlregressor": 0, "tempor": 81, "ten": [196, 207], "tendenc": [197, 208], "teng": [149, 150, 151, 194], "tensorflow": [196, 207], "tenth": 16, "term": 55, "teschner": [47, 81, 157, 194], "test": [3, 5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 46, 62, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 196, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217], "test_idx": [199, 210], "test_init_param_a": 0, "test_queri": 0, "test_query_param_a": 0, "testbudgetmanag": 0, "testcas": 0, "testclassifi": 0, "testquerystrategi": 0, "testregressor": 0, "text": [48, 56, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 220], "text_0": 0, "text_lin": [201, 212], "text_single_lin": [201, 212], "textwrap": [201, 212], "th": [64, 113, 121], "than": [21, 39, 41, 49, 51, 63, 86, 88, 89, 90, 91, 92, 93], "thei": [0, 4, 11, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 194], "them": [0, 67, 200, 203, 205, 211, 214, 216], "theoret": [34, 55, 175, 194], "theori": [48, 158, 159, 160, 161, 194], "therebi": [67, 111], "therefor": [0, 17, 44, 45, 55, 62, 181, 182, 183, 196, 207], "theta": [87, 91, 92, 93], "theta_": [87, 91, 92, 93], "thi": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 104, 108, 113, 118, 125, 126, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "thirion": 98, "thoma": [145, 194], "those": [42, 43, 113, 202, 213, 217], "three": [0, 51, 65, 194, 198, 202, 209, 213], "threshold": [21, 26, 28, 32, 40, 48, 56, 57, 63, 76, 78, 79, 83, 84, 86, 87, 89, 91, 92, 93], "through": [0, 34, 44, 46, 153, 154, 156, 194, 198, 200, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216], "throughout": 219, "throw": [0, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84], "thu": [77, 82, 113, 197, 208], "ti": [62, 119, 120], "tien": [138, 194], "tight_layout": [202, 213], "till": 41, "tim": [160, 194], "time": [0, 21, 67, 78, 79, 84, 88, 91, 92, 93, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 201, 203, 204, 205, 207, 212, 214, 215, 216, 217], "titl": [0, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 199, 200, 201, 203, 204, 205, 206, 208, 210, 211, 212, 214, 215, 216, 217], "title_str": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "titles": [136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "tmlr": [200, 211], "tnc": 21, "tobia": [146, 147, 194], "todo": [201, 212], "togeth": 86, "tol": 21, "tool": [0, 123, 198, 209, 220], "tooltip": [201, 212], "top": [0, 40, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 217], "top_bar": [198, 209], "torch": [196, 200, 207, 211], "torch_load_kwarg": [196, 207], "torchaudio": [196, 200, 207, 211], "torchvis": [196, 200, 207, 211], "total": [8, 13, 35, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 200, 201, 202, 211, 212, 213, 218], "totensor": [200, 211], "toward": [34, 44, 153, 154, 194], "tqdm": [196, 200, 207, 211], "track": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "tracker": 0, "trade": [43, 63, 152, 194], "train": [0, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 125, 126, 128, 129, 130, 133, 134, 135, 140, 145, 146, 147, 161, 164, 165, 166, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 212, 214, 215, 216, 217], "train_idx": [199, 210], "train_siz": [196, 207], "train_split": [196, 207], "train_test_split": [196, 201, 207, 212], "training_s": [203, 204, 205, 214, 215, 216], "tran": [32, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 140, 162, 181, 182, 183, 184, 185, 187, 188, 192, 194], "transact": [200, 211], "transax": [136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "transform": [64, 95, 136, 137, 138, 139, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 200, 207, 211], "translat": [196, 207], "tree": [7, 9, 10, 13, 51, 114, 131, 132, 178, 194, 218, 219], "tri": [37, 42, 71, 72, 73, 74, 75], "trigger": 98, "trpami": [34, 55], "true": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 106, 108, 110, 111, 113, 121, 125, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216], "true_funct": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "trust": 21, "truth": 62, "try": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "tuan": 217, "tupl": [20, 106, 107, 110, 197, 198, 208, 209], "tutori": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "twinx": [197, 208], "two": [0, 21, 25, 27, 28, 32, 44, 55, 105, 195, 199, 201, 202, 206, 210, 212, 213, 217], "txt": 0, "type": [0, 6, 10, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 97, 98, 107, 110, 111, 125, 130, 196, 198, 207, 209], "typeerror": [47, 110], "typic": [0, 5, 7, 9, 10, 12, 16, 53, 116, 127, 130, 131, 132, 178, 194, 217, 218, 219], "typical_clustering_": [168, 178, 218], "typiclust": [1, 5, 7, 9, 10, 12, 16, 116, 127, 130, 131, 132, 178, 194, 200, 211, 218, 219], "u": [8, 13, 39, 54, 63, 88, 146, 147, 170, 194, 217], "u_max": 170, "u_t": 88, "ui": [201, 212], "ui_ev": [201, 212], "ulbd_indic": [196, 207], "ultil": 86, "uncertain": [25, 38, 133, 194, 195, 206], "uncertainti": [0, 5, 7, 9, 10, 11, 12, 16, 17, 25, 26, 27, 30, 32, 33, 38, 40, 54, 59, 63, 65, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 89, 91, 93, 116, 122, 126, 127, 128, 129, 130, 131, 132, 138, 171, 178, 180, 189, 193, 194, 195, 196, 200, 202, 206, 207, 211, 213, 217, 218, 219], "uncertainty_sampling_with_entropi": [172, 178, 218], "uncertainty_sampling_with_least": [173, 178, 218], "uncertainty_sampling_with_margin": [174, 178, 218], "uncertainty_scor": 1, "uncertaintysampl": [1, 167, 169, 170, 171, 172, 173, 174, 178, 194, 195, 196, 198, 199, 200, 204, 206, 207, 209, 210, 211, 215, 217, 218], "uncertaintyzliobait": [1, 76, 78, 79, 84], "unchang": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62], "uncom": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "under": [55, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "underli": [142, 143, 144, 149, 150, 151, 152, 158], "understand": [0, 195, 206], "undo": [198, 209], "undon": [198, 209], "uniform": [0, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "uniform_averag": [8, 13], "uniform_rv": [197, 208], "uniformli": [102, 197, 208], "uniqu": [106, 134, 148, 159, 160, 161, 169, 170, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 202, 205, 206, 207, 213, 216, 217], "unittest": 0, "univers": [54, 65, 172, 173, 174, 194], "unknown": 0, "unlabel": [0, 5, 6, 7, 9, 10, 12, 16, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 95, 98, 116, 125, 126, 127, 128, 129, 130, 131, 132, 164, 165, 166, 178, 194, 195, 197, 198, 200, 206, 208, 209, 211, 217, 218, 219], "unlabeled_color": 129, "unlabeled_indic": [1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 195, 196, 198, 206, 207, 209], "unlbld_idx": [195, 206], "unlbld_indic": 122, "unless": [98, 195, 199, 206, 210], "unrestrict": 18, "unspecifi": 64, "unsupervis": 15, "until": [0, 195, 206], "up": 67, "upcom": 0, "updat": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 108, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 201, 203, 205, 207, 212, 214, 216, 217], "upgrad": [196, 207], "upon": [0, 195, 206], "upper": [62, 110, 201, 212], "url": 217, "us": [0, 4, 6, 18, 20, 21, 57, 60, 62, 63, 64, 65, 67, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 100, 108, 109, 113, 125, 133, 134, 135, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 158, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 220], "usabl": 0, "use_base_clf": 67, "use_speed_up": 67, "use_stratifi": [199, 210], "user": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 195, 198, 206, 209], "usernam": 0, "userwarn": [181, 182, 183], "usual": [0, 6, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 125, 126, 128, 129, 130, 196, 198, 207, 209], "util": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "utilis": [181, 182, 183], "utilities_plot": [164, 165, 166], "utilities_test": [142, 143, 144, 149, 150, 151, 152, 158, 197, 208], "utility_fil": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "utility_lin": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166], "utility_weight": [47, 54, 81, 157, 169, 170], "utils_u": 170, "v": [8, 13, 16, 21, 27, 33, 51, 63, 92, 98, 112], "v1": 217, "v_": 16, "val": [164, 165, 166, 194, 200, 211], "valadez": 21, "valid": [16, 41, 42, 47, 49, 81, 96, 98, 99, 100, 101, 106, 108, 109, 110, 198, 199, 200, 209, 210, 211], "valid_categori": [201, 212], "valu": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 103, 105, 107, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 197, 198, 208, 209, 217, 218, 219], "value_of_information_": [175, 178, 218], "value_of_information_on_labeled_sampl": [176, 178, 218], "value_of_information_on_unlabeled_sampl": [177, 178, 218], "valueerror": [105, 109, 110, 198, 209], "valueofinformation": [1, 175, 176, 177, 178, 194, 218], "van": [26, 57, 134, 194], "vanderpla": 98, "var_keyword": 97, "variabl": [5, 8, 9, 11, 12, 13, 16, 20, 21, 71, 74, 75, 78, 83, 84, 91, 93, 107, 111, 128, 129, 131, 180, 193, 194, 201, 203, 204, 205, 212, 214, 215, 216, 218, 219], "variableuncertainti": [1, 75, 79, 192, 193, 194, 203, 205, 214, 216, 218], "variableuncertaintybudgetmanag": [1, 71, 75, 84, 91, 92], "varianc": [7, 8, 9, 10, 13, 37, 48, 114, 131, 132, 178, 194, 197, 208, 218, 219], "variant": [54, 65, 197, 208], "variat": [5, 7, 9, 10, 12, 16, 48, 68, 116, 127, 130, 131, 132, 178, 194, 218, 219], "variation_ratio": [1, 48, 160], "variou": [54, 83, 94, 123, 200, 201, 211, 212], "varoquaux": 98, "vbox": [201, 212], "ve": [198, 200, 209, 211], "vector": [5, 15, 16, 21, 64, 98, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 195, 206, 217], "verbos": [196, 207], "verif": 108, "verifi": 108, "verniko": [28, 136, 194], "version": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62, 196, 207], "vertic": [196, 207], "vi": [27, 48, 68, 135, 143, 160, 177, 194], "via": [0, 27, 32, 38, 54, 59, 86, 91, 92, 93, 135, 171, 194, 202, 213, 217, 220], "view": [0, 21, 196, 207], "violat": 110, "viraj": [135, 194], "virtualenv": 0, "vision": [32, 140, 194, 200, 211], "visit": [196, 207], "visual": [1, 133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 200, 202, 206, 211, 213, 217], "voi": [55, 175, 178, 194, 218], "vol": [34, 55], "vote": [5, 7, 9, 10, 12, 16, 20, 21, 48, 62, 64, 68, 69, 112, 116, 117, 127, 130, 131, 132, 178, 194, 196, 202, 207, 213, 218, 219], "vote_entropi": [1, 48, 161], "votingclassifi": [196, 207], "vu": [141, 194], "w": [6, 8, 13, 48, 63, 64, 68, 86, 88, 89, 90, 91, 92, 93, 112, 114, 115, 116, 117, 122], "w_": 21, "w_tol": 86, "wa": [0, 108, 126, 127, 128, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 198, 201, 209, 212], "wai": [0, 55, 196, 207, 217], "wait": [201, 212], "wait_for_interact": [201, 212], "wang": [54, 59, 171, 194], "want": [197, 198, 199, 201, 202, 203, 204, 205, 208, 209, 210, 212, 213, 214, 215, 216], "warm": [196, 207], "warn": [46, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 98, 181, 182, 183, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212], "warrant": 86, "we": [0, 16, 67, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "weight": [0, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 43, 44, 47, 48, 51, 54, 55, 62, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 98, 112, 116, 117, 122, 126, 127, 130, 131, 132, 178, 194, 218, 219], "weight_mod": 15, "weighted_embeddings_": [135, 178, 218], "weighted_uncertainty_sampl": [169, 178, 218], "weights_onli": [196, 207], "weights_prior": 21, "weinshal": [46, 53, 156, 168, 194], "weiss": 98, "well": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 124, 195, 203, 204, 205, 206, 214, 215, 216, 217], "wenbin": [35, 142, 194], "were": [0, 16, 88, 125, 129, 130], "what": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 201, 212], "when": [0, 5, 8, 13, 15, 16, 34, 41, 44, 47, 54, 63, 76, 78, 79, 83, 84, 88, 89, 90, 91, 92, 93, 97, 98, 108, 118, 196, 198, 207, 209, 217], "where": [0, 5, 8, 12, 13, 20, 21, 34, 36, 43, 44, 46, 55, 62, 64, 71, 72, 73, 74, 75, 106, 194, 197, 200, 201, 202, 208, 211, 212, 213], "wherebi": 57, "whether": [0, 4, 8, 15, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 47, 48, 51, 54, 55, 63, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 102, 103, 104, 105, 107, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 200, 202, 203, 204, 205, 207, 211, 213, 214, 215, 216], "which": [0, 4, 5, 6, 10, 11, 15, 16, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 63, 64, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 100, 107, 112, 117, 125, 126, 127, 128, 129, 130, 194, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 217], "while": [28, 38, 198, 201, 203, 204, 205, 209, 212, 214, 215, 216, 217], "white": [195, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 210, 211, 213, 214, 216], "whitespac": [201, 212], "who": [0, 202, 213], "whose": [0, 4, 5, 11, 15, 16, 18, 27, 39, 52, 63, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 113, 118, 119, 120, 127, 128], "widget": [201, 212], "width": [129, 196, 198, 201, 207, 209, 212], "wikipedia": 113, "william": [160, 194], "window": [16, 18, 33, 71, 72, 73, 74, 75, 80, 86, 88, 89, 90, 91, 92, 93, 203, 204, 205, 214, 215, 216, 217], "window_s": [18, 80], "wisconsin": [54, 65, 172, 173, 174, 194], "wise": 20, "with_traceback": 23, "within": [11, 31, 38, 39, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 199, 201, 203, 204, 205, 210, 212, 214, 215, 216, 217], "without": [0, 200, 211], "work": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 181, 182, 183, 195, 201, 206, 212], "workflow": [0, 34, 200, 211], "workshop": [16, 48, 71, 72, 73, 74, 75, 80, 87, 158, 159, 160, 161, 189, 194], "wors": [8, 13], "worth": [4, 86, 87, 88, 89, 90, 91, 92, 93], "would": [8, 13, 77, 201, 212], "wrap": [17, 18, 33, 118, 195, 201, 206, 212, 217], "wrapped_obj": 118, "wrapped_obj_nam": 118, "wrapped_text": [201, 212], "wrapper": [5, 7, 9, 10, 12, 16, 17, 18, 45, 47, 52, 54, 64, 67, 116, 118, 127, 130, 131, 132, 178, 196, 202, 207, 213, 218, 219], "write": 0, "wu": [30, 41, 42, 71, 72, 73, 74, 75, 149, 150, 151, 181, 182, 183, 184, 194], "x": [0, 3, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 95, 98, 99, 108, 110, 121, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "x1_max": 99, "x1_min": 99, "x2_max": 99, "x2_min": 99, "x_": [16, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "x_aug": [196, 207], "x_cand": [0, 43, 98, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216, 217], "x_convert": 98, "x_embed": [201, 212], "x_eval": [34, 36, 37, 44, 198, 209], "x_indic": [201, 212], "x_indices_test": [201, 212], "x_indices_train": [201, 212], "x_init": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216], "x_label": [133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "x_mesh": 124, "x_metric": 41, "x_metric_dict": 41, "x_plot": [164, 165, 166], "x_stream": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216], "x_t": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 205, 214, 216, 217], "x_test": [142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 196, 197, 199, 200, 201, 207, 208, 210, 211, 212], "x_train": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 199, 200, 201, 203, 204, 205, 207, 210, 211, 212, 214, 215, 216, 217], "x_train_arrai": [204, 215], "xiaojun": [171, 194], "xiaoqiang": [169, 194], "xlabel": [195, 196, 199, 200, 203, 204, 205, 206, 207, 210, 211, 214, 215, 216], "xmax": [124, 125, 126, 127, 129, 130], "xmin": [124, 125, 126, 127, 129, 130], "xndim_max": 99, "xndim_min": 99, "xtick": [196, 207], "xue": [71, 72, 73, 74, 75, 181, 182, 183, 184, 194], "y": [0, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 62, 63, 64, 67, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 95, 98, 112, 114, 115, 116, 117, 122, 124, 125, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217], "y_": [197, 208], "y_aggreg": [64, 117], "y_annot": [202, 213], "y_cand": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216, 217], "y_cand_tru": [204, 215], "y_center": [203, 204, 205, 214, 215, 216], "y_convert": 98, "y_dec": 95, "y_enc": 95, "y_eval": [198, 209], "y_init": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216], "y_mesh": 124, "y_metric": 41, "y_metric_dict": 41, "y_nois": [202, 213], "y_numer": 98, "y_pred": [0, 8, 13, 17, 18, 113, 142, 143, 144, 149, 150, 151, 152, 158, 164, 165, 166, 197, 208], "y_sampl": 8, "y_std": [197, 208], "y_stream": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 204, 205, 214, 215, 216], "y_t": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 203, 205, 214, 216, 217], "y_test": [196, 199, 201, 207, 210, 212], "y_test_tru": [200, 211], "y_train": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 199, 200, 201, 203, 204, 205, 207, 210, 211, 212, 214, 215, 216, 217], "y_train_id": [201, 212], "y_train_tru": [199, 200, 201, 210, 211, 212], "y_true": [8, 13, 113, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 202, 206, 207, 208, 210, 211, 213, 217], "ya": [35, 142, 194], "yang": [30, 54, 59, 71, 72, 73, 74, 75, 171, 181, 182, 183, 184, 194], "yarin": [134, 194], "year": 217, "yehuda": [46, 156, 194], "yet": 0, "yeung": [32, 140, 194], "yi": [171, 194], "yield": [198, 209], "ylabel": [195, 196, 199, 200, 203, 204, 205, 206, 207, 210, 211, 214, 215, 216], "ymax": [124, 125, 126, 127, 129, 130], "ymin": [124, 125, 126, 127, 129, 130], "you": [5, 8, 12, 13, 15, 16, 17, 18, 20, 21, 62, 194, 198, 200, 201, 209, 211, 212, 217], "your": [0, 39, 146, 147, 194, 198, 201, 209, 212, 217], "ytick": [196, 207], "yu": 21, "yunpu": [145, 194], "z": [40, 49, 57, 71, 72, 73, 74, 75], "zero": [0, 104, 108, 157, 196, 202, 207, 213], "zhang": [25, 35, 133, 142, 194], "zhao": [21, 181, 182, 183, 184, 194], "zhi": [162, 194], "zhou": [35, 49, 71, 72, 73, 74, 75, 142, 162, 181, 182, 183, 184, 194], "zip": [131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 201, 203, 205, 208, 212, 214, 216, 217], "zisserman": [200, 211], "zorder": [133, 134, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "zoubin": [37, 134, 144, 148, 194], "\u00e1": [134, 148, 194], "\u00e3": [164, 165, 166, 194], "\u00e4": [143, 194], "\u00e7": [164, 165, 166, 194], "\u00e9": [134, 148, 164, 165, 166, 194], "\u00eb": [164, 165, 166, 194], "\u00ef": [136, 194], "\u00f6": [143, 160, 194], "\u00fc": [160, 194], "\u0117": [189, 194], "\u017e": [189, 194], "\u017eliobait\u0117": [71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 84, 87, 88, 89, 91, 92, 93, 185, 187, 188, 192, 194]}, "titles": ["Contributing Guide", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.base</span></code>", "skactiveml.base.AnnotatorModelMixin", "skactiveml.base.BudgetManager", "skactiveml.base.ClassFrequencyEstimator", "skactiveml.base.MultiAnnotatorPoolQueryStrategy", "skactiveml.base.PoolQueryStrategy", "skactiveml.base.ProbabilisticRegressor", "skactiveml.base.QueryStrategy", "skactiveml.base.SingleAnnotatorPoolQueryStrategy", "skactiveml.base.SingleAnnotatorStreamQueryStrategy", "skactiveml.base.SkactivemlClassifier", "skactiveml.base.SkactivemlRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.classifier</span></code>", "skactiveml.classifier.MixtureModelClassifier", "skactiveml.classifier.ParzenWindowClassifier", "skactiveml.classifier.SklearnClassifier", "skactiveml.classifier.SlidingWindowClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.classifier.multiannotator</span></code>", "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.exceptions</span></code>", "skactiveml.exceptions.MappingError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.pool</span></code>", "skactiveml.pool.Badge", "skactiveml.pool.BatchBALD", "skactiveml.pool.Clue", "skactiveml.pool.ContrastiveAL", "skactiveml.pool.CoreSet", "skactiveml.pool.CostEmbeddingAL", "skactiveml.pool.DiscriminativeAL", "skactiveml.pool.DropQuery", "skactiveml.pool.EpistemicUncertaintySampling", "skactiveml.pool.ExpectedErrorReduction", "skactiveml.pool.ExpectedModelChangeMaximization", "skactiveml.pool.ExpectedModelOutputChange", "skactiveml.pool.ExpectedModelVarianceReduction", "skactiveml.pool.Falcun", "skactiveml.pool.FourDs", "skactiveml.pool.GreedyBALD", "skactiveml.pool.GreedySamplingTarget", "skactiveml.pool.GreedySamplingX", "skactiveml.pool.KLDivergenceMaximization", "skactiveml.pool.MonteCarloEER", "skactiveml.pool.ParallelUtilityEstimationWrapper", "skactiveml.pool.ProbCover", "skactiveml.pool.ProbabilisticAL", "skactiveml.pool.QueryByCommittee", "skactiveml.pool.Quire", "skactiveml.pool.RandomSampling", "skactiveml.pool.RegressionTreeBasedAL", "skactiveml.pool.SubSamplingWrapper", "skactiveml.pool.TypiClust", "skactiveml.pool.UncertaintySampling", "skactiveml.pool.ValueOfInformationEER", "skactiveml.pool.average_kl_divergence", "skactiveml.pool.batch_bald", "skactiveml.pool.cost_reduction", "skactiveml.pool.expected_average_precision", "skactiveml.pool.k_greedy_center", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.pool.multiannotator</span></code>", "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "skactiveml.pool.multiannotator.IntervalEstimationThreshold", "skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "skactiveml.pool.uncertainty_scores", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.pool.utils</span></code>", "skactiveml.pool.utils.IndexClassifierWrapper", "skactiveml.pool.variation_ratios", "skactiveml.pool.vote_entropy", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.stream</span></code>", "skactiveml.stream.CognitiveDualQueryStrategy", "skactiveml.stream.CognitiveDualQueryStrategyFixUn", "skactiveml.stream.CognitiveDualQueryStrategyRan", "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "skactiveml.stream.CognitiveDualQueryStrategyVarUn", "skactiveml.stream.FixedUncertainty", "skactiveml.stream.PeriodicSampling", "skactiveml.stream.RandomVariableUncertainty", "skactiveml.stream.Split", "skactiveml.stream.StreamDensityBasedAL", "skactiveml.stream.StreamProbabilisticAL", "skactiveml.stream.StreamRandomSampling", "skactiveml.stream.UncertaintyZliobaite", "skactiveml.stream.VariableUncertainty", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.stream.budgetmanager</span></code>", "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.RandomBudgetManager", "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.SplitBudgetManager", "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.utils</span></code>", "skactiveml.utils.ExtLabelEncoder", "skactiveml.utils._check_callable", "skactiveml.utils.call_func", "skactiveml.utils.check_X_y", "skactiveml.utils.check_bound", "skactiveml.utils.check_budget_manager", "skactiveml.utils.check_class_prior", "skactiveml.utils.check_classes", "skactiveml.utils.check_classifier_params", "skactiveml.utils.check_cost_matrix", "skactiveml.utils.check_equal_missing_label", "skactiveml.utils.check_indices", "skactiveml.utils.check_missing_label", "skactiveml.utils.check_n_features", "skactiveml.utils.check_random_state", "skactiveml.utils.check_scalar", "skactiveml.utils.check_type", "skactiveml.utils.compute_vote_vectors", "skactiveml.utils.ext_confusion_matrix", "skactiveml.utils.is_labeled", "skactiveml.utils.is_unlabeled", "skactiveml.utils.labeled_indices", "skactiveml.utils.majority_vote", "skactiveml.utils.match_signature", "skactiveml.utils.rand_argmax", "skactiveml.utils.rand_argmin", "skactiveml.utils.simple_batch", "skactiveml.utils.unlabeled_indices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skactiveml.visualization</span></code>", "skactiveml.visualization.mesh", "skactiveml.visualization.plot_annotator_utilities", "skactiveml.visualization.plot_contour_for_samples", "skactiveml.visualization.plot_decision_boundary", "skactiveml.visualization.plot_stream_decision_boundary", "skactiveml.visualization.plot_stream_training_data", "skactiveml.visualization.plot_utilities", "Examples", "Pool-based AL Strategies", "Batch Active Learning by Diverse Gradient Embedding (BADGE)", "Batch Bayesian Active Learning by Disagreement (BatchBALD)", "Clustering Uncertainty-weighted Embeddings (CLUE)", "Contrastive Active Learning (CAL)", "Core Set", "Active Learning with Cost Embedding", "Discriminative Active Learning", "Dropout Query (DropQuery)", "Epistemic Uncertainty Sampling", "Expected Model Change Maximization", "Expected Model Output Change", "Expected Model Variance Reduction", "Fast Active Learning by Contrastive UNcertainty (FALCUN)", "Batch Density-Diversity-Distribution-Distance Sampling", "Density-Diversity-Distribution-Distance Sampling", "Bayesian Active Learning by Disagreement (BALD)", "Greedy Sampling on the Target Space (GSy)", "Improved Greedy Sampling (GSi)", "Greedy Sampling on the Feature Space (GSx)", "Regression based Kullback Leibler Divergence Maximization", "Monte-Carlo EER with Log-Loss", "Monte-Carlo EER with Misclassification-Loss", "Parallel Utility Estimation Wrapper", "Probability Coverage (ProbCover)", "Multi-class Probabilistic Active Learning", "Query-by-Committee (QBC) with Empirical Variance", "Query-by-Committee (QBC) with Kullback-Leibler Divergence", "Query-by-Committee (QBC) with Variation Ratios", "Query-by-Committee (QBC) with Vote Entropy", "Querying Informative and Representative Examples", "Random Sampling", "Regression Tree Based Active Learning (RT-AL) with Diversity Selection", "Regression Tree Based Active Learning (RT-AL) with Random Selection", "Regression Tree Based Active Learning (RT-AL) with Representativity Selection", "Sub-sampling Wrapper", "Typical Clustering (TypiClust)", "Density-weighted Uncertainty Sampling", "Dual Strategy for Active Learning", "Expected Average Precision", "Uncertainty Sampling with Entropy", "Uncertainty Sampling with Least-Confidence", "Uncertainty Sampling with Margin", "Value of Information", "Value of Information on Labeled Samples", "Value of Information on Unlabeled Samples", "Computation times", "Computation times", "Stream-based AL Strategies", "Cognitive Dual-Query Strategy with Fixed-Uncertainty", "Cognitive Dual-Query Strategy with Random Sampling", "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty", "Cognitive Dual-Query Strategy with Variable-Uncertainty", "Fixed-Uncertainty", "Periodic Sampling", "Randomized-Variable-Uncertainty", "Split", "Density Based Active Learning for Data Streams", "Probabilistic Active Learning in Datastreams", "Stream Random Sampling", "Variable-Uncertainty", "Computation times", "Strategy Overview", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Active Image Classification via Self-supervised Learning", "Paper Annotation Tool using Text Embeddings", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning with Pool-based Query Strategies", "Stream-based Active Learning with River", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Active Image Classification via Self-supervised Learning", "Paper Annotation Tool using Text Embeddings", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning with Pool-based Query Strategies", "Stream-based Active Learning with River", "scikit-activeml: A Library and Toolbox for Active Learning Algorithms", "Computation times", "skactiveml.utils.MISSING_LABEL", "Tutorials"], "titleterms": {"A": 217, "And": [203, 204, 214, 215], "If": 0, "The": [198, 209], "__init__": 0, "_check_cal": 96, "activ": [133, 134, 136, 138, 139, 145, 148, 157, 164, 165, 166, 170, 189, 190, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217], "activeml": [196, 207, 217], "advic": 0, "al": [131, 132, 164, 165, 166, 180], "algorithm": 217, "alreadi": 0, "an": 0, "annot": [0, 198, 201, 202, 209, 212, 213], "annotatorensembleclassifi": 20, "annotatorlogisticregress": 21, "annotatormodelmixin": 3, "api": 1, "augment": [196, 207], "averag": 171, "average_kl_diverg": 56, "badg": [25, 133], "balancedincrementalquantilefilt": 86, "bald": 148, "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 131, 132, 152, 164, 165, 166, 180, 189, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217], "baselin": 194, "batch": [133, 134, 146, 204, 215], "batch_bald": 57, "batchbald": [26, 134], "bayesian": [134, 148], "budget_manag": 0, "budgetmanag": [4, 85, 86, 87, 88, 89, 90, 91, 92, 93], "bug": 0, "build": 0, "c3": 0, "cal": 136, "call_func": 97, "carlo": [153, 154], "chang": [142, 143], "check": 0, "check_bound": 99, "check_budget_manag": 100, "check_class": 102, "check_class_prior": 101, "check_classifier_param": 103, "check_cost_matrix": 104, "check_equal_missing_label": 105, "check_indic": 106, "check_missing_label": 107, "check_n_featur": 108, "check_random_st": 109, "check_scalar": 110, "check_typ": 111, "check_x_i": 98, "cite": 217, "class": [2, 14, 19, 22, 24, 61, 66, 70, 85, 94, 157, 198, 209], "classfrequencyestim": 5, "classif": [195, 196, 199, 200, 202, 206, 207, 210, 211, 213], "classifi": [0, 14, 15, 16, 17, 18, 19, 20, 21], "clue": [27, 135], "cluster": [135, 168], "code": 0, "cognit": [181, 182, 183, 184], "cognitivedualquerystrategi": 71, "cognitivedualquerystrategyfixun": 72, "cognitivedualquerystrategyran": 73, "cognitivedualquerystrategyranvarun": 74, "cognitivedualquerystrategyvarun": 75, "committe": [158, 159, 160, 161], "comput": [178, 179, 193, 218], "compute_vote_vector": 112, "confid": 173, "contrast": [136, 145], "contrastiv": 28, "contribut": 0, "contributor": 0, "convent": 0, "convolut": [196, 207], "core": 137, "coreset": 29, "cost": 138, "cost_reduct": 58, "costembedding": 30, "coverag": [0, 156], "creat": [198, 209], "cycl": [0, 195, 201, 203, 204, 205, 206, 212, 214, 215, 216], "data": [189, 195, 196, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216], "dataset": [198, 200, 201, 209, 211, 212], "datastream": 190, "deep": [196, 207], "densiti": [146, 147, 169, 189], "densitybasedsplitbudgetmanag": 87, "depend": 0, "develop": 0, "digit": [196, 207], "dinov2": [200, 211], "disagr": [134, 148], "discrimin": 139, "discriminativ": 31, "distanc": [146, 147], "distribut": [146, 147], "diverg": [152, 159], "divers": [133, 146, 147, 164], "document": 0, "dropout": 140, "dropqueri": [32, 140], "dual": [170, 181, 182, 183, 184], "eer": [153, 154], "embed": [133, 135, 138, 201, 212], "empir": 158, "ensembl": [196, 207], "entropi": [161, 172], "environ": 0, "epistem": 141, "epistemicuncertaintysampl": 33, "estim": 155, "estimatedbudgetzliobait": 88, "evalu": [199, 210], "exampl": [0, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 114, 116, 121, 122, 126, 127, 128, 129, 130, 131, 162, 217, 219], "except": [22, 23], "exist": 0, "expect": [142, 143, 144, 171], "expected_average_precis": 59, "expectederrorreduct": 34, "expectedmodelchangemaxim": 35, "expectedmodeloutputchang": 36, "expectedmodelvariancereduct": 37, "experi": [199, 200, 210, 211], "ext_confusion_matrix": 113, "extlabelencod": 95, "falcun": [38, 145], "fast": 145, "featur": 151, "fit": 0, "fix": [181, 185], "fixeduncertainti": 76, "fixeduncertaintybudgetmanag": 89, "fourd": 39, "function": [24, 94, 123], "gener": [0, 195, 197, 199, 202, 203, 204, 205, 206, 208, 210, 213, 214, 215, 216], "get": [0, 195, 197, 202, 203, 206, 208, 213, 214], "gradient": 133, "greedi": [149, 150, 151], "greedybald": 40, "greedysamplingtarget": 41, "greedysamplingx": 42, "gsi": 150, "gsx": 151, "gsy": 149, "guid": 0, "help": 0, "homebrew": 0, "hybrid": 194, "imag": [200, 211], "improv": 150, "indexclassifierwrapp": 67, "indic": 217, "inform": [162, 175, 176, 177, 194], "initi": [203, 204, 205, 214, 215, 216], "instal": [0, 217], "interfac": [201, 212], "intervalestimationannotmodel": 62, "intervalestimationthreshold": 63, "is_label": 114, "is_unlabel": 115, "issu": 0, "k_greedy_cent": 60, "kldivergencemaxim": 43, "kullback": [152, 159], "label": 176, "labeled_indic": 116, "learn": [133, 134, 136, 138, 139, 145, 148, 157, 164, 165, 166, 170, 189, 190, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217], "least": 173, "leibler": [152, 159], "librari": 217, "load": [196, 200, 207, 211], "log": 153, "loop": [199, 200, 210, 211], "loss": [153, 154], "maco": 0, "majority_vot": 117, "manag": [199, 200, 210, 211], "mappingerror": 23, "margin": 174, "match_signatur": 118, "maxim": [142, 152], "mesh": 124, "miniconda": 0, "misclassif": 154, "missing_label": 219, "mixturemodelclassifi": 15, "model": [0, 142, 143, 144, 199, 200, 210, 211], "mont": [153, 154], "montecarlo": 44, "multi": [0, 157, 202, 213], "multiannot": [19, 20, 21, 61, 62, 63, 64], "multiannotatorpoolquerystrategi": 6, "network": [196, 207], "neural": [196, 207], "output": 143, "overview": [0, 194, 217], "paper": [201, 212], "parallel": 155, "parallelutilityestimationwrapp": 45, "paramet": [13, 199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "parzenwindowclassifi": 16, "period": 186, "periodicsampl": 77, "plot": [199, 200, 210, 211], "plot_annotator_util": 125, "plot_contour_for_sampl": 126, "plot_decision_boundari": 127, "plot_stream_decision_boundari": 128, "plot_stream_training_data": 129, "plot_util": 130, "pool": [0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 131, 132, 194, 195, 196, 197, 199, 202, 204, 206, 207, 208, 210, 213, 215, 217], "poolquerystrategi": 7, "precis": 171, "predict": 0, "predict_annotator_perf": 0, "predict_proba": 0, "prepar": [200, 211], "preprocess": [200, 211], "probabilist": [47, 157, 190], "probabilisticregressor": 8, "probabl": 156, "probcov": [46, 156], "process": [198, 209], "pull": 0, "qbc": [158, 159, 160, 161], "queri": [0, 140, 158, 159, 160, 161, 162, 181, 182, 183, 184, 195, 199, 200, 203, 204, 205, 206, 210, 211, 214, 215, 216, 217], "query_by_util": 0, "querybycommitte": 48, "querystrategi": 9, "quir": 49, "rand_argmax": 119, "rand_argmin": 120, "random": [163, 165, 182, 183, 187, 191, 199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "randombudgetmanag": 90, "randomsampl": 50, "randomvariableuncertainti": 78, "randomvariableuncertaintybudgetmanag": 91, "ratio": 160, "reduct": 144, "refer": [1, 194], "regress": [152, 164, 165, 166, 197, 208], "regressiontreebased": 51, "regressor": 0, "report": 0, "repres": [162, 166, 194], "request": 0, "result": [196, 199, 200, 207, 210, 211], "river": [205, 216], "roadmap": 0, "rt": [164, 165, 166], "sampl": [141, 146, 147, 149, 150, 151, 163, 167, 169, 172, 173, 174, 176, 177, 182, 186, 191, 198, 209], "scikit": [196, 207, 217], "score": 0, "seed": [199, 200, 203, 204, 205, 210, 211, 214, 215, 216], "select": [164, 165, 166], "self": [200, 211], "set": [137, 195, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216], "setup": 0, "simpl": [199, 210], "simple_batch": 121, "singl": 0, "singleannotatorpoolquerystrategi": 10, "singleannotatorstreamquerystrategi": 11, "singleannotatorwrapp": 64, "skactiveml": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 219], "skactivemlclassifi": 12, "skactivemlregressor": 13, "sklearnclassifi": 17, "skorch": [196, 207], "slidingwindowclassifi": 18, "space": [149, 151], "split": [79, 188], "splitbudgetmanag": 92, "start": [0, 195, 197, 198, 202, 203, 204, 205, 206, 208, 209, 213, 214, 215, 216], "strategi": [0, 131, 132, 170, 180, 181, 182, 183, 184, 194, 195, 199, 200, 203, 204, 205, 206, 210, 211, 214, 215, 216, 217], "stream": [0, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 131, 180, 189, 191, 194, 203, 204, 205, 214, 215, 216, 217], "streamdensitybased": 80, "streamprobabilist": 81, "streamrandomsampl": 82, "studi": [199, 210], "sub": 167, "submodul": [14, 24, 70], "subsamplingwrapp": 52, "supervis": [200, 211], "tabl": 217, "target": 149, "test": 0, "text": [201, 212], "thank": 0, "time": [178, 179, 193, 218], "tool": [201, 212], "toolbox": 217, "track": 0, "tree": [164, 165, 166], "tutori": 220, "typic": 168, "typiclust": [53, 168], "uncertainti": [135, 141, 145, 169, 172, 173, 174, 181, 183, 184, 185, 187, 192], "uncertainty_scor": 65, "uncertaintysampl": 54, "uncertaintyzliobait": 83, "unlabel": 177, "unlabeled_indic": 122, "updat": 0, "us": [5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 114, 116, 121, 122, 126, 127, 128, 129, 130, 201, 212, 219], "user": [201, 212, 217], "util": [66, 67, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 155, 219], "valu": [175, 176, 177], "valueofinformation": 55, "variabl": [183, 184, 187, 192], "variableuncertainti": 84, "variableuncertaintybudgetmanag": 93, "varianc": [144, 158], "variat": 160, "variation_ratio": 68, "via": [200, 211], "visual": [123, 124, 125, 126, 127, 128, 129, 130, 196, 207], "vote": 161, "vote_entropi": 69, "weight": [135, 169], "widget": [198, 209], "work": 0, "wrapper": [155, 167, 194], "you": 0, "your": [200, 211]}})